"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
const _defaultAccess = /*#__PURE__*/ _interop_require_default(require("../../auth/defaultAccess"));
const _sanitize = require("../../fields/config/sanitize");
const _types = require("../../fields/config/types");
const _mergeBaseFields = /*#__PURE__*/ _interop_require_default(require("../../fields/mergeBaseFields"));
const _translations = /*#__PURE__*/ _interop_require_default(require("../../translations"));
const _formatLabels = require("../../utilities/formatLabels");
const _baseFields = /*#__PURE__*/ _interop_require_default(require("../../versions/baseFields"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const sanitizeGlobals = (config)=>{
    const { collections, globals } = config;
    const sanitizedGlobals = globals.map((global)=>{
        const sanitizedGlobal = {
            ...global
        };
        sanitizedGlobal.label = sanitizedGlobal.label || (0, _formatLabels.toWords)(sanitizedGlobal.slug);
        // /////////////////////////////////
        // Ensure that collection has required object structure
        // /////////////////////////////////
        sanitizedGlobal.endpoints = sanitizedGlobal.endpoints ?? [];
        if (!sanitizedGlobal.hooks) sanitizedGlobal.hooks = {};
        if (!sanitizedGlobal.access) sanitizedGlobal.access = {};
        if (!sanitizedGlobal.admin) sanitizedGlobal.admin = {};
        if (!sanitizedGlobal.access.read) sanitizedGlobal.access.read = _defaultAccess.default;
        if (!sanitizedGlobal.access.update) sanitizedGlobal.access.update = _defaultAccess.default;
        if (!sanitizedGlobal.hooks.beforeValidate) sanitizedGlobal.hooks.beforeValidate = [];
        if (!sanitizedGlobal.hooks.beforeChange) sanitizedGlobal.hooks.beforeChange = [];
        if (!sanitizedGlobal.hooks.afterChange) sanitizedGlobal.hooks.afterChange = [];
        if (!sanitizedGlobal.hooks.beforeRead) sanitizedGlobal.hooks.beforeRead = [];
        if (!sanitizedGlobal.hooks.afterRead) sanitizedGlobal.hooks.afterRead = [];
        if (sanitizedGlobal.versions) {
            if (sanitizedGlobal.versions === true) sanitizedGlobal.versions = {
                drafts: false
            };
            if (sanitizedGlobal.versions.drafts) {
                if (sanitizedGlobal.versions.drafts === true) {
                    sanitizedGlobal.versions.drafts = {
                        autosave: false,
                        validate: false
                    };
                }
                if (sanitizedGlobal.versions.drafts.autosave === true) {
                    sanitizedGlobal.versions.drafts.autosave = {
                        interval: 2000
                    };
                }
                if (sanitizedGlobal.versions.drafts.validate === undefined) {
                    sanitizedGlobal.versions.drafts.validate = false;
                }
                sanitizedGlobal.fields = (0, _mergeBaseFields.default)(sanitizedGlobal.fields, _baseFields.default);
            }
        }
        if (!sanitizedGlobal.custom) sanitizedGlobal.custom = {};
        // /////////////////////////////////
        // Sanitize fields
        // /////////////////////////////////
        let hasUpdatedAt = null;
        let hasCreatedAt = null;
        sanitizedGlobal.fields.some((field)=>{
            if ((0, _types.fieldAffectsData)(field)) {
                if (field.name === 'updatedAt') hasUpdatedAt = true;
                if (field.name === 'createdAt') hasCreatedAt = true;
            }
            return hasCreatedAt && hasUpdatedAt;
        });
        if (!hasUpdatedAt) {
            sanitizedGlobal.fields.push({
                name: 'updatedAt',
                type: 'date',
                admin: {
                    disableBulkEdit: true,
                    hidden: true
                },
                label: _translations.default['general:updatedAt']
            });
        }
        if (!hasCreatedAt) {
            sanitizedGlobal.fields.push({
                name: 'createdAt',
                type: 'date',
                admin: {
                    disableBulkEdit: true,
                    hidden: true
                },
                label: _translations.default['general:createdAt']
            });
        }
        const validRelationships = collections.map((c)=>c.slug) || [];
        sanitizedGlobal.fields = (0, _sanitize.sanitizeFields)({
            config,
            fields: sanitizedGlobal.fields,
            validRelationships
        });
        return sanitizedGlobal;
    });
    return sanitizedGlobals;
};
const _default = sanitizeGlobals;

//# sourceMappingURL=data:application/json;base64,