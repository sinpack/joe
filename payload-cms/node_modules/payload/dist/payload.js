"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    BasePayload: function() {
        return BasePayload;
    },
    getPayload: function() {
        return getPayload;
    }
});
const _crypto = /*#__PURE__*/ _interop_require_default(require("crypto"));
const _path = /*#__PURE__*/ _interop_require_default(require("path"));
const _crypto1 = require("./auth/crypto");
const _local = /*#__PURE__*/ _interop_require_default(require("./collections/operations/local"));
const _find = /*#__PURE__*/ _interop_require_default(require("./config/find"));
const _build = /*#__PURE__*/ _interop_require_default(require("./email/build"));
const _defaults = require("./email/defaults");
const _sendEmail = /*#__PURE__*/ _interop_require_default(require("./email/sendEmail"));
const _local1 = /*#__PURE__*/ _interop_require_default(require("./globals/operations/local"));
const _registerSchema = /*#__PURE__*/ _interop_require_default(require("./graphql/registerSchema"));
const _logger = /*#__PURE__*/ _interop_require_default(require("./utilities/logger"));
const _serverInit = require("./utilities/telemetry/events/serverInit");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
class BasePayload {
    Mutation = {
        name: 'Mutation',
        fields: {}
    };
    Query = {
        name: 'Query',
        fields: {}
    };
    authenticate;
    collections = {};
    config;
    /**
   * @description Performs count operation
   * @param options
   * @returns count of documents satisfying query
   */ count = async (options)=>{
        const { count } = _local.default;
        return count(this, options);
    };
    /**
   * @description Performs create operation
   * @param options
   * @returns created document
   */ create = async (options)=>{
        const { create } = _local.default;
        return create(this, options);
    };
    db;
    decrypt = _crypto1.decrypt;
    email;
    emailOptions;
    encrypt = _crypto1.encrypt;
    errorHandler;
    express;
    extensions;
    /**
   * @description Find documents with criteria
   * @param options
   * @returns documents satisfying query
   */ find = async (options)=>{
        const { find } = _local.default;
        return find(this, options);
    };
    findByID = async (options)=>{
        const { findByID } = _local.default;
        return findByID(this, options);
    };
    findGlobal = async (options)=>{
        const { findOne } = _local1.default;
        return findOne(this, options);
    };
    /**
   * @description Find global version by ID
   * @param options
   * @returns global version with specified ID
   */ findGlobalVersionByID = async (options)=>{
        const { findVersionByID } = _local1.default;
        return findVersionByID(this, options);
    };
    /**
   * @description Find global versions with criteria
   * @param options
   * @returns versions satisfying query
   */ findGlobalVersions = async (options)=>{
        const { findVersions } = _local1.default;
        return findVersions(this, options);
    };
    /**
   * @description Find version by ID
   * @param options
   * @returns version with specified ID
   */ findVersionByID = async (options)=>{
        const { findVersionByID } = _local.default;
        return findVersionByID(this, options);
    };
    /**
   * @description Find versions with criteria
   * @param options
   * @returns versions satisfying query
   */ findVersions = async (options)=>{
        const { findVersions } = _local.default;
        return findVersions(this, options);
    };
    forgotPassword = async (options)=>{
        const { forgotPassword } = _local.default.auth;
        return forgotPassword(this, options);
    };
    getAPIURL = ()=>`${this.config.serverURL}${this.config.routes.api}`;
    getAdminURL = ()=>`${this.config.serverURL}${this.config.routes.admin}`;
    globals;
    local;
    logger;
    login = async (options)=>{
        const { login } = _local.default.auth;
        return login(this, options);
    };
    /**
   * @description Find document by ID
   * @param options
   * @returns document with specified ID
   */ resetPassword = async (options)=>{
        const { resetPassword } = _local.default.auth;
        return resetPassword(this, options);
    };
    /**
   * @description Restore global version by ID
   * @param options
   * @returns version with specified ID
   */ restoreGlobalVersion = async (options)=>{
        const { restoreVersion } = _local1.default;
        return restoreVersion(this, options);
    };
    /**
   * @description Restore version by ID
   * @param options
   * @returns version with specified ID
   */ restoreVersion = async (options)=>{
        const { restoreVersion } = _local.default;
        return restoreVersion(this, options);
    };
    router;
    schema;
    secret;
    sendEmail;
    types;
    unlock = async (options)=>{
        const { unlock } = _local.default.auth;
        return unlock(this, options);
    };
    updateGlobal = async (options)=>{
        const { update } = _local1.default;
        return update(this, options);
    };
    validationRules;
    verifyEmail = async (options)=>{
        const { verifyEmail } = _local.default.auth;
        return verifyEmail(this, options);
    };
    versions = {};
    delete(options) {
        const { deleteLocal } = _local.default;
        return deleteLocal(this, options);
    }
    /**
   * @description Initializes Payload
   * @param options
   */ async init(options) {
        this.logger = options.logger ?? (0, _logger.default)('payload', options.loggerOptions, options.loggerDestination);
        if (!options.secret) {
            throw new Error('Error: missing secret key. A secret key is needed to secure Payload.');
        }
        this.secret = _crypto.default.createHash('sha256').update(options.secret).digest('hex').slice(0, 32);
        this.local = options.local;
        if (options.config) {
            this.config = await options.config;
            const configPath = (0, _find.default)();
            this.config = {
                ...this.config,
                paths: {
                    config: configPath,
                    configDir: _path.default.dirname(configPath),
                    rawConfig: configPath
                }
            };
        } else {
            // eslint-disable-next-line @typescript-eslint/no-var-requires, global-require
            const loadConfig = require('./config/load').default;
            this.config = await loadConfig(this.logger);
        }
        this.globals = {
            config: this.config.globals
        };
        this.config.collections.forEach((collection)=>{
            this.collections[collection.slug] = {
                config: collection
            };
        });
        this.db = this.config.db({
            payload: this
        });
        this.db.payload = this;
        if (this.db?.init) {
            await this.db.init(this);
        }
        if (!options.disableDBConnect && this.db.connect) {
            await this.db.connect(this);
        }
        this.logger.info('Starting Payload...');
        // Configure email service
        const emailOptions = options.email ? {
            ...options.email
        } : this.config.email;
        if (options.email && this.config.email) {
            this.logger.warn('Email options provided in both init options and config. Using init options.');
        }
        this.emailOptions = emailOptions ?? _defaults.defaults;
        this.email = (0, _build.default)(this.emailOptions, this.logger);
        this.sendEmail = _sendEmail.default.bind(this);
        if (!this.config.graphQL.disable) {
            (0, _registerSchema.default)(this);
        }
        (0, _serverInit.serverInit)(this);
        if (!options.disableOnInit) {
            if (typeof options.onInit === 'function') await options.onInit(this);
            if (typeof this.config.onInit === 'function') await this.config.onInit(this);
        }
        return this;
    }
    update(options) {
        const { update } = _local.default;
        return update(this, options);
    }
}
let cached = global._payload;
if (!cached) {
    // eslint-disable-next-line no-multi-assign
    cached = global._payload = {
        payload: null,
        promise: null
    };
}
const getPayload = async (options)=>{
    if (cached.payload) {
        return cached.payload;
    }
    if (!cached.promise) {
        cached.promise = new BasePayload().init(options);
    }
    try {
        cached.payload = await cached.promise;
    } catch (e) {
        cached.promise = null;
        throw e;
    }
    return cached.payload;
};

//# sourceMappingURL=data:application/json;base64,