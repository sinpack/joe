"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
const _jsonwebtoken = /*#__PURE__*/ _interop_require_default(require("jsonwebtoken"));
const _errors = require("../../errors");
const _commitTransaction = require("../../utilities/commitTransaction");
const _getCookieExpiration = /*#__PURE__*/ _interop_require_default(require("../../utilities/getCookieExpiration"));
const _initTransaction = require("../../utilities/initTransaction");
const _killTransaction = require("../../utilities/killTransaction");
const _authenticate = require("../strategies/local/authenticate");
const _generatePasswordSaltHash = require("../strategies/local/generatePasswordSaltHash");
const _getFieldsToSign = require("./getFieldsToSign");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
async function resetPassword(args) {
    if (!Object.prototype.hasOwnProperty.call(args.data, 'token') || !Object.prototype.hasOwnProperty.call(args.data, 'password')) {
        throw new _errors.APIError('Missing required data.');
    }
    const { collection: { config: collectionConfig }, data, depth, overrideAccess, req: { payload: { config, secret }, payload }, req } = args;
    try {
        const shouldCommit = await (0, _initTransaction.initTransaction)(req);
        // /////////////////////////////////////
        // Reset Password
        // /////////////////////////////////////
        const user = await payload.db.findOne({
            collection: collectionConfig.slug,
            req,
            where: {
                resetPasswordExpiration: {
                    greater_than: new Date()
                },
                resetPasswordToken: {
                    equals: data.token
                }
            }
        });
        if (!user) throw new _errors.APIError('Token is either invalid or has expired.');
        // TODO: replace this method
        const { hash, salt } = await (0, _generatePasswordSaltHash.generatePasswordSaltHash)({
            password: data.password
        });
        user.salt = salt;
        user.hash = hash;
        user.resetPasswordExpiration = new Date().toISOString();
        if (collectionConfig.auth.verify) {
            user._verified = true;
        }
        const doc = await payload.db.updateOne({
            id: user.id,
            collection: collectionConfig.slug,
            data: user,
            req
        });
        await (0, _authenticate.authenticateLocalStrategy)({
            doc,
            password: data.password
        });
        const fieldsToSign = (0, _getFieldsToSign.getFieldsToSign)({
            collectionConfig,
            email: user.email,
            user
        });
        const token = _jsonwebtoken.default.sign(fieldsToSign, secret, {
            expiresIn: collectionConfig.auth.tokenExpiration
        });
        if (args.res) {
            const cookieOptions = {
                domain: undefined,
                expires: (0, _getCookieExpiration.default)(collectionConfig.auth.tokenExpiration),
                httpOnly: true,
                path: '/',
                sameSite: collectionConfig.auth.cookies.sameSite,
                secure: collectionConfig.auth.cookies.secure
            };
            if (collectionConfig.auth.cookies.domain) cookieOptions.domain = collectionConfig.auth.cookies.domain;
            args.res.cookie(`${config.cookiePrefix}-token`, token, cookieOptions);
        }
        const fullUser = await payload.findByID({
            id: user.id,
            collection: collectionConfig.slug,
            depth,
            overrideAccess,
            req
        });
        if (shouldCommit) await (0, _commitTransaction.commitTransaction)(req);
        return {
            token: collectionConfig.auth.removeTokenFromResponses ? undefined : token,
            user: fullUser
        };
    } catch (error) {
        await (0, _killTransaction.killTransaction)(req);
        throw error;
    }
}
const _default = resetPassword;

//# sourceMappingURL=data:application/json;base64,