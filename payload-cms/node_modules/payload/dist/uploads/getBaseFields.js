"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
const _extractTranslations = require("../translations/extractTranslations");
const _mimeTypeValidator = require("./mimeTypeValidator");
const labels = (0, _extractTranslations.extractTranslations)([
    'upload:width',
    'upload:height',
    'upload:fileSize',
    'upload:fileName',
    'upload:sizes'
]);
const getBaseUploadFields = ({ collection, config })=>{
    const uploadOptions = typeof collection.upload === 'object' ? collection.upload : {};
    const mimeType = {
        name: 'mimeType',
        type: 'text',
        admin: {
            hidden: true,
            readOnly: true
        },
        label: 'MIME Type'
    };
    const url = {
        name: 'url',
        type: 'text',
        admin: {
            hidden: true,
            readOnly: true
        },
        label: 'URL'
    };
    const width = {
        name: 'width',
        type: 'number',
        admin: {
            hidden: true,
            readOnly: true
        },
        label: labels['upload:width']
    };
    const height = {
        name: 'height',
        type: 'number',
        admin: {
            hidden: true,
            readOnly: true
        },
        label: labels['upload:height']
    };
    const filesize = {
        name: 'filesize',
        type: 'number',
        admin: {
            hidden: true,
            readOnly: true
        },
        label: labels['upload:fileSize']
    };
    const filename = {
        name: 'filename',
        type: 'text',
        admin: {
            disableBulkEdit: true,
            hidden: true,
            readOnly: true
        },
        index: true,
        label: labels['upload:fileName'],
        unique: true
    };
    let uploadFields = [
        {
            ...url,
            hooks: {
                afterRead: [
                    ({ data })=>{
                        if (data?.filename) {
                            if (uploadOptions.staticURL.startsWith('/')) {
                                return `${config.serverURL}${uploadOptions.staticURL}/${data.filename}`;
                            }
                            return `${uploadOptions.staticURL}/${data.filename}`;
                        }
                        return undefined;
                    }
                ]
            }
        },
        filename,
        mimeType,
        filesize,
        width,
        height
    ];
    if (uploadOptions.mimeTypes) {
        mimeType.validate = (0, _mimeTypeValidator.mimeTypeValidator)(uploadOptions.mimeTypes);
    }
    // Add focal point fields if not disabled
    if (uploadOptions.focalPoint !== false || uploadOptions.imageSizes || uploadOptions.resizeOptions) {
        uploadFields = uploadFields.concat([
            'focalX',
            'focalY'
        ].map((name)=>{
            return {
                name,
                type: 'number',
                admin: {
                    hidden: true
                }
            };
        }));
    }
    if (uploadOptions.imageSizes) {
        uploadFields = uploadFields.concat([
            {
                name: 'sizes',
                type: 'group',
                admin: {
                    hidden: true
                },
                fields: uploadOptions.imageSizes.map((size)=>({
                        name: size.name,
                        type: 'group',
                        admin: {
                            hidden: true
                        },
                        fields: [
                            {
                                ...url,
                                hooks: {
                                    afterRead: [
                                        ({ data })=>{
                                            const sizeFilename = data?.sizes?.[size.name]?.filename;
                                            if (sizeFilename) {
                                                if (uploadOptions.staticURL.startsWith('/')) {
                                                    return `${config.serverURL}${uploadOptions.staticURL}/${sizeFilename}`;
                                                }
                                                return `${uploadOptions.staticURL}/${sizeFilename}`;
                                            }
                                            return null;
                                        }
                                    ]
                                }
                            },
                            width,
                            height,
                            mimeType,
                            filesize,
                            {
                                ...filename,
                                unique: false
                            }
                        ],
                        label: size.name
                    })),
                label: labels['upload:sizes']
            }
        ]);
    }
    return uploadFields;
};
const _default = getBaseUploadFields;

//# sourceMappingURL=data:application/json;base64,