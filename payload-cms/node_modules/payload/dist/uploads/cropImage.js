"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    default: function() {
        return cropImage;
    },
    percentToPixel: function() {
        return percentToPixel;
    }
});
const _sharp = /*#__PURE__*/ _interop_require_default(require("sharp"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const percentToPixel = (value, dimension)=>{
    if (!value) return 0;
    return Math.floor(parseFloat(value) / 100 * dimension);
};
async function cropImage({ cropData, dimensions, file }) {
    try {
        const fileIsAnimatedType = [
            'image/avif',
            'image/gif',
            'image/webp'
        ].includes(file.mimetype);
        const { heightPixels, widthPixels, x, y } = cropData;
        const sharpOptions = {};
        if (fileIsAnimatedType) sharpOptions.animated = true;
        const formattedCropData = {
            height: Number(heightPixels),
            left: percentToPixel(x, dimensions.width),
            top: percentToPixel(y, dimensions.height),
            width: Number(widthPixels)
        };
        const cropped = (0, _sharp.default)(file.tempFilePath || file.data, sharpOptions).extract(formattedCropData);
        return await cropped.toBuffer({
            resolveWithObject: true
        });
    } catch (error) {
        console.error(`Error cropping image:`, error);
        throw error;
    }
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91cGxvYWRzL2Nyb3BJbWFnZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IFNoYXJwT3B0aW9ucyB9IGZyb20gJ3NoYXJwJ1xuXG5pbXBvcnQgc2hhcnAgZnJvbSAnc2hhcnAnXG5cbmV4cG9ydCBjb25zdCBwZXJjZW50VG9QaXhlbCA9ICh2YWx1ZTogc3RyaW5nLCBkaW1lbnNpb246IG51bWJlcik6IG51bWJlciA9PiB7XG4gIGlmICghdmFsdWUpIHJldHVybiAwXG4gIHJldHVybiBNYXRoLmZsb29yKChwYXJzZUZsb2F0KHZhbHVlKSAvIDEwMCkgKiBkaW1lbnNpb24pXG59XG5leHBvcnQgZGVmYXVsdCBhc3luYyBmdW5jdGlvbiBjcm9wSW1hZ2UoeyBjcm9wRGF0YSwgZGltZW5zaW9ucywgZmlsZSB9KSB7XG4gIHRyeSB7XG4gICAgY29uc3QgZmlsZUlzQW5pbWF0ZWRUeXBlID0gWydpbWFnZS9hdmlmJywgJ2ltYWdlL2dpZicsICdpbWFnZS93ZWJwJ10uaW5jbHVkZXMoZmlsZS5taW1ldHlwZSlcblxuICAgIGNvbnN0IHsgaGVpZ2h0UGl4ZWxzLCB3aWR0aFBpeGVscywgeCwgeSB9ID0gY3JvcERhdGFcblxuICAgIGNvbnN0IHNoYXJwT3B0aW9uczogU2hhcnBPcHRpb25zID0ge31cblxuICAgIGlmIChmaWxlSXNBbmltYXRlZFR5cGUpIHNoYXJwT3B0aW9ucy5hbmltYXRlZCA9IHRydWVcblxuICAgIGNvbnN0IGZvcm1hdHRlZENyb3BEYXRhOiBzaGFycC5SZWdpb24gPSB7XG4gICAgICBoZWlnaHQ6IE51bWJlcihoZWlnaHRQaXhlbHMpLFxuICAgICAgbGVmdDogcGVyY2VudFRvUGl4ZWwoeCwgZGltZW5zaW9ucy53aWR0aCksXG4gICAgICB0b3A6IHBlcmNlbnRUb1BpeGVsKHksIGRpbWVuc2lvbnMuaGVpZ2h0KSxcbiAgICAgIHdpZHRoOiBOdW1iZXIod2lkdGhQaXhlbHMpLFxuICAgIH1cblxuICAgIGNvbnN0IGNyb3BwZWQgPSBzaGFycChmaWxlLnRlbXBGaWxlUGF0aCB8fCBmaWxlLmRhdGEsIHNoYXJwT3B0aW9ucykuZXh0cmFjdChmb3JtYXR0ZWRDcm9wRGF0YSlcblxuICAgIHJldHVybiBhd2FpdCBjcm9wcGVkLnRvQnVmZmVyKHtcbiAgICAgIHJlc29sdmVXaXRoT2JqZWN0OiB0cnVlLFxuICAgIH0pXG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcihgRXJyb3IgY3JvcHBpbmcgaW1hZ2U6YCwgZXJyb3IpXG4gICAgdGhyb3cgZXJyb3JcbiAgfVxufVxuIl0sIm5hbWVzIjpbImNyb3BJbWFnZSIsInBlcmNlbnRUb1BpeGVsIiwidmFsdWUiLCJkaW1lbnNpb24iLCJNYXRoIiwiZmxvb3IiLCJwYXJzZUZsb2F0IiwiY3JvcERhdGEiLCJkaW1lbnNpb25zIiwiZmlsZSIsImZpbGVJc0FuaW1hdGVkVHlwZSIsImluY2x1ZGVzIiwibWltZXR5cGUiLCJoZWlnaHRQaXhlbHMiLCJ3aWR0aFBpeGVscyIsIngiLCJ5Iiwic2hhcnBPcHRpb25zIiwiYW5pbWF0ZWQiLCJmb3JtYXR0ZWRDcm9wRGF0YSIsImhlaWdodCIsIk51bWJlciIsImxlZnQiLCJ3aWR0aCIsInRvcCIsImNyb3BwZWQiLCJzaGFycCIsInRlbXBGaWxlUGF0aCIsImRhdGEiLCJleHRyYWN0IiwidG9CdWZmZXIiLCJyZXNvbHZlV2l0aE9iamVjdCIsImVycm9yIiwiY29uc29sZSJdLCJyYW5nZU1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztJQVFBLE9BMEJDO2VBMUI2QkE7O0lBSmpCQyxjQUFjO2VBQWRBOzs7OERBRks7Ozs7OztBQUVYLE1BQU1BLGlCQUFpQixDQUFDQyxPQUFlQztJQUM1QyxJQUFJLENBQUNELE9BQU8sT0FBTztJQUNuQixPQUFPRSxLQUFLQyxLQUFLLENBQUMsQUFBQ0MsV0FBV0osU0FBUyxNQUFPQztBQUNoRDtBQUNlLGVBQWVILFVBQVUsRUFBRU8sUUFBUSxFQUFFQyxVQUFVLEVBQUVDLElBQUksRUFBRTtJQUNwRSxJQUFJO1FBQ0YsTUFBTUMscUJBQXFCO1lBQUM7WUFBYztZQUFhO1NBQWEsQ0FBQ0MsUUFBUSxDQUFDRixLQUFLRyxRQUFRO1FBRTNGLE1BQU0sRUFBRUMsWUFBWSxFQUFFQyxXQUFXLEVBQUVDLENBQUMsRUFBRUMsQ0FBQyxFQUFFLEdBQUdUO1FBRTVDLE1BQU1VLGVBQTZCLENBQUM7UUFFcEMsSUFBSVAsb0JBQW9CTyxhQUFhQyxRQUFRLEdBQUc7UUFFaEQsTUFBTUMsb0JBQWtDO1lBQ3RDQyxRQUFRQyxPQUFPUjtZQUNmUyxNQUFNckIsZUFBZWMsR0FBR1AsV0FBV2UsS0FBSztZQUN4Q0MsS0FBS3ZCLGVBQWVlLEdBQUdSLFdBQVdZLE1BQU07WUFDeENHLE9BQU9GLE9BQU9QO1FBQ2hCO1FBRUEsTUFBTVcsVUFBVUMsSUFBQUEsY0FBSyxFQUFDakIsS0FBS2tCLFlBQVksSUFBSWxCLEtBQUttQixJQUFJLEVBQUVYLGNBQWNZLE9BQU8sQ0FBQ1Y7UUFFNUUsT0FBTyxNQUFNTSxRQUFRSyxRQUFRLENBQUM7WUFDNUJDLG1CQUFtQjtRQUNyQjtJQUNGLEVBQUUsT0FBT0MsT0FBTztRQUNkQyxRQUFRRCxLQUFLLENBQUMsQ0FBQyxxQkFBcUIsQ0FBQyxFQUFFQTtRQUN2QyxNQUFNQTtJQUNSO0FBQ0YifQ==