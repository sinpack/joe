"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
const _deepmerge = /*#__PURE__*/ _interop_require_default(require("deepmerge"));
const _isplainobject = require("is-plain-object");
const _accountLock = /*#__PURE__*/ _interop_require_default(require("../../auth/baseFields/accountLock"));
const _apiKey = /*#__PURE__*/ _interop_require_default(require("../../auth/baseFields/apiKey"));
const _auth = /*#__PURE__*/ _interop_require_default(require("../../auth/baseFields/auth"));
const _verification = /*#__PURE__*/ _interop_require_default(require("../../auth/baseFields/verification"));
const _TimestampsRequired = /*#__PURE__*/ _interop_require_default(require("../../errors/TimestampsRequired"));
const _sanitize = require("../../fields/config/sanitize");
const _types = require("../../fields/config/types");
const _mergeBaseFields = /*#__PURE__*/ _interop_require_default(require("../../fields/mergeBaseFields"));
const _extractTranslations = require("../../translations/extractTranslations");
const _getBaseFields = /*#__PURE__*/ _interop_require_default(require("../../uploads/getBaseFields"));
const _formatLabels = require("../../utilities/formatLabels");
const _baseFields = /*#__PURE__*/ _interop_require_default(require("../../versions/baseFields"));
const _defaults = require("./defaults");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const translations = (0, _extractTranslations.extractTranslations)([
    'general:createdAt',
    'general:updatedAt'
]);
const sanitizeCollection = (config, collection)=>{
    // /////////////////////////////////
    // Make copy of collection config
    // /////////////////////////////////
    const sanitized = (0, _deepmerge.default)(_defaults.defaults, collection, {
        isMergeableObject: _isplainobject.isPlainObject
    });
    if (sanitized.timestamps !== false) {
        // add default timestamps fields only as needed
        let hasUpdatedAt = null;
        let hasCreatedAt = null;
        sanitized.fields.some((field)=>{
            if ((0, _types.fieldAffectsData)(field)) {
                if (field.name === 'updatedAt') hasUpdatedAt = true;
                if (field.name === 'createdAt') hasCreatedAt = true;
            }
            return hasCreatedAt && hasUpdatedAt;
        });
        if (!hasUpdatedAt) {
            sanitized.fields.push({
                name: 'updatedAt',
                type: 'date',
                admin: {
                    disableBulkEdit: true,
                    hidden: true
                },
                label: translations['general:updatedAt']
            });
        }
        if (!hasCreatedAt) {
            sanitized.fields.push({
                name: 'createdAt',
                admin: {
                    disableBulkEdit: true,
                    hidden: true
                },
                // The default sort for list view is createdAt. Thus, enabling indexing by default, is a major performance improvement, especially for large or a large amount of collections.
                type: 'date',
                index: true,
                label: translations['general:createdAt']
            });
        }
    }
    sanitized.labels = sanitized.labels || (0, _formatLabels.formatLabels)(sanitized.slug);
    if (sanitized.versions) {
        if (sanitized.versions === true) sanitized.versions = {
            drafts: false
        };
        if (sanitized.timestamps === false) {
            throw new _TimestampsRequired.default(collection);
        }
        if (sanitized.versions.drafts) {
            if (sanitized.versions.drafts === true) {
                sanitized.versions.drafts = {
                    autosave: false,
                    validate: false
                };
            }
            if (sanitized.versions.drafts.autosave === true) {
                sanitized.versions.drafts.autosave = {
                    interval: 2000
                };
            }
            if (sanitized.versions.drafts.validate === undefined) {
                sanitized.versions.drafts.validate = false;
            }
            sanitized.fields = (0, _mergeBaseFields.default)(sanitized.fields, _baseFields.default);
        }
    }
    if (sanitized.upload) {
        if (sanitized.upload === true) sanitized.upload = {};
        sanitized.upload.staticDir = sanitized.upload.staticDir || sanitized.slug;
        sanitized.upload.staticURL = sanitized.upload.staticURL || `/${sanitized.slug}`;
        sanitized.admin.useAsTitle = sanitized.admin.useAsTitle && sanitized.admin.useAsTitle !== 'id' ? sanitized.admin.useAsTitle : 'filename';
        const uploadFields = (0, _getBaseFields.default)({
            collection: sanitized,
            config
        });
        sanitized.fields = (0, _mergeBaseFields.default)(sanitized.fields, uploadFields);
    }
    if (sanitized.auth) {
        sanitized.auth = (0, _deepmerge.default)(_defaults.authDefaults, typeof sanitized.auth === 'object' ? sanitized.auth : {}, {
            isMergeableObject: _isplainobject.isPlainObject
        });
        let authFields = [];
        if (sanitized.auth.useAPIKey) {
            authFields = authFields.concat(_apiKey.default);
        }
        if (!sanitized.auth.disableLocalStrategy) {
            authFields = authFields.concat(_auth.default);
            if (sanitized.auth.verify) {
                if (sanitized.auth.verify === true) sanitized.auth.verify = {};
                authFields = authFields.concat(_verification.default);
            }
            if (sanitized.auth.maxLoginAttempts > 0) {
                authFields = authFields.concat(_accountLock.default);
            }
        }
        sanitized.fields = (0, _mergeBaseFields.default)(sanitized.fields, authFields);
    }
    // /////////////////////////////////
    // Sanitize fields
    // /////////////////////////////////
    const validRelationships = config.collections.map((c)=>c.slug) || [];
    sanitized.fields = (0, _sanitize.sanitizeFields)({
        config,
        fields: sanitized.fields,
        validRelationships
    });
    return sanitized;
};
const _default = sanitizeCollection;

//# sourceMappingURL=data:application/json;base64,