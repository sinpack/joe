"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
const _errors = require("../../../errors");
const _getFileByPath = /*#__PURE__*/ _interop_require_default(require("../../../uploads/getFileByPath"));
const _createLocalReq = require("../../../utilities/createLocalReq");
const _update = /*#__PURE__*/ _interop_require_default(require("../update"));
const _updateByID = /*#__PURE__*/ _interop_require_default(require("../updateByID"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
async function updateLocal(payload, options) {
    const { id, autosave, collection: collectionSlug, data, depth, draft, file, filePath, overrideAccess = true, overwriteExistingFiles = false, showHiddenFields, where } = options;
    const collection = payload.collections[collectionSlug];
    if (!collection) {
        throw new _errors.APIError(`The collection with slug ${String(collectionSlug)} can't be found. Update Operation.`);
    }
    const req = (0, _createLocalReq.createLocalReq)(options, payload);
    const fileToSet = file ?? await (0, _getFileByPath.default)(filePath);
    if (fileToSet) {
        if (req?.files) {
            req.files.file = fileToSet;
        } else {
            req.files = {
                file: fileToSet
            };
        }
    }
    const args = {
        id,
        autosave,
        collection,
        data,
        depth,
        draft,
        overrideAccess,
        overwriteExistingFiles,
        payload,
        req,
        showHiddenFields,
        where
    };
    if (options.id) {
        return (0, _updateByID.default)(args);
    }
    return (0, _update.default)(args);
}
const _default = updateLocal;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb2xsZWN0aW9ucy9vcGVyYXRpb25zL2xvY2FsL3VwZGF0ZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IFVwbG9hZGVkRmlsZSB9IGZyb20gJ2V4cHJlc3MtZmlsZXVwbG9hZCdcbmltcG9ydCB0eXBlIHsgRGVlcFBhcnRpYWwgfSBmcm9tICd0cy1lc3NlbnRpYWxzJ1xuXG5pbXBvcnQgdHlwZSB7IEdlbmVyYXRlZFR5cGVzIH0gZnJvbSAnLi4vLi4vLi4vJ1xuaW1wb3J0IHR5cGUgeyBQYXlsb2FkUmVxdWVzdCwgUmVxdWVzdENvbnRleHQgfSBmcm9tICcuLi8uLi8uLi9leHByZXNzL3R5cGVzJ1xuaW1wb3J0IHR5cGUgeyBQYXlsb2FkIH0gZnJvbSAnLi4vLi4vLi4vcGF5bG9hZCdcbmltcG9ydCB0eXBlIHsgRG9jdW1lbnQsIFdoZXJlIH0gZnJvbSAnLi4vLi4vLi4vdHlwZXMnXG5pbXBvcnQgdHlwZSB7IEZpbGUgfSBmcm9tICcuLi8uLi8uLi91cGxvYWRzL3R5cGVzJ1xuaW1wb3J0IHR5cGUgeyBCdWxrT3BlcmF0aW9uUmVzdWx0IH0gZnJvbSAnLi4vLi4vY29uZmlnL3R5cGVzJ1xuXG5pbXBvcnQgeyBBUElFcnJvciB9IGZyb20gJy4uLy4uLy4uL2Vycm9ycydcbmltcG9ydCBnZXRGaWxlQnlQYXRoIGZyb20gJy4uLy4uLy4uL3VwbG9hZHMvZ2V0RmlsZUJ5UGF0aCdcbmltcG9ydCB7IGNyZWF0ZUxvY2FsUmVxIH0gZnJvbSAnLi4vLi4vLi4vdXRpbGl0aWVzL2NyZWF0ZUxvY2FsUmVxJ1xuaW1wb3J0IHVwZGF0ZSBmcm9tICcuLi91cGRhdGUnXG5pbXBvcnQgdXBkYXRlQnlJRCBmcm9tICcuLi91cGRhdGVCeUlEJ1xuXG5leHBvcnQgdHlwZSBCYXNlT3B0aW9uczxUU2x1ZyBleHRlbmRzIGtleW9mIEdlbmVyYXRlZFR5cGVzWydjb2xsZWN0aW9ucyddPiA9IHtcbiAgYXV0b3NhdmU/OiBib29sZWFuXG4gIGNvbGxlY3Rpb246IFRTbHVnXG4gIC8qKlxuICAgKiBjb250ZXh0LCB3aGljaCB3aWxsIHRoZW4gYmUgcGFzc2VkIHRvIHJlcS5jb250ZXh0LCB3aGljaCBjYW4gYmUgcmVhZCBieSBob29rc1xuICAgKi9cbiAgY29udGV4dD86IFJlcXVlc3RDb250ZXh0XG4gIGRhdGE6IERlZXBQYXJ0aWFsPEdlbmVyYXRlZFR5cGVzWydjb2xsZWN0aW9ucyddW1RTbHVnXT5cbiAgZGVwdGg/OiBudW1iZXJcbiAgZHJhZnQ/OiBib29sZWFuXG4gIGZhbGxiYWNrTG9jYWxlPzogc3RyaW5nXG4gIGZpbGU/OiBGaWxlXG4gIGZpbGVQYXRoPzogc3RyaW5nXG4gIGxvY2FsZT86IHN0cmluZ1xuICBvdmVycmlkZUFjY2Vzcz86IGJvb2xlYW5cbiAgb3ZlcndyaXRlRXhpc3RpbmdGaWxlcz86IGJvb2xlYW5cbiAgcmVxPzogUGF5bG9hZFJlcXVlc3RcbiAgc2hvd0hpZGRlbkZpZWxkcz86IGJvb2xlYW5cbiAgdXNlcj86IERvY3VtZW50XG59XG5cbmV4cG9ydCB0eXBlIEJ5SURPcHRpb25zPFRTbHVnIGV4dGVuZHMga2V5b2YgR2VuZXJhdGVkVHlwZXNbJ2NvbGxlY3Rpb25zJ10+ID0gQmFzZU9wdGlvbnM8VFNsdWc+ICYge1xuICBpZDogbnVtYmVyIHwgc3RyaW5nXG4gIHdoZXJlPzogbmV2ZXJcbn1cblxuZXhwb3J0IHR5cGUgTWFueU9wdGlvbnM8VFNsdWcgZXh0ZW5kcyBrZXlvZiBHZW5lcmF0ZWRUeXBlc1snY29sbGVjdGlvbnMnXT4gPSBCYXNlT3B0aW9uczxUU2x1Zz4gJiB7XG4gIGlkPzogbmV2ZXJcbiAgd2hlcmU6IFdoZXJlXG59XG5cbmV4cG9ydCB0eXBlIE9wdGlvbnM8VFNsdWcgZXh0ZW5kcyBrZXlvZiBHZW5lcmF0ZWRUeXBlc1snY29sbGVjdGlvbnMnXT4gPVxuICB8IEJ5SURPcHRpb25zPFRTbHVnPlxuICB8IE1hbnlPcHRpb25zPFRTbHVnPlxuXG5hc3luYyBmdW5jdGlvbiB1cGRhdGVMb2NhbDxUU2x1ZyBleHRlbmRzIGtleW9mIEdlbmVyYXRlZFR5cGVzWydjb2xsZWN0aW9ucyddPihcbiAgcGF5bG9hZDogUGF5bG9hZCxcbiAgb3B0aW9uczogQnlJRE9wdGlvbnM8VFNsdWc+LFxuKTogUHJvbWlzZTxHZW5lcmF0ZWRUeXBlc1snY29sbGVjdGlvbnMnXVtUU2x1Z10+XG5hc3luYyBmdW5jdGlvbiB1cGRhdGVMb2NhbDxUU2x1ZyBleHRlbmRzIGtleW9mIEdlbmVyYXRlZFR5cGVzWydjb2xsZWN0aW9ucyddPihcbiAgcGF5bG9hZDogUGF5bG9hZCxcbiAgb3B0aW9uczogTWFueU9wdGlvbnM8VFNsdWc+LFxuKTogUHJvbWlzZTxCdWxrT3BlcmF0aW9uUmVzdWx0PFRTbHVnPj5cbmFzeW5jIGZ1bmN0aW9uIHVwZGF0ZUxvY2FsPFRTbHVnIGV4dGVuZHMga2V5b2YgR2VuZXJhdGVkVHlwZXNbJ2NvbGxlY3Rpb25zJ10+KFxuICBwYXlsb2FkOiBQYXlsb2FkLFxuICBvcHRpb25zOiBPcHRpb25zPFRTbHVnPixcbik6IFByb21pc2U8QnVsa09wZXJhdGlvblJlc3VsdDxUU2x1Zz4gfCBHZW5lcmF0ZWRUeXBlc1snY29sbGVjdGlvbnMnXVtUU2x1Z10+XG5hc3luYyBmdW5jdGlvbiB1cGRhdGVMb2NhbDxUU2x1ZyBleHRlbmRzIGtleW9mIEdlbmVyYXRlZFR5cGVzWydjb2xsZWN0aW9ucyddPihcbiAgcGF5bG9hZDogUGF5bG9hZCxcbiAgb3B0aW9uczogT3B0aW9uczxUU2x1Zz4sXG4pOiBQcm9taXNlPEJ1bGtPcGVyYXRpb25SZXN1bHQ8VFNsdWc+IHwgR2VuZXJhdGVkVHlwZXNbJ2NvbGxlY3Rpb25zJ11bVFNsdWddPiB7XG4gIGNvbnN0IHtcbiAgICBpZCxcbiAgICBhdXRvc2F2ZSxcbiAgICBjb2xsZWN0aW9uOiBjb2xsZWN0aW9uU2x1ZyxcbiAgICBkYXRhLFxuICAgIGRlcHRoLFxuICAgIGRyYWZ0LFxuICAgIGZpbGUsXG4gICAgZmlsZVBhdGgsXG4gICAgb3ZlcnJpZGVBY2Nlc3MgPSB0cnVlLFxuICAgIG92ZXJ3cml0ZUV4aXN0aW5nRmlsZXMgPSBmYWxzZSxcbiAgICBzaG93SGlkZGVuRmllbGRzLFxuICAgIHdoZXJlLFxuICB9ID0gb3B0aW9uc1xuXG4gIGNvbnN0IGNvbGxlY3Rpb24gPSBwYXlsb2FkLmNvbGxlY3Rpb25zW2NvbGxlY3Rpb25TbHVnXVxuXG4gIGlmICghY29sbGVjdGlvbikge1xuICAgIHRocm93IG5ldyBBUElFcnJvcihcbiAgICAgIGBUaGUgY29sbGVjdGlvbiB3aXRoIHNsdWcgJHtTdHJpbmcoY29sbGVjdGlvblNsdWcpfSBjYW4ndCBiZSBmb3VuZC4gVXBkYXRlIE9wZXJhdGlvbi5gLFxuICAgIClcbiAgfVxuXG4gIGNvbnN0IHJlcSA9IGNyZWF0ZUxvY2FsUmVxKG9wdGlvbnMsIHBheWxvYWQpXG4gIGNvbnN0IGZpbGVUb1NldCA9IChmaWxlID8/IChhd2FpdCBnZXRGaWxlQnlQYXRoKGZpbGVQYXRoKSkpIGFzIFVwbG9hZGVkRmlsZVxuICBpZiAoZmlsZVRvU2V0KSB7XG4gICAgaWYgKHJlcT8uZmlsZXMpIHtcbiAgICAgIHJlcS5maWxlcy5maWxlID0gZmlsZVRvU2V0XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlcS5maWxlcyA9IHtcbiAgICAgICAgZmlsZTogZmlsZVRvU2V0LFxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGNvbnN0IGFyZ3MgPSB7XG4gICAgaWQsXG4gICAgYXV0b3NhdmUsXG4gICAgY29sbGVjdGlvbixcbiAgICBkYXRhLFxuICAgIGRlcHRoLFxuICAgIGRyYWZ0LFxuICAgIG92ZXJyaWRlQWNjZXNzLFxuICAgIG92ZXJ3cml0ZUV4aXN0aW5nRmlsZXMsXG4gICAgcGF5bG9hZCxcbiAgICByZXEsXG4gICAgc2hvd0hpZGRlbkZpZWxkcyxcbiAgICB3aGVyZSxcbiAgfVxuXG4gIGlmIChvcHRpb25zLmlkKSB7XG4gICAgcmV0dXJuIHVwZGF0ZUJ5SUQ8VFNsdWc+KGFyZ3MpXG4gIH1cbiAgcmV0dXJuIHVwZGF0ZTxUU2x1Zz4oYXJncylcbn1cblxuZXhwb3J0IGRlZmF1bHQgdXBkYXRlTG9jYWxcbiJdLCJuYW1lcyI6WyJ1cGRhdGVMb2NhbCIsInBheWxvYWQiLCJvcHRpb25zIiwiaWQiLCJhdXRvc2F2ZSIsImNvbGxlY3Rpb24iLCJjb2xsZWN0aW9uU2x1ZyIsImRhdGEiLCJkZXB0aCIsImRyYWZ0IiwiZmlsZSIsImZpbGVQYXRoIiwib3ZlcnJpZGVBY2Nlc3MiLCJvdmVyd3JpdGVFeGlzdGluZ0ZpbGVzIiwic2hvd0hpZGRlbkZpZWxkcyIsIndoZXJlIiwiY29sbGVjdGlvbnMiLCJBUElFcnJvciIsIlN0cmluZyIsInJlcSIsImNyZWF0ZUxvY2FsUmVxIiwiZmlsZVRvU2V0IiwiZ2V0RmlsZUJ5UGF0aCIsImZpbGVzIiwiYXJncyIsInVwZGF0ZUJ5SUQiLCJ1cGRhdGUiXSwicmFuZ2VNYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7IiwibWFwcGluZ3MiOiI7Ozs7K0JBMkhBOzs7ZUFBQTs7O3dCQWpIeUI7c0VBQ0M7Z0NBQ0s7K0RBQ1o7bUVBQ0k7Ozs7OztBQWlEdkIsZUFBZUEsWUFDYkMsT0FBZ0IsRUFDaEJDLE9BQXVCO0lBRXZCLE1BQU0sRUFDSkMsRUFBRSxFQUNGQyxRQUFRLEVBQ1JDLFlBQVlDLGNBQWMsRUFDMUJDLElBQUksRUFDSkMsS0FBSyxFQUNMQyxLQUFLLEVBQ0xDLElBQUksRUFDSkMsUUFBUSxFQUNSQyxpQkFBaUIsSUFBSSxFQUNyQkMseUJBQXlCLEtBQUssRUFDOUJDLGdCQUFnQixFQUNoQkMsS0FBSyxFQUNOLEdBQUdiO0lBRUosTUFBTUcsYUFBYUosUUFBUWUsV0FBVyxDQUFDVixlQUFlO0lBRXRELElBQUksQ0FBQ0QsWUFBWTtRQUNmLE1BQU0sSUFBSVksZ0JBQVEsQ0FDaEIsQ0FBQyx5QkFBeUIsRUFBRUMsT0FBT1osZ0JBQWdCLGtDQUFrQyxDQUFDO0lBRTFGO0lBRUEsTUFBTWEsTUFBTUMsSUFBQUEsOEJBQWMsRUFBQ2xCLFNBQVNEO0lBQ3BDLE1BQU1vQixZQUFhWCxRQUFTLE1BQU1ZLElBQUFBLHNCQUFhLEVBQUNYO0lBQ2hELElBQUlVLFdBQVc7UUFDYixJQUFJRixLQUFLSSxPQUFPO1lBQ2RKLElBQUlJLEtBQUssQ0FBQ2IsSUFBSSxHQUFHVztRQUNuQixPQUFPO1lBQ0xGLElBQUlJLEtBQUssR0FBRztnQkFDVmIsTUFBTVc7WUFDUjtRQUNGO0lBQ0Y7SUFFQSxNQUFNRyxPQUFPO1FBQ1hyQjtRQUNBQztRQUNBQztRQUNBRTtRQUNBQztRQUNBQztRQUNBRztRQUNBQztRQUNBWjtRQUNBa0I7UUFDQUw7UUFDQUM7SUFDRjtJQUVBLElBQUliLFFBQVFDLEVBQUUsRUFBRTtRQUNkLE9BQU9zQixJQUFBQSxtQkFBVSxFQUFRRDtJQUMzQjtJQUNBLE9BQU9FLElBQUFBLGVBQU0sRUFBUUY7QUFDdkI7TUFFQSxXQUFleEIifQ==