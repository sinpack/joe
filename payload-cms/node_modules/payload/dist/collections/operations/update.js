"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
const _httpstatus = /*#__PURE__*/ _interop_require_default(require("http-status"));
const _executeAccess = /*#__PURE__*/ _interop_require_default(require("../../auth/executeAccess"));
const _combineQueries = require("../../database/combineQueries");
const _validateQueryPaths = require("../../database/queryValidation/validateQueryPaths");
const _errors = require("../../errors");
const _afterChange = require("../../fields/hooks/afterChange");
const _afterRead = require("../../fields/hooks/afterRead");
const _beforeChange = require("../../fields/hooks/beforeChange");
const _beforeValidate = require("../../fields/hooks/beforeValidate");
const _deleteAssociatedFiles = require("../../uploads/deleteAssociatedFiles");
const _generateFileData = require("../../uploads/generateFileData");
const _unlinkTempFiles = require("../../uploads/unlinkTempFiles");
const _uploadFiles = require("../../uploads/uploadFiles");
const _commitTransaction = require("../../utilities/commitTransaction");
const _initTransaction = require("../../utilities/initTransaction");
const _killTransaction = require("../../utilities/killTransaction");
const _buildCollectionFields = require("../../versions/buildCollectionFields");
const _appendVersionToQueryKey = require("../../versions/drafts/appendVersionToQueryKey");
const _saveVersion = require("../../versions/saveVersion");
const _utils = require("./utils");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
async function update(incomingArgs) {
    let args = incomingArgs;
    try {
        const shouldCommit = await (0, _initTransaction.initTransaction)(args.req);
        // /////////////////////////////////////
        // beforeOperation - Collection
        // /////////////////////////////////////
        await args.collection.config.hooks.beforeOperation.reduce(async (priorHook, hook)=>{
            await priorHook;
            args = await hook({
                args,
                collection: args.collection.config,
                context: args.req.context,
                operation: 'update',
                req: args.req
            }) || args;
        }, Promise.resolve());
        const { collection: { config: collectionConfig }, collection, depth, draft: draftArg = false, overrideAccess, overwriteExistingFiles = false, req: { fallbackLocale, locale, payload: { config }, payload, t }, req, showHiddenFields, where } = args;
        if (!where) {
            throw new _errors.APIError("Missing 'where' query of documents to update.", _httpstatus.default.BAD_REQUEST);
        }
        const { data: bulkUpdateData } = args;
        const shouldSaveDraft = Boolean(draftArg && collectionConfig.versions.drafts);
        // /////////////////////////////////////
        // Access
        // /////////////////////////////////////
        let accessResult;
        if (!overrideAccess) {
            accessResult = await (0, _executeAccess.default)({
                req
            }, collectionConfig.access.update);
        }
        await (0, _validateQueryPaths.validateQueryPaths)({
            collectionConfig,
            overrideAccess,
            req,
            where
        });
        // /////////////////////////////////////
        // Retrieve documents
        // /////////////////////////////////////
        const fullWhere = (0, _combineQueries.combineQueries)(where, accessResult);
        let docs;
        if (collectionConfig.versions?.drafts && shouldSaveDraft) {
            const versionsWhere = (0, _appendVersionToQueryKey.appendVersionToQueryKey)(fullWhere);
            await (0, _validateQueryPaths.validateQueryPaths)({
                collectionConfig: collection.config,
                overrideAccess,
                req,
                versionFields: (0, _buildCollectionFields.buildVersionCollectionFields)(collection.config),
                where: versionsWhere
            });
            const query = await payload.db.queryDrafts({
                collection: collectionConfig.slug,
                locale,
                req,
                where: versionsWhere
            });
            docs = query.docs;
        } else {
            const query = await payload.db.find({
                collection: collectionConfig.slug,
                limit: 0,
                locale,
                pagination: false,
                req,
                where: fullWhere
            });
            docs = query.docs;
        }
        // /////////////////////////////////////
        // Generate data for all files and sizes
        // /////////////////////////////////////
        const { data: newFileData, files: filesToUpload } = await (0, _generateFileData.generateFileData)({
            collection,
            config,
            data: bulkUpdateData,
            operation: 'update',
            overwriteExistingFiles,
            req,
            throwOnMissingFile: false
        });
        const errors = [];
        const promises = docs.map(async (doc)=>{
            const { id } = doc;
            let data = {
                ...newFileData,
                ...bulkUpdateData
            };
            try {
                const originalDoc = await (0, _afterRead.afterRead)({
                    collection: collectionConfig,
                    context: req.context,
                    depth: 0,
                    doc,
                    draft: draftArg,
                    fallbackLocale,
                    global: null,
                    locale,
                    overrideAccess: true,
                    req,
                    showHiddenFields: true
                });
                await (0, _deleteAssociatedFiles.deleteAssociatedFiles)({
                    collectionConfig,
                    config,
                    doc,
                    files: filesToUpload,
                    overrideDelete: false,
                    t
                });
                // /////////////////////////////////////
                // beforeValidate - Fields
                // /////////////////////////////////////
                data = await (0, _beforeValidate.beforeValidate)({
                    id,
                    collection: collectionConfig,
                    context: req.context,
                    data,
                    doc: originalDoc,
                    global: null,
                    operation: 'update',
                    overrideAccess,
                    req
                });
                // /////////////////////////////////////
                // beforeValidate - Collection
                // /////////////////////////////////////
                await collectionConfig.hooks.beforeValidate.reduce(async (priorHook, hook)=>{
                    await priorHook;
                    data = await hook({
                        collection: collectionConfig,
                        context: req.context,
                        data,
                        operation: 'update',
                        originalDoc,
                        req
                    }) || data;
                }, Promise.resolve());
                // /////////////////////////////////////
                // Write files to local storage
                // /////////////////////////////////////
                if (!collectionConfig.upload.disableLocalStorage) {
                    await (0, _uploadFiles.uploadFiles)(payload, filesToUpload, t);
                }
                // /////////////////////////////////////
                // beforeChange - Collection
                // /////////////////////////////////////
                await collectionConfig.hooks.beforeChange.reduce(async (priorHook, hook)=>{
                    await priorHook;
                    data = await hook({
                        collection: collectionConfig,
                        context: req.context,
                        data,
                        operation: 'update',
                        originalDoc,
                        req
                    }) || data;
                }, Promise.resolve());
                // /////////////////////////////////////
                // beforeChange - Fields
                // /////////////////////////////////////
                let result = await (0, _beforeChange.beforeChange)({
                    id,
                    collection: collectionConfig,
                    context: req.context,
                    data,
                    doc: originalDoc,
                    docWithLocales: doc,
                    global: null,
                    operation: 'update',
                    req,
                    skipValidation: shouldSaveDraft && collectionConfig.versions.drafts && !collectionConfig.versions.drafts.validate && data._status !== 'published'
                });
                // /////////////////////////////////////
                // Update
                // /////////////////////////////////////
                if (!shouldSaveDraft || data._status === 'published') {
                    result = await req.payload.db.updateOne({
                        id,
                        collection: collectionConfig.slug,
                        data: result,
                        locale,
                        req
                    });
                }
                // /////////////////////////////////////
                // Create version
                // /////////////////////////////////////
                if (collectionConfig.versions) {
                    result = await (0, _saveVersion.saveVersion)({
                        id,
                        collection: collectionConfig,
                        docWithLocales: {
                            ...result,
                            createdAt: doc.createdAt
                        },
                        payload,
                        req
                    });
                }
                // /////////////////////////////////////
                // afterRead - Fields
                // /////////////////////////////////////
                result = await (0, _afterRead.afterRead)({
                    collection: collectionConfig,
                    context: req.context,
                    depth,
                    doc: result,
                    draft: draftArg,
                    fallbackLocale: null,
                    global: null,
                    locale,
                    overrideAccess,
                    req,
                    showHiddenFields
                });
                // /////////////////////////////////////
                // afterRead - Collection
                // /////////////////////////////////////
                await collectionConfig.hooks.afterRead.reduce(async (priorHook, hook)=>{
                    await priorHook;
                    result = await hook({
                        collection: collectionConfig,
                        context: req.context,
                        doc: result,
                        req
                    }) || result;
                }, Promise.resolve());
                // /////////////////////////////////////
                // afterChange - Fields
                // /////////////////////////////////////
                result = await (0, _afterChange.afterChange)({
                    collection: collectionConfig,
                    context: req.context,
                    data,
                    doc: result,
                    global: null,
                    operation: 'update',
                    previousDoc: originalDoc,
                    req
                });
                // /////////////////////////////////////
                // afterChange - Collection
                // /////////////////////////////////////
                await collectionConfig.hooks.afterChange.reduce(async (priorHook, hook)=>{
                    await priorHook;
                    result = await hook({
                        collection: collectionConfig,
                        context: req.context,
                        doc: result,
                        operation: 'update',
                        previousDoc: originalDoc,
                        req
                    }) || result;
                }, Promise.resolve());
                await (0, _unlinkTempFiles.unlinkTempFiles)({
                    collectionConfig,
                    config,
                    req
                });
                // /////////////////////////////////////
                // Return results
                // /////////////////////////////////////
                return result;
            } catch (error) {
                errors.push({
                    id,
                    message: error.message
                });
            }
            return null;
        });
        const awaitedDocs = await Promise.all(promises);
        let result = {
            docs: awaitedDocs.filter(Boolean),
            errors
        };
        // /////////////////////////////////////
        // afterOperation - Collection
        // /////////////////////////////////////
        result = await (0, _utils.buildAfterOperation)({
            args,
            collection: collectionConfig,
            operation: 'update',
            result
        });
        if (shouldCommit) await (0, _commitTransaction.commitTransaction)(req);
        return result;
    } catch (error) {
        await (0, _killTransaction.killTransaction)(args.req);
        throw error;
    }
}
const _default = update;

//# sourceMappingURL=data:application/json;base64,