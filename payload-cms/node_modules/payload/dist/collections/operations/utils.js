"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "buildAfterOperation", {
    enumerable: true,
    get: function() {
        return buildAfterOperation;
    }
});
const buildAfterOperation = async (operationArgs)=>{
    const { args, collection, operation, result } = operationArgs;
    let newResult = result;
    await args.collection.config.hooks.afterOperation.reduce(async (priorHook, hook)=>{
        await priorHook;
        const hookResult = await hook({
            args,
            collection,
            operation,
            req: args.req,
            result: newResult
        });
        if (hookResult !== undefined) {
            newResult = hookResult;
        }
    }, Promise.resolve());
    return newResult;
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb2xsZWN0aW9ucy9vcGVyYXRpb25zL3V0aWxzLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIGZvcmdvdFBhc3N3b3JkIGZyb20gJy4uLy4uL2F1dGgvb3BlcmF0aW9ucy9mb3Jnb3RQYXNzd29yZCdcbmltcG9ydCB0eXBlIGxvZ2luIGZyb20gJy4uLy4uL2F1dGgvb3BlcmF0aW9ucy9sb2dpbidcbmltcG9ydCB0eXBlIHJlZnJlc2ggZnJvbSAnLi4vLi4vYXV0aC9vcGVyYXRpb25zL3JlZnJlc2gnXG5pbXBvcnQgdHlwZSB7IFBheWxvYWRSZXF1ZXN0IH0gZnJvbSAnLi4vLi4vZXhwcmVzcy90eXBlcydcbmltcG9ydCB0eXBlIHsgQWZ0ZXJPcGVyYXRpb25Ib29rLCBTYW5pdGl6ZWRDb2xsZWN0aW9uQ29uZmlnLCBUeXBlV2l0aElEIH0gZnJvbSAnLi4vY29uZmlnL3R5cGVzJ1xuaW1wb3J0IHR5cGUgY291bnRPcGVyYXRpb24gZnJvbSAnLi9jb3VudCdcbmltcG9ydCB0eXBlIGNyZWF0ZSBmcm9tICcuL2NyZWF0ZSdcbmltcG9ydCB0eXBlIGRlbGV0ZU9wZXJhdGlvbiBmcm9tICcuL2RlbGV0ZSdcbmltcG9ydCB0eXBlIGRlbGV0ZUJ5SUQgZnJvbSAnLi9kZWxldGVCeUlEJ1xuaW1wb3J0IHR5cGUgZmluZCBmcm9tICcuL2ZpbmQnXG5pbXBvcnQgdHlwZSBmaW5kQnlJRCBmcm9tICcuL2ZpbmRCeUlEJ1xuaW1wb3J0IHR5cGUgdXBkYXRlIGZyb20gJy4vdXBkYXRlJ1xuaW1wb3J0IHR5cGUgdXBkYXRlQnlJRCBmcm9tICcuL3VwZGF0ZUJ5SUQnXG5cbmV4cG9ydCB0eXBlIEFmdGVyT3BlcmF0aW9uTWFwPFQgZXh0ZW5kcyBUeXBlV2l0aElEPiA9IHtcbiAgY291bnQ6IHR5cGVvZiBjb3VudE9wZXJhdGlvblxuICBjcmVhdGU6IHR5cGVvZiBjcmVhdGUgLy8gdG9kbzogcGFzcyBjb3JyZWN0IGdlbmVyaWNcbiAgZGVsZXRlOiB0eXBlb2YgZGVsZXRlT3BlcmF0aW9uIC8vIHRvZG86IHBhc3MgY29ycmVjdCBnZW5lcmljXG4gIGRlbGV0ZUJ5SUQ6IHR5cGVvZiBkZWxldGVCeUlEIC8vIHRvZG86IHBhc3MgY29ycmVjdCBnZW5lcmljXG4gIGZpbmQ6IHR5cGVvZiBmaW5kPFQ+XG4gIGZpbmRCeUlEOiB0eXBlb2YgZmluZEJ5SUQ8VD5cbiAgZm9yZ290UGFzc3dvcmQ6IHR5cGVvZiBmb3Jnb3RQYXNzd29yZFxuICBsb2dpbjogdHlwZW9mIGxvZ2luXG4gIHJlZnJlc2g6IHR5cGVvZiByZWZyZXNoXG4gIHVwZGF0ZTogdHlwZW9mIHVwZGF0ZSAvLyB0b2RvOiBwYXNzIGNvcnJlY3QgZ2VuZXJpY1xuICB1cGRhdGVCeUlEOiB0eXBlb2YgdXBkYXRlQnlJRCAvLyB0b2RvOiBwYXNzIGNvcnJlY3QgZ2VuZXJpY1xufVxuZXhwb3J0IHR5cGUgQWZ0ZXJPcGVyYXRpb25Bcmc8VCBleHRlbmRzIFR5cGVXaXRoSUQ+ID0ge1xuICAvKiogVGhlIGNvbGxlY3Rpb24gd2hpY2ggdGhpcyBob29rIGlzIGJlaW5nIHJ1biBvbiAqL1xuICBjb2xsZWN0aW9uOiBTYW5pdGl6ZWRDb2xsZWN0aW9uQ29uZmlnXG4gIHJlcTogUGF5bG9hZFJlcXVlc3Rcbn0gJiAoXG4gIHwge1xuICAgICAgYXJnczogUGFyYW1ldGVyczxBZnRlck9wZXJhdGlvbk1hcDxUPlsnY291bnQnXT5bMF1cbiAgICAgIG9wZXJhdGlvbjogJ2NvdW50J1xuICAgICAgcmVzdWx0OiBBd2FpdGVkPFJldHVyblR5cGU8QWZ0ZXJPcGVyYXRpb25NYXA8VD5bJ2NvdW50J10+PlxuICAgIH1cbiAgfCB7XG4gICAgICBhcmdzOiBQYXJhbWV0ZXJzPEFmdGVyT3BlcmF0aW9uTWFwPFQ+WydjcmVhdGUnXT5bMF1cbiAgICAgIG9wZXJhdGlvbjogJ2NyZWF0ZSdcbiAgICAgIHJlc3VsdDogQXdhaXRlZDxSZXR1cm5UeXBlPEFmdGVyT3BlcmF0aW9uTWFwPFQ+WydjcmVhdGUnXT4+XG4gICAgfVxuICB8IHtcbiAgICAgIGFyZ3M6IFBhcmFtZXRlcnM8QWZ0ZXJPcGVyYXRpb25NYXA8VD5bJ2RlbGV0ZSddPlswXVxuICAgICAgb3BlcmF0aW9uOiAnZGVsZXRlJ1xuICAgICAgcmVzdWx0OiBBd2FpdGVkPFJldHVyblR5cGU8QWZ0ZXJPcGVyYXRpb25NYXA8VD5bJ2RlbGV0ZSddPj5cbiAgICB9XG4gIHwge1xuICAgICAgYXJnczogUGFyYW1ldGVyczxBZnRlck9wZXJhdGlvbk1hcDxUPlsnZGVsZXRlQnlJRCddPlswXVxuICAgICAgb3BlcmF0aW9uOiAnZGVsZXRlQnlJRCdcbiAgICAgIHJlc3VsdDogQXdhaXRlZDxSZXR1cm5UeXBlPEFmdGVyT3BlcmF0aW9uTWFwPFQ+WydkZWxldGVCeUlEJ10+PlxuICAgIH1cbiAgfCB7XG4gICAgICBhcmdzOiBQYXJhbWV0ZXJzPEFmdGVyT3BlcmF0aW9uTWFwPFQ+WydmaW5kJ10+WzBdXG4gICAgICBvcGVyYXRpb246ICdmaW5kJ1xuICAgICAgcmVzdWx0OiBBd2FpdGVkPFJldHVyblR5cGU8QWZ0ZXJPcGVyYXRpb25NYXA8VD5bJ2ZpbmQnXT4+XG4gICAgfVxuICB8IHtcbiAgICAgIGFyZ3M6IFBhcmFtZXRlcnM8QWZ0ZXJPcGVyYXRpb25NYXA8VD5bJ2ZpbmRCeUlEJ10+WzBdXG4gICAgICBvcGVyYXRpb246ICdmaW5kQnlJRCdcbiAgICAgIHJlc3VsdDogQXdhaXRlZDxSZXR1cm5UeXBlPEFmdGVyT3BlcmF0aW9uTWFwPFQ+WydmaW5kQnlJRCddPj5cbiAgICB9XG4gIHwge1xuICAgICAgYXJnczogUGFyYW1ldGVyczxBZnRlck9wZXJhdGlvbk1hcDxUPlsnZm9yZ290UGFzc3dvcmQnXT5bMF1cbiAgICAgIG9wZXJhdGlvbjogJ2ZvcmdvdFBhc3N3b3JkJ1xuICAgICAgcmVzdWx0OiBBd2FpdGVkPFJldHVyblR5cGU8QWZ0ZXJPcGVyYXRpb25NYXA8VD5bJ2ZvcmdvdFBhc3N3b3JkJ10+PlxuICAgIH1cbiAgfCB7XG4gICAgICBhcmdzOiBQYXJhbWV0ZXJzPEFmdGVyT3BlcmF0aW9uTWFwPFQ+Wydsb2dpbiddPlswXVxuICAgICAgb3BlcmF0aW9uOiAnbG9naW4nXG4gICAgICByZXN1bHQ6IEF3YWl0ZWQ8UmV0dXJuVHlwZTxBZnRlck9wZXJhdGlvbk1hcDxUPlsnbG9naW4nXT4+XG4gICAgfVxuICB8IHtcbiAgICAgIGFyZ3M6IFBhcmFtZXRlcnM8QWZ0ZXJPcGVyYXRpb25NYXA8VD5bJ3JlZnJlc2gnXT5bMF1cbiAgICAgIG9wZXJhdGlvbjogJ3JlZnJlc2gnXG4gICAgICByZXN1bHQ6IEF3YWl0ZWQ8UmV0dXJuVHlwZTxBZnRlck9wZXJhdGlvbk1hcDxUPlsncmVmcmVzaCddPj5cbiAgICB9XG4gIHwge1xuICAgICAgYXJnczogUGFyYW1ldGVyczxBZnRlck9wZXJhdGlvbk1hcDxUPlsndXBkYXRlJ10+WzBdXG4gICAgICBvcGVyYXRpb246ICd1cGRhdGUnXG4gICAgICByZXN1bHQ6IEF3YWl0ZWQ8UmV0dXJuVHlwZTxBZnRlck9wZXJhdGlvbk1hcDxUPlsndXBkYXRlJ10+PlxuICAgIH1cbiAgfCB7XG4gICAgICBhcmdzOiBQYXJhbWV0ZXJzPEFmdGVyT3BlcmF0aW9uTWFwPFQ+Wyd1cGRhdGVCeUlEJ10+WzBdXG4gICAgICBvcGVyYXRpb246ICd1cGRhdGVCeUlEJ1xuICAgICAgcmVzdWx0OiBBd2FpdGVkPFJldHVyblR5cGU8QWZ0ZXJPcGVyYXRpb25NYXA8VD5bJ3VwZGF0ZUJ5SUQnXT4+XG4gICAgfVxuKVxuXG4vLyBleHBvcnQgdHlwZSBBZnRlck9wZXJhdGlvbkhvb2sgPSB0eXBlb2YgYnVpbGRBZnRlck9wZXJhdGlvbjtcblxuZXhwb3J0IGNvbnN0IGJ1aWxkQWZ0ZXJPcGVyYXRpb24gPSBhc3luYyA8XG4gIFQgZXh0ZW5kcyBUeXBlV2l0aElEID0gYW55LFxuICBPIGV4dGVuZHMga2V5b2YgQWZ0ZXJPcGVyYXRpb25NYXA8VD4gPSBrZXlvZiBBZnRlck9wZXJhdGlvbk1hcDxUPixcbj4oXG4gIG9wZXJhdGlvbkFyZ3M6IE9taXQ8QWZ0ZXJPcGVyYXRpb25Bcmc8VD4sICdyZXEnPiAmIHsgb3BlcmF0aW9uOiBPIH0sXG4pOiBQcm9taXNlPEF3YWl0ZWQ8UmV0dXJuVHlwZTxBZnRlck9wZXJhdGlvbk1hcDxUPltPXT4+PiA9PiB7XG4gIGNvbnN0IHsgYXJncywgY29sbGVjdGlvbiwgb3BlcmF0aW9uLCByZXN1bHQgfSA9IG9wZXJhdGlvbkFyZ3NcblxuICBsZXQgbmV3UmVzdWx0ID0gcmVzdWx0XG5cbiAgYXdhaXQgYXJncy5jb2xsZWN0aW9uLmNvbmZpZy5ob29rcy5hZnRlck9wZXJhdGlvbi5yZWR1Y2UoXG4gICAgYXN5bmMgKHByaW9ySG9vaywgaG9vazogQWZ0ZXJPcGVyYXRpb25Ib29rPFQ+KSA9PiB7XG4gICAgICBhd2FpdCBwcmlvckhvb2tcblxuICAgICAgY29uc3QgaG9va1Jlc3VsdCA9IGF3YWl0IGhvb2soe1xuICAgICAgICBhcmdzLFxuICAgICAgICBjb2xsZWN0aW9uLFxuICAgICAgICBvcGVyYXRpb24sXG4gICAgICAgIHJlcTogYXJncy5yZXEsXG4gICAgICAgIHJlc3VsdDogbmV3UmVzdWx0LFxuICAgICAgfSBhcyBBZnRlck9wZXJhdGlvbkFyZzxUPilcblxuICAgICAgaWYgKGhvb2tSZXN1bHQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBuZXdSZXN1bHQgPSBob29rUmVzdWx0XG4gICAgICB9XG4gICAgfSxcbiAgICBQcm9taXNlLnJlc29sdmUoKSxcbiAgKVxuXG4gIHJldHVybiBuZXdSZXN1bHRcbn1cbiJdLCJuYW1lcyI6WyJidWlsZEFmdGVyT3BlcmF0aW9uIiwib3BlcmF0aW9uQXJncyIsImFyZ3MiLCJjb2xsZWN0aW9uIiwib3BlcmF0aW9uIiwicmVzdWx0IiwibmV3UmVzdWx0IiwiY29uZmlnIiwiaG9va3MiLCJhZnRlck9wZXJhdGlvbiIsInJlZHVjZSIsInByaW9ySG9vayIsImhvb2siLCJob29rUmVzdWx0IiwicmVxIiwidW5kZWZpbmVkIiwiUHJvbWlzZSIsInJlc29sdmUiXSwicmFuZ2VNYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OyIsIm1hcHBpbmdzIjoiOzs7OytCQTJGYUE7OztlQUFBQTs7O0FBQU4sTUFBTUEsc0JBQXNCLE9BSWpDQztJQUVBLE1BQU0sRUFBRUMsSUFBSSxFQUFFQyxVQUFVLEVBQUVDLFNBQVMsRUFBRUMsTUFBTSxFQUFFLEdBQUdKO0lBRWhELElBQUlLLFlBQVlEO0lBRWhCLE1BQU1ILEtBQUtDLFVBQVUsQ0FBQ0ksTUFBTSxDQUFDQyxLQUFLLENBQUNDLGNBQWMsQ0FBQ0MsTUFBTSxDQUN0RCxPQUFPQyxXQUFXQztRQUNoQixNQUFNRDtRQUVOLE1BQU1FLGFBQWEsTUFBTUQsS0FBSztZQUM1QlY7WUFDQUM7WUFDQUM7WUFDQVUsS0FBS1osS0FBS1ksR0FBRztZQUNiVCxRQUFRQztRQUNWO1FBRUEsSUFBSU8sZUFBZUUsV0FBVztZQUM1QlQsWUFBWU87UUFDZDtJQUNGLEdBQ0FHLFFBQVFDLE9BQU87SUFHakIsT0FBT1g7QUFDVCJ9