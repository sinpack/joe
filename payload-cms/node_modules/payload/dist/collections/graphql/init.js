/* eslint-disable no-param-reassign */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
const _graphql = require("graphql");
const _forgotPassword = /*#__PURE__*/ _interop_require_default(require("../../auth/graphql/resolvers/forgotPassword"));
const _init = /*#__PURE__*/ _interop_require_default(require("../../auth/graphql/resolvers/init"));
const _login = /*#__PURE__*/ _interop_require_default(require("../../auth/graphql/resolvers/login"));
const _logout = /*#__PURE__*/ _interop_require_default(require("../../auth/graphql/resolvers/logout"));
const _me = /*#__PURE__*/ _interop_require_default(require("../../auth/graphql/resolvers/me"));
const _refresh = /*#__PURE__*/ _interop_require_default(require("../../auth/graphql/resolvers/refresh"));
const _resetPassword = /*#__PURE__*/ _interop_require_default(require("../../auth/graphql/resolvers/resetPassword"));
const _unlock = /*#__PURE__*/ _interop_require_default(require("../../auth/graphql/resolvers/unlock"));
const _verifyEmail = /*#__PURE__*/ _interop_require_default(require("../../auth/graphql/resolvers/verifyEmail"));
const _types = require("../../fields/config/types");
const _buildMutationInputType = /*#__PURE__*/ _interop_require_wildcard(require("../../graphql/schema/buildMutationInputType"));
const _buildObjectType = /*#__PURE__*/ _interop_require_default(require("../../graphql/schema/buildObjectType"));
const _buildPaginatedListType = /*#__PURE__*/ _interop_require_default(require("../../graphql/schema/buildPaginatedListType"));
const _buildPoliciesType = require("../../graphql/schema/buildPoliciesType");
const _buildWhereInputType = /*#__PURE__*/ _interop_require_default(require("../../graphql/schema/buildWhereInputType"));
const _formatName = /*#__PURE__*/ _interop_require_default(require("../../graphql/utilities/formatName"));
const _flattenTopLevelFields = /*#__PURE__*/ _interop_require_default(require("../../utilities/flattenTopLevelFields"));
const _formatLabels = require("../../utilities/formatLabels");
const _buildCollectionFields = require("../../versions/buildCollectionFields");
const _count = /*#__PURE__*/ _interop_require_default(require("./resolvers/count"));
const _create = /*#__PURE__*/ _interop_require_default(require("./resolvers/create"));
const _delete = /*#__PURE__*/ _interop_require_default(require("./resolvers/delete"));
const _docAccess = require("./resolvers/docAccess");
const _find = /*#__PURE__*/ _interop_require_default(require("./resolvers/find"));
const _findByID = /*#__PURE__*/ _interop_require_default(require("./resolvers/findByID"));
const _findVersionByID = /*#__PURE__*/ _interop_require_default(require("./resolvers/findVersionByID"));
const _findVersions = /*#__PURE__*/ _interop_require_default(require("./resolvers/findVersions"));
const _restoreVersion = /*#__PURE__*/ _interop_require_default(require("./resolvers/restoreVersion"));
const _update = /*#__PURE__*/ _interop_require_default(require("./resolvers/update"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
function initCollectionsGraphQL(payload) {
    Object.keys(payload.collections).forEach((slug)=>{
        const collection = payload.collections[slug];
        const { config, config: { fields, graphQL = {}, versions } } = collection;
        if (!graphQL) return;
        const draftsEnabled = collection.config.versions?.drafts;
        let singularName;
        let pluralName;
        const fromSlug = (0, _formatLabels.formatNames)(collection.config.slug);
        if (graphQL.singularName) {
            singularName = (0, _formatLabels.toWords)(graphQL.singularName, true);
        } else {
            singularName = fromSlug.singular;
        }
        if (graphQL.pluralName) {
            pluralName = (0, _formatLabels.toWords)(graphQL.pluralName, true);
        } else {
            pluralName = fromSlug.plural;
        }
        // For collections named 'Media' or similar,
        // there is a possibility that the singular name
        // will equal the plural name. Append `all` to the beginning
        // of potential conflicts
        if (singularName === pluralName) {
            pluralName = `all${singularName}`;
        }
        collection.graphQL = {};
        const hasIDField = (0, _flattenTopLevelFields.default)(fields).findIndex((field)=>(0, _types.fieldAffectsData)(field) && field.name === 'id') > -1;
        const idType = (0, _buildMutationInputType.getCollectionIDType)(payload, config);
        const baseFields = {};
        const whereInputFields = [
            ...fields
        ];
        if (!hasIDField) {
            baseFields.id = {
                type: idType
            };
            whereInputFields.push({
                name: 'id',
                type: payload.db.defaultIDType
            });
        }
        const forceNullableObjectType = Boolean(versions?.drafts);
        collection.graphQL.type = (0, _buildObjectType.default)({
            name: singularName,
            baseFields,
            fields,
            forceNullable: forceNullableObjectType,
            parentName: singularName,
            payload
        });
        collection.graphQL.paginatedType = (0, _buildPaginatedListType.default)(pluralName, collection.graphQL.type);
        collection.graphQL.whereInputType = (0, _buildWhereInputType.default)({
            name: singularName,
            fields: whereInputFields,
            parentName: singularName,
            payload
        });
        if (config.auth && !config.auth.disableLocalStrategy) {
            fields.push({
                name: 'password',
                type: 'text',
                label: 'Password',
                required: true
            });
        }
        const createMutationInputType = (0, _buildMutationInputType.default)(payload, singularName, fields, singularName);
        if (createMutationInputType) {
            collection.graphQL.mutationInputType = new _graphql.GraphQLNonNull(createMutationInputType);
        }
        const updateMutationInputType = (0, _buildMutationInputType.default)(payload, `${singularName}Update`, fields.filter((field)=>!((0, _types.fieldAffectsData)(field) && field.name === 'id')), `${singularName}Update`, true);
        if (updateMutationInputType) {
            collection.graphQL.updateMutationInputType = new _graphql.GraphQLNonNull(updateMutationInputType);
        }
        payload.Query.fields[singularName] = {
            type: collection.graphQL.type,
            args: {
                id: {
                    type: new _graphql.GraphQLNonNull(idType)
                },
                ...draftsEnabled ? {
                    draft: {
                        type: _graphql.GraphQLBoolean
                    }
                } : {},
                ...payload.config.localization ? {
                    fallbackLocale: {
                        type: payload.types.fallbackLocaleInputType
                    },
                    locale: {
                        type: payload.types.localeInputType
                    }
                } : {}
            },
            resolve: (0, _findByID.default)(collection)
        };
        payload.Query.fields[pluralName] = {
            type: (0, _buildPaginatedListType.default)(pluralName, collection.graphQL.type),
            args: {
                ...draftsEnabled ? {
                    draft: {
                        type: _graphql.GraphQLBoolean
                    }
                } : {},
                where: {
                    type: collection.graphQL.whereInputType
                },
                ...payload.config.localization ? {
                    fallbackLocale: {
                        type: payload.types.fallbackLocaleInputType
                    },
                    locale: {
                        type: payload.types.localeInputType
                    }
                } : {},
                limit: {
                    type: _graphql.GraphQLInt
                },
                page: {
                    type: _graphql.GraphQLInt
                },
                sort: {
                    type: _graphql.GraphQLString
                }
            },
            resolve: (0, _find.default)(collection)
        };
        payload.Query.fields[`count${pluralName}`] = {
            type: new _graphql.GraphQLObjectType({
                name: `count${pluralName}`,
                fields: {
                    totalDocs: {
                        type: _graphql.GraphQLInt
                    }
                }
            }),
            args: {
                ...draftsEnabled ? {
                    draft: {
                        type: _graphql.GraphQLBoolean
                    }
                } : {},
                where: {
                    type: collection.graphQL.whereInputType
                },
                ...payload.config.localization ? {
                    locale: {
                        type: payload.types.localeInputType
                    }
                } : {}
            },
            resolve: (0, _count.default)(collection)
        };
        payload.Query.fields[`docAccess${singularName}`] = {
            type: (0, _buildPoliciesType.buildPolicyType)({
                type: 'collection',
                entity: config,
                scope: 'docAccess',
                typeSuffix: 'DocAccess'
            }),
            args: {
                id: {
                    type: new _graphql.GraphQLNonNull(idType)
                }
            },
            resolve: (0, _docAccess.docAccessResolver)()
        };
        payload.Mutation.fields[`create${singularName}`] = {
            type: collection.graphQL.type,
            args: {
                ...createMutationInputType ? {
                    data: {
                        type: collection.graphQL.mutationInputType
                    }
                } : {},
                ...draftsEnabled ? {
                    draft: {
                        type: _graphql.GraphQLBoolean
                    }
                } : {},
                ...payload.config.localization ? {
                    locale: {
                        type: payload.types.localeInputType
                    }
                } : {}
            },
            resolve: (0, _create.default)(collection)
        };
        payload.Mutation.fields[`update${singularName}`] = {
            type: collection.graphQL.type,
            args: {
                id: {
                    type: new _graphql.GraphQLNonNull(idType)
                },
                autosave: {
                    type: _graphql.GraphQLBoolean
                },
                ...updateMutationInputType ? {
                    data: {
                        type: collection.graphQL.updateMutationInputType
                    }
                } : {},
                ...draftsEnabled ? {
                    draft: {
                        type: _graphql.GraphQLBoolean
                    }
                } : {},
                ...payload.config.localization ? {
                    locale: {
                        type: payload.types.localeInputType
                    }
                } : {}
            },
            resolve: (0, _update.default)(collection)
        };
        payload.Mutation.fields[`delete${singularName}`] = {
            type: collection.graphQL.type,
            args: {
                id: {
                    type: new _graphql.GraphQLNonNull(idType)
                }
            },
            resolve: (0, _delete.default)(collection)
        };
        if (config.versions) {
            const versionIDType = payload.db.defaultIDType === 'text' ? _graphql.GraphQLString : _graphql.GraphQLInt;
            const versionCollectionFields = [
                ...(0, _buildCollectionFields.buildVersionCollectionFields)(config),
                {
                    name: 'id',
                    type: payload.db.defaultIDType
                },
                {
                    name: 'createdAt',
                    type: 'date',
                    label: 'Created At'
                },
                {
                    name: 'updatedAt',
                    type: 'date',
                    label: 'Updated At'
                }
            ];
            collection.graphQL.versionType = (0, _buildObjectType.default)({
                name: `${singularName}Version`,
                fields: versionCollectionFields,
                forceNullable: forceNullableObjectType,
                parentName: `${singularName}Version`,
                payload
            });
            payload.Query.fields[`version${(0, _formatName.default)(singularName)}`] = {
                type: collection.graphQL.versionType,
                args: {
                    id: {
                        type: versionIDType
                    },
                    ...payload.config.localization ? {
                        fallbackLocale: {
                            type: payload.types.fallbackLocaleInputType
                        },
                        locale: {
                            type: payload.types.localeInputType
                        }
                    } : {}
                },
                resolve: (0, _findVersionByID.default)(collection)
            };
            payload.Query.fields[`versions${pluralName}`] = {
                type: (0, _buildPaginatedListType.default)(`versions${(0, _formatName.default)(pluralName)}`, collection.graphQL.versionType),
                args: {
                    where: {
                        type: (0, _buildWhereInputType.default)({
                            name: `versions${singularName}`,
                            fields: versionCollectionFields,
                            parentName: `versions${singularName}`,
                            payload
                        })
                    },
                    ...payload.config.localization ? {
                        fallbackLocale: {
                            type: payload.types.fallbackLocaleInputType
                        },
                        locale: {
                            type: payload.types.localeInputType
                        }
                    } : {},
                    limit: {
                        type: _graphql.GraphQLInt
                    },
                    page: {
                        type: _graphql.GraphQLInt
                    },
                    sort: {
                        type: _graphql.GraphQLString
                    }
                },
                resolve: (0, _findVersions.default)(collection)
            };
            payload.Mutation.fields[`restoreVersion${(0, _formatName.default)(singularName)}`] = {
                type: collection.graphQL.type,
                args: {
                    id: {
                        type: versionIDType
                    }
                },
                resolve: (0, _restoreVersion.default)(collection)
            };
        }
        if (config.auth) {
            const authFields = config.auth.disableLocalStrategy ? [] : [
                {
                    name: 'email',
                    type: 'email',
                    required: true
                }
            ];
            collection.graphQL.JWT = (0, _buildObjectType.default)({
                name: (0, _formatName.default)(`${slug}JWT`),
                fields: [
                    ...config.fields.filter((field)=>(0, _types.fieldAffectsData)(field) && field.saveToJWT),
                    ...authFields,
                    {
                        name: 'collection',
                        type: 'text',
                        required: true
                    }
                ],
                parentName: (0, _formatName.default)(`${slug}JWT`),
                payload
            });
            payload.Query.fields[`me${singularName}`] = {
                type: new _graphql.GraphQLObjectType({
                    name: (0, _formatName.default)(`${slug}Me`),
                    fields: {
                        collection: {
                            type: _graphql.GraphQLString
                        },
                        exp: {
                            type: _graphql.GraphQLInt
                        },
                        strategy: {
                            type: _graphql.GraphQLString
                        },
                        token: {
                            type: _graphql.GraphQLString
                        },
                        user: {
                            type: collection.graphQL.type
                        }
                    }
                }),
                resolve: (0, _me.default)(collection)
            };
            payload.Query.fields[`initialized${singularName}`] = {
                type: _graphql.GraphQLBoolean,
                resolve: (0, _init.default)(collection.config.slug)
            };
            payload.Mutation.fields[`refreshToken${singularName}`] = {
                type: new _graphql.GraphQLObjectType({
                    name: (0, _formatName.default)(`${slug}Refreshed${singularName}`),
                    fields: {
                        exp: {
                            type: _graphql.GraphQLInt
                        },
                        refreshedToken: {
                            type: _graphql.GraphQLString
                        },
                        strategy: {
                            type: _graphql.GraphQLString
                        },
                        user: {
                            type: collection.graphQL.JWT
                        }
                    }
                }),
                resolve: (0, _refresh.default)(collection)
            };
            payload.Mutation.fields[`logout${singularName}`] = {
                type: _graphql.GraphQLString,
                resolve: (0, _logout.default)(collection)
            };
            if (!config.auth.disableLocalStrategy) {
                if (config.auth.maxLoginAttempts > 0) {
                    payload.Mutation.fields[`unlock${singularName}`] = {
                        type: new _graphql.GraphQLNonNull(_graphql.GraphQLBoolean),
                        args: {
                            email: {
                                type: new _graphql.GraphQLNonNull(_graphql.GraphQLString)
                            }
                        },
                        resolve: (0, _unlock.default)(collection)
                    };
                }
                payload.Mutation.fields[`login${singularName}`] = {
                    type: new _graphql.GraphQLObjectType({
                        name: (0, _formatName.default)(`${slug}LoginResult`),
                        fields: {
                            exp: {
                                type: _graphql.GraphQLInt
                            },
                            token: {
                                type: _graphql.GraphQLString
                            },
                            user: {
                                type: collection.graphQL.type
                            }
                        }
                    }),
                    args: {
                        email: {
                            type: _graphql.GraphQLString
                        },
                        password: {
                            type: _graphql.GraphQLString
                        }
                    },
                    resolve: (0, _login.default)(collection)
                };
                payload.Mutation.fields[`forgotPassword${singularName}`] = {
                    type: new _graphql.GraphQLNonNull(_graphql.GraphQLBoolean),
                    args: {
                        disableEmail: {
                            type: _graphql.GraphQLBoolean
                        },
                        email: {
                            type: new _graphql.GraphQLNonNull(_graphql.GraphQLString)
                        },
                        expiration: {
                            type: _graphql.GraphQLInt
                        }
                    },
                    resolve: (0, _forgotPassword.default)(collection)
                };
                payload.Mutation.fields[`resetPassword${singularName}`] = {
                    type: new _graphql.GraphQLObjectType({
                        name: (0, _formatName.default)(`${slug}ResetPassword`),
                        fields: {
                            token: {
                                type: _graphql.GraphQLString
                            },
                            user: {
                                type: collection.graphQL.type
                            }
                        }
                    }),
                    args: {
                        password: {
                            type: _graphql.GraphQLString
                        },
                        token: {
                            type: _graphql.GraphQLString
                        }
                    },
                    resolve: (0, _resetPassword.default)(collection)
                };
                payload.Mutation.fields[`verifyEmail${singularName}`] = {
                    type: _graphql.GraphQLBoolean,
                    args: {
                        token: {
                            type: _graphql.GraphQLString
                        }
                    },
                    resolve: (0, _verifyEmail.default)(collection)
                };
            }
        }
    });
}
const _default = initCollectionsGraphQL;

//# sourceMappingURL=data:application/json;base64,