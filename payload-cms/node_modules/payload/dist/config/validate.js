"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
const _schema = /*#__PURE__*/ _interop_require_default(require("../collections/config/schema"));
const _schema1 = /*#__PURE__*/ _interop_require_wildcard(require("../fields/config/schema"));
const _types = require("../fields/config/types");
const _schema2 = /*#__PURE__*/ _interop_require_default(require("../globals/config/schema"));
const _schema3 = /*#__PURE__*/ _interop_require_default(require("./schema"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
const validateFields = (context, entity)=>{
    const errors = [];
    entity.fields.forEach((field)=>{
        let idResult = {
            error: null
        };
        if ((0, _types.fieldAffectsData)(field) && field.name === 'id') {
            idResult = _schema1.idField.validate(field, {
                abortEarly: false
            });
        }
        const result = _schema1.default.validate(field, {
            abortEarly: false
        });
        if (idResult.error) {
            idResult.error.details.forEach(({ message })=>{
                errors.push(`${context} "${entity.slug}" > Field${(0, _types.fieldAffectsData)(field) ? ` "${field.name}" >` : ''} ${message}`);
            });
        }
        if (result.error) {
            result.error.details.forEach(({ message })=>{
                errors.push(`${context} "${entity.slug}" > Field${(0, _types.fieldAffectsData)(field) ? ` "${field.name}" >` : ''} ${message}`);
            });
        }
    });
    return errors;
};
const validateCollections = async (collections)=>{
    const errors = [];
    collections.forEach((collection)=>{
        const result = _schema.default.validate(collection, {
            abortEarly: false
        });
        if (result.error) {
            result.error.details.forEach(({ message })=>{
                errors.push(`Collection "${collection.slug}" > ${message}`);
            });
        }
        errors.push(...validateFields('Collection', collection));
    });
    return errors;
};
const validateGlobals = (globals)=>{
    const errors = [];
    globals.forEach((global)=>{
        const result = _schema2.default.validate(global, {
            abortEarly: false
        });
        if (result.error) {
            result.error.details.forEach(({ message })=>{
                errors.push(`Globals "${global.slug}" > ${message}`);
            });
        }
        errors.push(...validateFields('Global', global));
    });
    return errors;
};
const validateSchema = async (config, logger)=>{
    const result = _schema3.default.validate(config, {
        abortEarly: false
    });
    const nestedErrors = [
        ...await validateCollections(config.collections),
        ...validateGlobals(config.globals)
    ];
    if (result.error || nestedErrors.length > 0) {
        logger.error(`There were ${(result.error?.details?.length || 0) + nestedErrors.length} errors validating your Payload config`);
        let i = 0;
        if (result.error) {
            result.error.details.forEach(({ message })=>{
                i += 1;
                logger.error(`${i}: ${message}`);
            });
        }
        nestedErrors.forEach((message)=>{
            i += 1;
            logger.error(`${i}: ${message}`);
        });
        process.exit(1);
    }
    return result.value;
};
const _default = validateSchema;

//# sourceMappingURL=data:application/json;base64,