"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "sanitizeConfig", {
    enumerable: true,
    get: function() {
        return sanitizeConfig;
    }
});
const _deepmerge = /*#__PURE__*/ _interop_require_default(require("deepmerge"));
const _isplainobject = require("is-plain-object");
const _defaultUser = require("../auth/defaultUser");
const _sanitize = /*#__PURE__*/ _interop_require_default(require("../collections/config/sanitize"));
const _migrationsCollection = require("../database/migrations/migrationsCollection");
const _errors = require("../errors");
const _sanitize1 = /*#__PURE__*/ _interop_require_default(require("../globals/config/sanitize"));
const _preferencesCollection = /*#__PURE__*/ _interop_require_default(require("../preferences/preferencesCollection"));
const _checkDuplicateCollections = /*#__PURE__*/ _interop_require_default(require("../utilities/checkDuplicateCollections"));
const _defaults = require("./defaults");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const sanitizeAdminConfig = (configToSanitize)=>{
    const sanitizedConfig = {
        ...configToSanitize
    };
    // add default user collection if none provided
    if (!sanitizedConfig?.admin?.user) {
        const firstCollectionWithAuth = sanitizedConfig.collections.find(({ auth })=>Boolean(auth));
        if (firstCollectionWithAuth) {
            sanitizedConfig.admin.user = firstCollectionWithAuth.slug;
        } else {
            sanitizedConfig.admin.user = _defaultUser.defaultUserCollection.slug;
            sanitizedConfig.collections.push(_defaultUser.defaultUserCollection);
        }
    }
    if (!sanitizedConfig.collections.find(({ slug })=>slug === sanitizedConfig.admin.user)) {
        throw new _errors.InvalidConfiguration(`${sanitizedConfig.admin.user} is not a valid admin user collection`);
    }
    return sanitizedConfig;
};
const sanitizeConfig = (incomingConfig)=>{
    const configWithDefaults = (0, _deepmerge.default)(_defaults.defaults, incomingConfig, {
        isMergeableObject: _isplainobject.isPlainObject
    });
    if (!configWithDefaults.serverURL) {
        configWithDefaults.serverURL = '';
    }
    const config = sanitizeAdminConfig(configWithDefaults);
    if (config.localization && config.localization.locales?.length > 0) {
        // clone localization config so to not break everything
        const firstLocale = config.localization.locales[0];
        if (typeof firstLocale === 'string') {
            config.localization.localeCodes = [
                ...config.localization.locales
            ];
            // is string[], so convert to Locale[]
            config.localization.locales = config.localization.locales.map((locale)=>({
                    code: locale,
                    label: locale,
                    rtl: false,
                    toString: ()=>locale
                }));
        } else {
            // is Locale[], so convert to string[] for localeCodes
            config.localization.localeCodes = config.localization.locales.reduce((locales, locale)=>{
                locales.push(locale.code);
                return locales;
            }, []);
            config.localization.locales = config.localization.locales.map((locale)=>({
                    ...locale,
                    toString: ()=>locale.code
                }));
        }
    }
    configWithDefaults.collections.push((0, _preferencesCollection.default)(configWithDefaults));
    configWithDefaults.collections.push(_migrationsCollection.migrationsCollection);
    config.collections = config.collections.map((collection)=>(0, _sanitize.default)(configWithDefaults, collection));
    (0, _checkDuplicateCollections.default)(config.collections);
    if (config.globals.length > 0) {
        config.globals = (0, _sanitize1.default)(config);
    }
    if (config.serverURL !== '') {
        config.csrf.push(config.serverURL);
    }
    return config;
};

//# sourceMappingURL=data:application/json;base64,