"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
const _qs = /*#__PURE__*/ _interop_require_default(require("qs"));
const _react = /*#__PURE__*/ _interop_require_wildcard(require("react"));
const _reacti18next = require("react-i18next");
const _useDebounce = /*#__PURE__*/ _interop_require_default(require("../../../../../hooks/useDebounce"));
const _Auth = require("../../../../utilities/Auth");
const _Config = require("../../../../utilities/Config");
const _ReactSelect = /*#__PURE__*/ _interop_require_default(require("../../../ReactSelect"));
require("./index.scss");
const _optionsReducer = /*#__PURE__*/ _interop_require_default(require("./optionsReducer"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
const baseClass = 'condition-value-relationship';
const maxResultsPerRequest = 10;
const RelationshipField = (props)=>{
    const { admin: { isSortable } = {}, disabled, filterOptions, hasMany, onChange, operator, relationTo, value } = props;
    const { collections, routes: { api }, serverURL } = (0, _Config.useConfig)();
    const hasMultipleRelations = Array.isArray(relationTo);
    const [options, dispatchOptions] = (0, _react.useReducer)(_optionsReducer.default, []);
    const [lastFullyLoadedRelation, setLastFullyLoadedRelation] = (0, _react.useState)(-1);
    const [lastLoadedPage, setLastLoadedPage] = (0, _react.useState)(1);
    const [search, setSearch] = (0, _react.useState)('');
    const [errorLoading, setErrorLoading] = (0, _react.useState)('');
    const [hasLoadedFirstOptions, setHasLoadedFirstOptions] = (0, _react.useState)(false);
    const debouncedSearch = (0, _useDebounce.default)(search, 300);
    const { i18n, t } = (0, _reacti18next.useTranslation)('general');
    const { user } = (0, _Auth.useAuth)();
    const isMulti = [
        'in',
        'not_in'
    ].includes(operator);
    const addOptions = (0, _react.useCallback)((data, relation)=>{
        const collection = collections.find((coll)=>coll.slug === relation);
        dispatchOptions({
            type: 'ADD',
            collection,
            data,
            hasMultipleRelations,
            i18n,
            relation
        });
    }, [
        collections,
        hasMultipleRelations,
        i18n
    ]);
    const getResults = (0, _react.useCallback)(async ({ lastFullyLoadedRelation: lastFullyLoadedRelationArg, lastLoadedPage: lastLoadedPageArg, search: searchArg })=>{
        let lastLoadedPageToUse = typeof lastLoadedPageArg !== 'undefined' ? lastLoadedPageArg : 1;
        const lastFullyLoadedRelationToUse = typeof lastFullyLoadedRelationArg !== 'undefined' ? lastFullyLoadedRelationArg : -1;
        const relations = Array.isArray(relationTo) ? relationTo : [
            relationTo
        ];
        const relationsToFetch = lastFullyLoadedRelationToUse === -1 ? relations : relations.slice(lastFullyLoadedRelationToUse + 1);
        let resultsFetched = 0;
        if (!errorLoading) {
            void relationsToFetch.reduce(async (priorRelation, relation)=>{
                await priorRelation;
                if (resultsFetched < 10) {
                    const search = {
                        depth: 0,
                        limit: maxResultsPerRequest,
                        page: lastLoadedPageToUse,
                        where: {
                            and: []
                        }
                    };
                    const collection = collections.find((coll)=>coll.slug === relation);
                    const fieldToSearch = collection?.admin?.useAsTitle || 'id';
                    // add search arg to where object
                    if (searchArg) {
                        search.where.and.push({
                            [fieldToSearch]: {
                                like: searchArg
                            }
                        });
                    }
                    // call the filterOptions function if it exists passing in the collection
                    if (filterOptions) {
                        const optionFilter = typeof filterOptions === 'function' ? await filterOptions({
                            // data and siblingData are empty since we cannot fetch with the values covering the
                            // entire list this limitation means that filterOptions functions using a document's
                            //  data are unsupported in the whereBuilder
                            id: undefined,
                            data: {},
                            relationTo: collection.slug,
                            siblingData: {},
                            user
                        }) : filterOptions;
                        if (typeof optionFilter === 'object') {
                            search.where.and.push(optionFilter);
                        }
                        if (optionFilter === false) {
                            // no options will be returned
                            setLastFullyLoadedRelation(relations.indexOf(relation));
                            // If there are more relations to search, need to reset lastLoadedPage to 1
                            // both locally within function and state
                            if (relations.indexOf(relation) + 1 < relations.length) {
                                lastLoadedPageToUse = 1;
                            }
                            return;
                        }
                    }
                    if (search.where.and.length === 0) {
                        delete search.where;
                    }
                    const response = await fetch(`${serverURL}${api}/${relation}?${_qs.default.stringify(search)}`, {
                        credentials: 'include',
                        headers: {
                            'Accept-Language': i18n.language
                        }
                    });
                    if (response.ok) {
                        const data = await response.json();
                        if (data.docs.length > 0) {
                            resultsFetched += data.docs.length;
                            addOptions(data, relation);
                            setLastLoadedPage(data.page);
                            if (!data.nextPage) {
                                setLastFullyLoadedRelation(relations.indexOf(relation));
                                // If there are more relations to search, need to reset lastLoadedPage to 1
                                // both locally within function and state
                                if (relations.indexOf(relation) + 1 < relations.length) {
                                    lastLoadedPageToUse = 1;
                                }
                            }
                        }
                    } else {
                        setErrorLoading(t('error:unspecific'));
                    }
                }
            }, Promise.resolve());
        }
    }, [
        relationTo,
        errorLoading,
        collections,
        filterOptions,
        serverURL,
        api,
        i18n.language,
        user,
        addOptions,
        t
    ]);
    const findOptionsByValue = (0, _react.useCallback)(()=>{
        if (value) {
            if (hasMany || isMulti) {
                if (Array.isArray(value)) {
                    return value.map((val)=>{
                        if (hasMultipleRelations) {
                            let matchedOption;
                            options.forEach((opt)=>{
                                if (opt.options) {
                                    opt.options.some((subOpt)=>{
                                        if (subOpt?.value === val.value) {
                                            matchedOption = subOpt;
                                            return true;
                                        }
                                        return false;
                                    });
                                }
                            });
                            return matchedOption;
                        }
                        return options.find((opt)=>opt.value === val);
                    });
                }
                return undefined;
            }
            if (hasMultipleRelations) {
                let matchedOption;
                const valueWithRelation = value;
                options.forEach((opt)=>{
                    if (opt?.options) {
                        opt.options.some((subOpt)=>{
                            if (subOpt?.value === valueWithRelation.value) {
                                matchedOption = subOpt;
                                return true;
                            }
                            return false;
                        });
                    }
                });
                return matchedOption;
            }
            return options.find((opt)=>opt.value === value);
        }
        return undefined;
    }, [
        hasMany,
        hasMultipleRelations,
        isMulti,
        value,
        options
    ]);
    const handleInputChange = (0, _react.useCallback)((newSearch)=>{
        if (search !== newSearch) {
            setSearch(newSearch);
        }
    }, [
        search
    ]);
    const addOptionByID = (0, _react.useCallback)(async (id, relation)=>{
        if (!errorLoading && id !== 'null') {
            const response = await fetch(`${serverURL}${api}/${relation}/${id}?depth=0`, {
                credentials: 'include',
                headers: {
                    'Accept-Language': i18n.language
                }
            });
            if (response.ok) {
                const data = await response.json();
                addOptions({
                    docs: [
                        data
                    ]
                }, relation);
            } else {
                // eslint-disable-next-line no-console
                console.error(t('error:loadingDocument', {
                    id
                }));
            }
        }
    }, [
        i18n,
        addOptions,
        api,
        errorLoading,
        serverURL,
        t
    ]);
    // ///////////////////////////
    // Get results when search input changes
    // ///////////////////////////
    (0, _react.useEffect)(()=>{
        dispatchOptions({
            type: 'CLEAR',
            i18n,
            required: true
        });
        setHasLoadedFirstOptions(true);
        setLastLoadedPage(1);
        setLastFullyLoadedRelation(-1);
        void getResults({
            search: debouncedSearch
        });
    }, [
        getResults,
        debouncedSearch,
        relationTo,
        i18n
    ]);
    // ///////////////////////////
    // Format options once first options have been retrieved
    // ///////////////////////////
    (0, _react.useEffect)(()=>{
        if (value && hasLoadedFirstOptions) {
            if (hasMany || isMulti) {
                const matchedOptions = findOptionsByValue();
                (matchedOptions || []).forEach((option, i)=>{
                    if (!option) {
                        if (hasMultipleRelations) {
                            void addOptionByID(value[i].value, value[i].relationTo);
                        } else {
                            void addOptionByID(value[i], relationTo);
                        }
                    }
                });
            } else {
                const matchedOption = findOptionsByValue();
                if (!matchedOption) {
                    if (hasMultipleRelations) {
                        const valueWithRelation = value;
                        void addOptionByID(valueWithRelation.value, valueWithRelation.relationTo);
                    } else {
                        void addOptionByID(value, relationTo);
                    }
                }
            }
        }
    }, [
        addOptionByID,
        findOptionsByValue,
        hasMany,
        hasMultipleRelations,
        isMulti,
        relationTo,
        value,
        hasLoadedFirstOptions
    ]);
    const classes = [
        'field-type',
        baseClass,
        errorLoading && 'error-loading'
    ].filter(Boolean).join(' ');
    const valueToRender = findOptionsByValue() || value;
    return /*#__PURE__*/ _react.default.createElement("div", {
        className: classes
    }, !errorLoading && /*#__PURE__*/ _react.default.createElement(_ReactSelect.default, {
        disabled: disabled,
        isMulti: hasMany || isMulti,
        isSortable: isSortable,
        onChange: (selected)=>{
            if (hasMany || isMulti) {
                onChange(selected ? selected.map((option)=>{
                    if (hasMultipleRelations) {
                        return {
                            relationTo: option.relationTo,
                            value: option.value
                        };
                    }
                    return option.value;
                }) : null);
            } else if (hasMultipleRelations) {
                onChange({
                    relationTo: selected.relationTo,
                    value: selected.value
                });
            } else {
                onChange(selected.value);
            }
        },
        onInputChange: handleInputChange,
        onMenuScrollToBottom: ()=>{
            void getResults({
                lastFullyLoadedRelation,
                lastLoadedPage: lastLoadedPage + 1
            });
        },
        options: options,
        placeholder: t('selectValue'),
        value: valueToRender
    }), errorLoading && /*#__PURE__*/ _react.default.createElement("div", {
        className: `${baseClass}__error-loading`
    }, errorLoading));
};
const _default = RelationshipField;

//# sourceMappingURL=data:application/json;base64,