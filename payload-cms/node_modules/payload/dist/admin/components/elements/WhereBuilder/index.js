"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
const _qs = /*#__PURE__*/ _interop_require_default(require("qs"));
const _react = /*#__PURE__*/ _interop_require_wildcard(require("react"));
const _reacti18next = require("react-i18next");
const _reactrouterdom = require("react-router-dom");
const _flattenTopLevelFields = /*#__PURE__*/ _interop_require_default(require("../../../../utilities/flattenTopLevelFields"));
const _getTranslation = require("../../../../utilities/getTranslation");
const _useThrottledEffect = /*#__PURE__*/ _interop_require_default(require("../../../hooks/useThrottledEffect"));
const _SearchParams = require("../../utilities/SearchParams");
const _Button = /*#__PURE__*/ _interop_require_default(require("../Button"));
const _Condition = /*#__PURE__*/ _interop_require_default(require("./Condition"));
const _fieldtypes = /*#__PURE__*/ _interop_require_default(require("./field-types"));
require("./index.scss");
const _reducer = /*#__PURE__*/ _interop_require_default(require("./reducer"));
const _transformWhereQuery = require("./transformWhereQuery");
const _validateWhereQuery = /*#__PURE__*/ _interop_require_default(require("./validateWhereQuery"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
const baseClass = 'where-builder';
const reduceFields = (fields, i18n)=>(0, _flattenTopLevelFields.default)(fields).reduce((reduced, field)=>{
        let operators = [];
        if (typeof _fieldtypes.default[field.type] === 'object') {
            if (typeof _fieldtypes.default[field.type].operators === 'function') {
                operators = _fieldtypes.default[field.type].operators('hasMany' in field && field.hasMany ? true : false);
            } else {
                operators = _fieldtypes.default[field.type].operators;
            }
            const operatorKeys = new Set();
            const reducedOperators = operators.reduce((acc, operator)=>{
                if (!operatorKeys.has(operator.value)) {
                    operatorKeys.add(operator.value);
                    return [
                        ...acc,
                        {
                            ...operator,
                            label: i18n.t(`operators:${operator.label}`)
                        }
                    ];
                }
                return acc;
            }, []);
            const formattedField = {
                label: (0, _getTranslation.getTranslation)(field.label || field.name, i18n),
                value: field.name,
                ..._fieldtypes.default[field.type],
                operators: reducedOperators,
                props: {
                    ...field
                }
            };
            if (field.admin && 'disableListFilter' in field.admin && field.admin?.disableListFilter) return reduced;
            return [
                ...reduced,
                formattedField
            ];
        }
        return reduced;
    }, []);
/**
 * The WhereBuilder component is used to render the filter controls for a collection's list view.
 * It is part of the {@link ListControls} component which is used to render the controls (search, filter, where).
 */ const WhereBuilder = (props)=>{
    const { collection: { labels: { plural } = {} } = {}, collection, handleChange, modifySearchQuery = true } = props;
    const history = (0, _reactrouterdom.useHistory)();
    const params = (0, _SearchParams.useSearchParams)();
    const { i18n, t } = (0, _reacti18next.useTranslation)('general');
    // This handles initializing the where conditions from the search query (URL). That way, if you pass in
    // query params to the URL, the where conditions will be initialized from those and displayed in the UI.
    // Example: /admin/collections/posts?where[or][0][and][0][text][equals]=example%20post
    const [conditions, dispatchConditions] = (0, _react.useReducer)(_reducer.default, params.where, (whereFromSearch)=>{
        if (modifySearchQuery && whereFromSearch) {
            if ((0, _validateWhereQuery.default)(whereFromSearch)) {
                return whereFromSearch.or;
            }
            // Transform the where query to be in the right format. This will transform something simple like [text][equals]=example%20post to the right format
            const transformedWhere = (0, _transformWhereQuery.transformWhereQuery)(whereFromSearch);
            if ((0, _validateWhereQuery.default)(transformedWhere)) {
                return transformedWhere.or;
            }
            console.warn('Invalid where query in URL. Ignoring.');
        }
        return [];
    });
    const [reducedFields] = (0, _react.useState)(()=>reduceFields(collection.fields, i18n));
    // This handles updating the search query (URL) when the where conditions change
    (0, _useThrottledEffect.default)(()=>{
        const currentParams = _qs.default.parse(history.location.search, {
            depth: 10,
            ignoreQueryPrefix: true
        });
        const paramsToKeep = typeof currentParams?.where === 'object' && 'or' in currentParams.where ? currentParams.where.or.reduce((keptParams, param)=>{
            const newParam = {
                ...param
            };
            if (param.and) {
                delete newParam.and;
            }
            return [
                ...keptParams,
                newParam
            ];
        }, []) : [];
        const hasNewWhereConditions = conditions.length > 0;
        const newWhereQuery = {
            ...typeof currentParams?.where === 'object' && ((0, _validateWhereQuery.default)(currentParams?.where) || !hasNewWhereConditions) ? currentParams.where : {},
            or: [
                ...conditions,
                ...paramsToKeep
            ]
        };
        const reducedQuery = {
            or: newWhereQuery.or.map((orCondition)=>{
                const andConditions = (orCondition.and || []).map((andCondition)=>{
                    const reducedCondition = {};
                    Object.entries(andCondition).forEach(([fieldName, fieldValue])=>{
                        Object.entries(fieldValue).forEach(([operatorKey, operatorValue])=>{
                            reducedCondition[fieldName] = {};
                            reducedCondition[fieldName][operatorKey] = !operatorValue ? undefined : operatorValue;
                        });
                    });
                    return reducedCondition;
                });
                return {
                    and: andConditions
                };
            })
        };
        if (handleChange) handleChange(newWhereQuery);
        const hasExistingConditions = typeof currentParams?.where === 'object' && 'or' in currentParams.where;
        if (modifySearchQuery && (hasExistingConditions && !hasNewWhereConditions || hasNewWhereConditions)) {
            history.replace({
                search: _qs.default.stringify({
                    ...currentParams,
                    page: 1,
                    where: reducedQuery
                }, {
                    addQueryPrefix: true
                })
            });
        }
    }, 500, [
        conditions,
        modifySearchQuery,
        handleChange
    ]);
    return /*#__PURE__*/ _react.default.createElement("div", {
        className: baseClass
    }, conditions.length > 0 && /*#__PURE__*/ _react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/ _react.default.createElement("div", {
        className: `${baseClass}__label`
    }, t('filterWhere', {
        label: (0, _getTranslation.getTranslation)(plural, i18n)
    })), /*#__PURE__*/ _react.default.createElement("ul", {
        className: `${baseClass}__or-filters`
    }, conditions.map((or, orIndex)=>/*#__PURE__*/ _react.default.createElement("li", {
            key: orIndex
        }, orIndex !== 0 && /*#__PURE__*/ _react.default.createElement("div", {
            className: `${baseClass}__label`
        }, t('or')), /*#__PURE__*/ _react.default.createElement("ul", {
            className: `${baseClass}__and-filters`
        }, Array.isArray(or?.and) && or.and.map((_, andIndex)=>/*#__PURE__*/ _react.default.createElement("li", {
                key: andIndex
            }, andIndex !== 0 && /*#__PURE__*/ _react.default.createElement("div", {
                className: `${baseClass}__label`
            }, t('and')), /*#__PURE__*/ _react.default.createElement(_Condition.default, {
                andIndex: andIndex,
                dispatch: dispatchConditions,
                fields: reducedFields,
                key: andIndex,
                orIndex: orIndex,
                value: conditions[orIndex].and[andIndex]
            }))))))), /*#__PURE__*/ _react.default.createElement(_Button.default, {
        buttonStyle: "icon-label",
        className: `${baseClass}__add-or`,
        icon: "plus",
        iconPosition: "left",
        iconStyle: "with-border",
        onClick: ()=>{
            if (reducedFields.length > 0) dispatchConditions({
                type: 'add',
                field: reducedFields[0].value
            });
        }
    }, t('or'))), conditions.length === 0 && /*#__PURE__*/ _react.default.createElement("div", {
        className: `${baseClass}__no-filters`
    }, /*#__PURE__*/ _react.default.createElement("div", {
        className: `${baseClass}__label`
    }, t('noFiltersSet')), /*#__PURE__*/ _react.default.createElement(_Button.default, {
        buttonStyle: "icon-label",
        className: `${baseClass}__add-first-filter`,
        icon: "plus",
        iconPosition: "left",
        iconStyle: "with-border",
        onClick: ()=>{
            if (reducedFields.length > 0) dispatchConditions({
                type: 'add',
                field: reducedFields[0].value
            });
        }
    }, t('addFilter'))));
};
const _default = WhereBuilder;

//# sourceMappingURL=data:application/json;base64,