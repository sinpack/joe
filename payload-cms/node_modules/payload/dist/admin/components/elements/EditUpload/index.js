"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "EditUpload", {
    enumerable: true,
    get: function() {
        return EditUpload;
    }
});
const _modal = require("@faceless-ui/modal");
const _react = /*#__PURE__*/ _interop_require_wildcard(require("react"));
const _reacti18next = require("react-i18next");
const _reactimagecrop = /*#__PURE__*/ _interop_require_default(require("react-image-crop"));
require("react-image-crop/dist/ReactCrop.css");
const _Plus = /*#__PURE__*/ _interop_require_default(require("../../icons/Plus"));
const _UploadEdits = require("../../utilities/UploadEdits");
const _Upload = require("../../views/collections/Edit/Upload");
const _Button = /*#__PURE__*/ _interop_require_default(require("../Button"));
require("./index.scss");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
const baseClass = 'edit-upload';
const Input = /*#__PURE__*/ (0, _react.forwardRef)((props, ref)=>{
    const { name, onChange, value } = props;
    return /*#__PURE__*/ _react.default.createElement("div", {
        className: `${baseClass}__input`
    }, name, /*#__PURE__*/ _react.default.createElement("input", {
        name: name,
        onChange: (e)=>onChange(e.target.value),
        ref: ref,
        type: "number",
        value: value
    }));
});
const EditUpload = ({ doc, fileName, fileSrc, imageCacheTag, showCrop, showFocalPoint })=>{
    const { closeModal } = (0, _modal.useModal)();
    const { t } = (0, _reacti18next.useTranslation)([
        'general',
        'upload'
    ]);
    const { updateUploadEdits, uploadEdits } = (0, _UploadEdits.useUploadEdits)();
    const [focalPosition, setFocalPosition] = (0, _react.useState)({
        x: uploadEdits?.focalPoint?.x || doc.focalX || 50,
        y: uploadEdits?.focalPoint?.y || doc.focalY || 50
    });
    const [checkBounds, setCheckBounds] = (0, _react.useState)(false);
    const [originalHeight, setOriginalHeight] = (0, _react.useState)(0);
    const [originalWidth, setOriginalWidth] = (0, _react.useState)(0);
    const focalWrapRef = (0, _react.useRef)();
    const imageRef = (0, _react.useRef)();
    const cropRef = (0, _react.useRef)();
    const heightRef = (0, _react.useRef)(null);
    const widthRef = (0, _react.useRef)(null);
    const [crop, setCrop] = (0, _react.useState)({
        height: 100,
        heightPixels: 0,
        unit: '%',
        width: 100,
        widthPixels: 0,
        x: 0,
        y: 0
    });
    const [imageLoaded, setImageLoaded] = (0, _react.useState)(false);
    const onImageLoad = (e)=>{
        setOriginalHeight(e.currentTarget.naturalHeight);
        setOriginalWidth(e.currentTarget.naturalWidth);
        setImageLoaded(true);
    };
    const fineTuneCrop = ({ dimension, value })=>{
        const intValue = parseInt(value);
        if (dimension === 'width' && intValue >= originalWidth) return null;
        if (dimension === 'height' && intValue >= originalHeight) return null;
        const percentage = 100 * (intValue / (dimension === 'width' ? originalWidth : originalHeight));
        if (percentage === 100 || percentage === 0) return null;
        setCrop({
            ...crop,
            [dimension]: percentage
        });
    };
    const fineTuneFocalPosition = ({ coordinate, value })=>{
        const intValue = parseInt(value);
        if (intValue >= 0 && intValue <= 100) {
            setFocalPosition((prevPosition)=>({
                    ...prevPosition,
                    [coordinate]: intValue
                }));
        }
    };
    const saveEdits = ()=>{
        updateUploadEdits({
            crop: crop ? {
                ...crop,
                heightPixels: Number(heightRef.current?.value ?? crop.heightPixels),
                widthPixels: Number(widthRef.current?.value ?? crop.widthPixels)
            } : undefined,
            focalPoint: focalPosition ? focalPosition : undefined
        });
        closeModal(_Upload.editDrawerSlug);
    };
    const onDragEnd = _react.default.useCallback(({ x, y })=>{
        setFocalPosition({
            x,
            y
        });
        setCheckBounds(false);
    }, []);
    const centerFocalPoint = ()=>{
        const containerRect = focalWrapRef.current.getBoundingClientRect();
        const boundsRect = showCrop ? cropRef.current.getBoundingClientRect() : imageRef.current.getBoundingClientRect();
        const xCenter = (boundsRect.left - containerRect.left + boundsRect.width / 2) / containerRect.width * 100;
        const yCenter = (boundsRect.top - containerRect.top + boundsRect.height / 2) / containerRect.height * 100;
        setFocalPosition({
            x: xCenter,
            y: yCenter
        });
    };
    const fileSrcToUse = imageCacheTag ? `${fileSrc}?${imageCacheTag}` : fileSrc;
    return /*#__PURE__*/ _react.default.createElement("div", {
        className: baseClass
    }, /*#__PURE__*/ _react.default.createElement("div", {
        className: `${baseClass}__header`
    }, /*#__PURE__*/ _react.default.createElement("h2", {
        title: `${t('general:editing')} ${fileName}`
    }, t('general:editing'), " ", fileName), /*#__PURE__*/ _react.default.createElement("div", {
        className: `${baseClass}__actions`
    }, /*#__PURE__*/ _react.default.createElement(_Button.default, {
        "aria-label": t('cancel'),
        buttonStyle: "secondary",
        className: `${baseClass}__cancel`,
        onClick: ()=>closeModal(_Upload.editDrawerSlug)
    }, t('general:cancel')), /*#__PURE__*/ _react.default.createElement(_Button.default, {
        "aria-label": t('general:applyChanges'),
        buttonStyle: "primary",
        className: `${baseClass}__save`,
        disabled: !imageLoaded,
        onClick: ()=>saveEdits()
    }, t('general:applyChanges')))), /*#__PURE__*/ _react.default.createElement("div", {
        className: `${baseClass}__toolWrap`
    }, /*#__PURE__*/ _react.default.createElement("div", {
        className: `${baseClass}__crop`
    }, /*#__PURE__*/ _react.default.createElement("div", {
        className: `${baseClass}__focal-wrapper`,
        ref: focalWrapRef,
        style: {
            aspectRatio: `${originalWidth / originalHeight}`
        }
    }, showCrop ? /*#__PURE__*/ _react.default.createElement(_reactimagecrop.default, {
        className: `${baseClass}__reactCrop`,
        crop: crop,
        onChange: (_, c)=>setCrop(c),
        onComplete: ()=>setCheckBounds(true),
        renderSelectionAddon: ()=>{
            return /*#__PURE__*/ _react.default.createElement("div", {
                className: `${baseClass}__crop-window`,
                ref: cropRef
            });
        }
    }, /*#__PURE__*/ _react.default.createElement("img", {
        alt: t('upload:setCropArea'),
        onLoad: onImageLoad,
        ref: imageRef,
        src: fileSrcToUse
    })) : /*#__PURE__*/ _react.default.createElement("img", {
        alt: t('upload:setFocalPoint'),
        onLoad: onImageLoad,
        ref: imageRef,
        src: fileSrcToUse
    }), showFocalPoint && /*#__PURE__*/ _react.default.createElement(DraggableElement, {
        boundsRef: showCrop ? cropRef : imageRef,
        checkBounds: showCrop ? checkBounds : false,
        className: `${baseClass}__focalPoint`,
        containerRef: focalWrapRef,
        initialPosition: focalPosition,
        onDragEnd: onDragEnd,
        setCheckBounds: showCrop ? setCheckBounds : false
    }, /*#__PURE__*/ _react.default.createElement(_Plus.default, null)))), (showCrop || showFocalPoint) && /*#__PURE__*/ _react.default.createElement("div", {
        className: `${baseClass}__sidebar`
    }, showCrop && /*#__PURE__*/ _react.default.createElement("div", {
        className: `${baseClass}__groupWrap`
    }, /*#__PURE__*/ _react.default.createElement("div", null, /*#__PURE__*/ _react.default.createElement("div", {
        className: `${baseClass}__titleWrap`
    }, /*#__PURE__*/ _react.default.createElement("h3", null, t('upload:crop')), /*#__PURE__*/ _react.default.createElement(_Button.default, {
        buttonStyle: "none",
        className: `${baseClass}__reset`,
        onClick: ()=>setCrop({
                height: 100,
                heightPixels: originalHeight,
                unit: '%',
                width: 100,
                widthPixels: originalWidth,
                x: 0,
                y: 0
            })
    }, t('general:reset')))), /*#__PURE__*/ _react.default.createElement("span", {
        className: `${baseClass}__description`
    }, t('upload:cropToolDescription')), /*#__PURE__*/ _react.default.createElement("div", {
        className: `${baseClass}__inputsWrap`
    }, /*#__PURE__*/ _react.default.createElement(Input, {
        name: `${t('upload:width')} (px)`,
        onChange: (value)=>fineTuneCrop({
                dimension: 'width',
                value
            }),
        ref: widthRef,
        value: (crop.width / 100 * originalWidth).toFixed(0)
    }), /*#__PURE__*/ _react.default.createElement(Input, {
        name: `${t('upload:height')} (px)`,
        onChange: (value)=>fineTuneCrop({
                dimension: 'height',
                value
            }),
        ref: heightRef,
        value: (crop.height / 100 * originalHeight).toFixed(0)
    }))), showFocalPoint && /*#__PURE__*/ _react.default.createElement("div", {
        className: `${baseClass}__groupWrap`
    }, /*#__PURE__*/ _react.default.createElement("div", null, /*#__PURE__*/ _react.default.createElement("div", {
        className: `${baseClass}__titleWrap`
    }, /*#__PURE__*/ _react.default.createElement("h3", null, t('upload:focalPoint')), /*#__PURE__*/ _react.default.createElement(_Button.default, {
        buttonStyle: "none",
        className: `${baseClass}__reset`,
        onClick: centerFocalPoint
    }, t('general:reset')))), /*#__PURE__*/ _react.default.createElement("span", {
        className: `${baseClass}__description`
    }, t('upload:focalPointDescription')), /*#__PURE__*/ _react.default.createElement("div", {
        className: `${baseClass}__inputsWrap`
    }, /*#__PURE__*/ _react.default.createElement(Input, {
        name: "X %",
        onChange: (value)=>fineTuneFocalPosition({
                coordinate: 'x',
                value
            }),
        value: focalPosition.x.toFixed(0)
    }), /*#__PURE__*/ _react.default.createElement(Input, {
        name: "Y %",
        onChange: (value)=>fineTuneFocalPosition({
                coordinate: 'y',
                value
            }),
        value: focalPosition.y.toFixed(0)
    }))))));
};
const DraggableElement = ({ boundsRef, checkBounds, children, className, containerRef, initialPosition = {
    x: 50,
    y: 50
}, onDragEnd, setCheckBounds })=>{
    const [position, setPosition] = (0, _react.useState)({
        x: initialPosition.x,
        y: initialPosition.y
    });
    const [isDragging, setIsDragging] = (0, _react.useState)(false);
    const dragRef = (0, _react.useRef)();
    const getCoordinates = _react.default.useCallback((mouseXArg, mouseYArg, recenter)=>{
        const containerRect = containerRef.current.getBoundingClientRect();
        const boundsRect = boundsRef.current.getBoundingClientRect();
        const mouseX = mouseXArg ?? boundsRect.left;
        const mouseY = mouseYArg ?? boundsRect.top;
        const xOutOfBounds = mouseX < boundsRect.left || mouseX > boundsRect.right;
        const yOutOfBounds = mouseY < boundsRect.top || mouseY > boundsRect.bottom;
        let x = (mouseX - containerRect.left) / containerRect.width * 100;
        let y = (mouseY - containerRect.top) / containerRect.height * 100;
        const xCenter = (boundsRect.left - containerRect.left + boundsRect.width / 2) / containerRect.width * 100;
        const yCenter = (boundsRect.top - containerRect.top + boundsRect.height / 2) / containerRect.height * 100;
        if (xOutOfBounds || yOutOfBounds) {
            setIsDragging(false);
            if (mouseX < boundsRect.left) {
                x = (boundsRect.left - containerRect.left) / containerRect.width * 100;
            } else if (mouseX > boundsRect.right) {
                x = (containerRect.width - (containerRect.right - boundsRect.right)) / containerRect.width * 100;
            }
            if (mouseY < boundsRect.top) {
                y = (boundsRect.top - containerRect.top) / containerRect.height * 100;
            } else if (mouseY > boundsRect.bottom) {
                y = (containerRect.height - (containerRect.bottom - boundsRect.bottom)) / containerRect.height * 100;
            }
            if (recenter) {
                x = xOutOfBounds ? xCenter : x;
                y = yOutOfBounds ? yCenter : y;
            }
        }
        return {
            x,
            y
        };
    }, [
        boundsRef,
        containerRef
    ]);
    const handleMouseDown = (event)=>{
        event.preventDefault();
        setIsDragging(true);
    };
    const handleMouseMove = (event)=>{
        if (!isDragging) return null;
        const { x, y } = getCoordinates(event.clientX, event.clientY);
        setPosition({
            x,
            y
        });
    };
    const onDrop = ()=>{
        setIsDragging(false);
        onDragEnd(position);
    };
    _react.default.useEffect(()=>{
        if (isDragging || !dragRef.current) return;
        if (checkBounds) {
            const { height, left, top, width } = dragRef.current.getBoundingClientRect();
            const { x, y } = getCoordinates(left + width / 2, top + height / 2, true);
            onDragEnd({
                x,
                y
            });
            setPosition({
                x,
                y
            });
            setCheckBounds(false);
            return;
        }
    }, [
        getCoordinates,
        isDragging,
        checkBounds,
        setCheckBounds,
        position.x,
        position.y,
        onDragEnd
    ]);
    _react.default.useEffect(()=>{
        setPosition({
            x: initialPosition.x,
            y: initialPosition.y
        });
    }, [
        initialPosition.x,
        initialPosition.y
    ]);
    return /*#__PURE__*/ _react.default.createElement("div", {
        className: [
            `${baseClass}__draggable-container`,
            isDragging && `${baseClass}__draggable-container--dragging`
        ].filter(Boolean).join(' '),
        onMouseMove: handleMouseMove
    }, /*#__PURE__*/ _react.default.createElement("button", {
        className: [
            `${baseClass}__draggable`,
            className
        ].filter(Boolean).join(' '),
        onMouseDown: handleMouseDown,
        onMouseUp: onDrop,
        ref: dragRef,
        style: {
            left: `${position.x}%`,
            top: `${position.y}%`
        },
        type: "button"
    }, children), /*#__PURE__*/ _react.default.createElement("div", null));
};

//# sourceMappingURL=data:application/json;base64,