"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
const _react = /*#__PURE__*/ _interop_require_wildcard(require("react"));
const _Meta = /*#__PURE__*/ _interop_require_default(require("../FileDetails/Meta"));
require("./index.scss");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
const baseClass = 'preview-sizes';
const sortSizes = (sizes, imageSizes)=>{
    if (!imageSizes || imageSizes.length === 0) return sizes;
    const orderedSizes = {};
    imageSizes.forEach(({ name })=>{
        if (sizes[name]) {
            orderedSizes[name] = sizes[name];
        }
    });
    return orderedSizes;
};
const PreviewSizeCard = ({ name, active, baseURL, meta, onClick, previewSrc })=>{
    return /*#__PURE__*/ _react.default.createElement("div", {
        className: [
            `${baseClass}__sizeOption`,
            active && `${baseClass}--selected`
        ].filter(Boolean).join(' '),
        onClick: typeof onClick === 'function' ? onClick : undefined,
        onKeyDown: (e)=>{
            if (typeof onClick !== 'function') return;
            if (e.key === 'Enter') onClick();
        },
        role: "button",
        tabIndex: 0
    }, /*#__PURE__*/ _react.default.createElement("div", {
        className: `${baseClass}__image`
    }, /*#__PURE__*/ _react.default.createElement("img", {
        alt: meta.filename,
        src: previewSrc
    })), /*#__PURE__*/ _react.default.createElement("div", {
        className: `${baseClass}__sizeMeta`
    }, /*#__PURE__*/ _react.default.createElement("div", {
        className: `${baseClass}__sizeName`
    }, name), /*#__PURE__*/ _react.default.createElement(_Meta.default, {
        ...meta,
        staticURL: baseURL
    })));
};
const PreviewSizes = ({ collection, doc, imageCacheTag })=>{
    const { upload: { imageSizes, staticURL } } = collection;
    const { sizes } = doc;
    const [orderedSizes, setOrderedSizes] = (0, _react.useState)(()=>sortSizes(sizes, imageSizes));
    const [selectedSize, setSelectedSize] = (0, _react.useState)(null);
    const generateImageUrl = (doc)=>{
        if (!doc.filename) return null;
        if (doc.url) return `${doc.url}${imageCacheTag ? `?${imageCacheTag}` : ''}`;
    };
    (0, _react.useEffect)(()=>{
        setOrderedSizes(sortSizes(sizes, imageSizes));
    }, [
        sizes,
        imageSizes,
        imageCacheTag
    ]);
    const mainPreviewSrc = selectedSize ? generateImageUrl(doc.sizes[selectedSize]) : generateImageUrl(doc);
    const originalImage = (0, _react.useMemo)(()=>({
            filename: doc.filename,
            filesize: doc.filesize,
            height: doc.height,
            mimeType: doc.mimeType,
            width: doc.width
        }), [
        doc
    ]);
    const originalFilename = 'Original';
    return /*#__PURE__*/ _react.default.createElement("div", {
        className: baseClass
    }, /*#__PURE__*/ _react.default.createElement("div", {
        className: `${baseClass}__imageWrap`
    }, /*#__PURE__*/ _react.default.createElement("div", {
        className: `${baseClass}__meta`
    }, /*#__PURE__*/ _react.default.createElement("div", {
        className: `${baseClass}__sizeName`
    }, selectedSize || originalFilename), /*#__PURE__*/ _react.default.createElement(_Meta.default, {
        ...selectedSize ? orderedSizes[selectedSize] : originalImage,
        staticURL: staticURL
    })), /*#__PURE__*/ _react.default.createElement("img", {
        alt: doc.filename,
        className: `${baseClass}__preview`,
        src: mainPreviewSrc
    })), /*#__PURE__*/ _react.default.createElement("div", {
        className: `${baseClass}__listWrap`
    }, /*#__PURE__*/ _react.default.createElement("div", {
        className: `${baseClass}__list`
    }, /*#__PURE__*/ _react.default.createElement(PreviewSizeCard, {
        active: !selectedSize,
        baseURL: staticURL,
        meta: originalImage,
        name: originalFilename,
        onClick: ()=>setSelectedSize(null),
        previewSrc: generateImageUrl(doc)
    }), Object.entries(orderedSizes).map(([key, val])=>{
        const selected = selectedSize === key;
        const previewSrc = generateImageUrl(val);
        if (previewSrc) {
            return /*#__PURE__*/ _react.default.createElement(PreviewSizeCard, {
                active: selected,
                baseURL: staticURL,
                key: key,
                meta: val,
                name: key,
                onClick: ()=>setSelectedSize(key),
                previewSrc: previewSrc
            });
        }
        return null;
    }))));
};
const _default = PreviewSizes;

//# sourceMappingURL=data:application/json;base64,