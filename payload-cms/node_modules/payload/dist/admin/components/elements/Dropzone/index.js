"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "Dropzone", {
    enumerable: true,
    get: function() {
        return Dropzone;
    }
});
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _reacti18next = require("react-i18next");
const _Button = /*#__PURE__*/ _interop_require_default(require("../Button"));
require("./index.scss");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const handleDragOver = (e)=>{
    e.preventDefault();
    e.stopPropagation();
};
const baseClass = 'dropzone';
const Dropzone = ({ className, mimeTypes, onChange, onPasteUrlClick })=>{
    const dropRef = _react.default.useRef(null);
    const [dragging, setDragging] = _react.default.useState(false);
    const inputRef = _react.default.useRef(null);
    const { t } = (0, _reacti18next.useTranslation)([
        'upload',
        'general'
    ]);
    const handlePaste = _react.default.useCallback((e)=>{
        e.preventDefault();
        e.stopPropagation();
        if (e.clipboardData.files && e.clipboardData.files.length > 0) {
            onChange(e.clipboardData.files);
        }
    }, [
        onChange
    ]);
    const handleDragEnter = _react.default.useCallback((e)=>{
        e.preventDefault();
        e.stopPropagation();
        setDragging(true);
    }, []);
    const handleDragLeave = _react.default.useCallback((e)=>{
        e.preventDefault();
        e.stopPropagation();
        setDragging(false);
    }, []);
    const handleDrop = _react.default.useCallback((e)=>{
        e.preventDefault();
        e.stopPropagation();
        setDragging(false);
        if (e.dataTransfer.files && e.dataTransfer.files.length > 0) {
            onChange(e.dataTransfer.files);
            setDragging(false);
            e.dataTransfer.clearData();
        }
    }, [
        onChange
    ]);
    const handleFileSelection = _react.default.useCallback((e)=>{
        if (e.target.files && e.target.files.length > 0) {
            onChange(e.target.files);
        }
    }, [
        onChange
    ]);
    _react.default.useEffect(()=>{
        const div = dropRef.current;
        if (div) {
            div.addEventListener('dragenter', handleDragEnter);
            div.addEventListener('dragleave', handleDragLeave);
            div.addEventListener('dragover', handleDragOver);
            div.addEventListener('drop', handleDrop);
            div.addEventListener('paste', handlePaste);
            return ()=>{
                div.removeEventListener('dragenter', handleDragEnter);
                div.removeEventListener('dragleave', handleDragLeave);
                div.removeEventListener('dragover', handleDragOver);
                div.removeEventListener('drop', handleDrop);
                div.removeEventListener('paste', handlePaste);
            };
        }
        return ()=>null;
    }, [
        handleDragEnter,
        handleDragLeave,
        handleDrop,
        handlePaste
    ]);
    const classes = [
        baseClass,
        className,
        dragging ? 'dragging' : ''
    ].filter(Boolean).join(' ');
    return /*#__PURE__*/ _react.default.createElement("div", {
        className: classes,
        ref: dropRef
    }, /*#__PURE__*/ _react.default.createElement(_Button.default, {
        buttonStyle: "secondary",
        className: `${baseClass}__file-button`,
        onClick: ()=>{
            inputRef.current.click();
        },
        size: "small"
    }, t('upload:selectFile')), /*#__PURE__*/ _react.default.createElement(_Button.default, {
        buttonStyle: "secondary",
        className: `${baseClass}__file-button`,
        onClick: onPasteUrlClick,
        size: "small"
    }, t('upload:pasteURL')), /*#__PURE__*/ _react.default.createElement("input", {
        accept: mimeTypes?.join(','),
        className: `${baseClass}__hidden-input`,
        onChange: handleFileSelection,
        ref: inputRef,
        type: "file"
    }), /*#__PURE__*/ _react.default.createElement("p", {
        className: `${baseClass}__label`
    }, t('general:or'), " ", t('dragAndDrop')));
};

//# sourceMappingURL=data:application/json;base64,