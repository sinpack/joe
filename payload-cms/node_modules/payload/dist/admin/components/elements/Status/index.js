"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
const _modal = require("@faceless-ui/modal");
const _react = /*#__PURE__*/ _interop_require_wildcard(require("react"));
const _reacti18next = require("react-i18next");
const _reacttoastify = require("react-toastify");
const _ = require("../..");
const _api = require("../../../api");
const _context = require("../../forms/Form/context");
const _Config = require("../../utilities/Config");
const _DocumentInfo = require("../../utilities/DocumentInfo");
const _Locale = require("../../utilities/Locale");
const _Button = /*#__PURE__*/ _interop_require_default(require("../Button"));
require("./index.scss");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
const baseClass = 'status';
const Status = ()=>{
    const { id, collection, docPermissions, getVersions, global, publishedDoc, unpublishedVersions } = (0, _DocumentInfo.useDocumentInfo)();
    const { toggleModal } = (0, _modal.useModal)();
    const { routes: { api }, serverURL } = (0, _Config.useConfig)();
    const [processing, setProcessing] = (0, _react.useState)(false);
    const { reset: resetForm } = (0, _context.useForm)();
    const { code: locale } = (0, _Locale.useLocale)();
    const { i18n, t } = (0, _reacti18next.useTranslation)('version');
    const unPublishModalSlug = `confirm-un-publish-${id}`;
    const revertModalSlug = `confirm-revert-${id}`;
    let statusToRender;
    if (unpublishedVersions?.docs?.length > 0 && publishedDoc) {
        statusToRender = 'changed';
    } else if (!publishedDoc) {
        statusToRender = 'draft';
    } else if (publishedDoc && unpublishedVersions?.docs?.length <= 1) {
        statusToRender = 'published';
    }
    const performAction = (0, _react.useCallback)(async (action)=>{
        let url;
        let method;
        let body;
        setProcessing(true);
        if (action === 'unpublish') {
            body = {
                _status: 'draft'
            };
        }
        if (action === 'revert') {
            body = publishedDoc;
        }
        if (collection) {
            url = `${serverURL}${api}/${collection.slug}/${id}?locale=${locale}&fallback-locale=null`;
            method = 'patch';
        }
        if (global) {
            url = `${serverURL}${api}/globals/${global.slug}?locale=${locale}&fallback-locale=null`;
            method = 'post';
        }
        const res = await _api.requests[method](url, {
            body: JSON.stringify(body),
            headers: {
                'Accept-Language': i18n.language,
                'Content-Type': 'application/json'
            }
        });
        if (res.status === 200) {
            let data;
            let fields;
            const json = await res.json();
            if (global) {
                data = json.result;
                fields = global.fields;
            }
            if (collection) {
                data = json.doc;
                fields = collection.fields;
            }
            resetForm(fields, data);
            _reacttoastify.toast.success(json.message);
            getVersions();
        } else {
            _reacttoastify.toast.error(t('error:unPublishingDocument'));
        }
        setProcessing(false);
        if (action === 'revert') {
            toggleModal(revertModalSlug);
        }
        if (action === 'unpublish') {
            toggleModal(unPublishModalSlug);
        }
    }, [
        collection,
        global,
        publishedDoc,
        serverURL,
        api,
        id,
        i18n,
        locale,
        resetForm,
        getVersions,
        t,
        toggleModal,
        revertModalSlug,
        unPublishModalSlug
    ]);
    const canUpdate = docPermissions?.update?.permission;
    if (statusToRender) {
        return /*#__PURE__*/ _react.default.createElement("div", {
            className: baseClass,
            title: `${t('status')}: ${t(statusToRender)}`
        }, /*#__PURE__*/ _react.default.createElement("div", {
            className: `${baseClass}__value-wrap`
        }, /*#__PURE__*/ _react.default.createElement("span", {
            className: `${baseClass}__label`
        }, t('status'), ": "), /*#__PURE__*/ _react.default.createElement("span", {
            className: `${baseClass}__value`
        }, t(statusToRender)), canUpdate && statusToRender === 'published' && /*#__PURE__*/ _react.default.createElement(_react.default.Fragment, null, " — ", /*#__PURE__*/ _react.default.createElement(_Button.default, {
            buttonStyle: "none",
            className: `${baseClass}__action`,
            onClick: ()=>toggleModal(unPublishModalSlug)
        }, t('unpublish')), /*#__PURE__*/ _react.default.createElement(_modal.Modal, {
            className: `${baseClass}__modal`,
            slug: unPublishModalSlug
        }, /*#__PURE__*/ _react.default.createElement(_.MinimalTemplate, {
            className: `${baseClass}__modal-template`
        }, /*#__PURE__*/ _react.default.createElement("h1", null, t('confirmUnpublish')), /*#__PURE__*/ _react.default.createElement("p", null, t('aboutToUnpublish')), /*#__PURE__*/ _react.default.createElement(_Button.default, {
            buttonStyle: "secondary",
            onClick: processing ? undefined : ()=>toggleModal(unPublishModalSlug),
            type: "button"
        }, t('general:cancel')), /*#__PURE__*/ _react.default.createElement(_Button.default, {
            onClick: processing ? undefined : ()=>performAction('unpublish')
        }, t(processing ? 'unpublishing' : 'general:confirm'))))), canUpdate && statusToRender === 'changed' && /*#__PURE__*/ _react.default.createElement(_react.default.Fragment, null, " — ", /*#__PURE__*/ _react.default.createElement(_Button.default, {
            buttonStyle: "none",
            className: `${baseClass}__action`,
            id: "action-revert-to-published",
            onClick: ()=>toggleModal(revertModalSlug)
        }, t('revertToPublished')), /*#__PURE__*/ _react.default.createElement(_modal.Modal, {
            className: `${baseClass}__modal`,
            slug: revertModalSlug
        }, /*#__PURE__*/ _react.default.createElement(_.MinimalTemplate, {
            className: `${baseClass}__modal-template`
        }, /*#__PURE__*/ _react.default.createElement("h1", null, t('confirmRevertToSaved')), /*#__PURE__*/ _react.default.createElement("p", null, t('aboutToRevertToPublished')), /*#__PURE__*/ _react.default.createElement(_Button.default, {
            buttonStyle: "secondary",
            onClick: processing ? undefined : ()=>toggleModal(revertModalSlug),
            type: "button"
        }, t('general:cancel')), /*#__PURE__*/ _react.default.createElement(_Button.default, {
            id: "action-revert-to-published-confirm",
            onClick: processing ? undefined : ()=>performAction('revert')
        }, t(processing ? 'reverting' : 'general:confirm')))))));
    }
    return null;
};
const _default = Status;

//# sourceMappingURL=data:application/json;base64,