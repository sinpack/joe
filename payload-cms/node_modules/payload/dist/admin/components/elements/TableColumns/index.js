"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    TableColumnContext: function() {
        return TableColumnContext;
    },
    TableColumnsProvider: function() {
        return TableColumnsProvider;
    },
    useTableColumns: function() {
        return useTableColumns;
    }
});
const _react = /*#__PURE__*/ _interop_require_wildcard(require("react"));
const _types = require("../../../../fields/config/types");
const _Preferences = require("../../utilities/Preferences");
const _formatFields = /*#__PURE__*/ _interop_require_default(require("../../views/collections/List/formatFields"));
const _buildColumns = /*#__PURE__*/ _interop_require_default(require("./buildColumns"));
const _columnReducer = require("./columnReducer");
const _getInitialColumns = /*#__PURE__*/ _interop_require_default(require("./getInitialColumns"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
const TableColumnContext = /*#__PURE__*/ (0, _react.createContext)({});
const useTableColumns = ()=>(0, _react.useContext)(TableColumnContext);
const filterTableFields = (fields)=>{
    return fields.reduce((acc, field)=>{
        if ((0, _types.fieldHasSubFields)(field)) {
            field = {
                ...field,
                fields: filterTableFields(field.fields)
            };
        }
        if (!field.admin?.disableListColumn) acc.push(field);
        return acc;
    }, []);
};
const TableColumnsProvider = ({ cellProps, children, collection: { admin: { defaultColumns, useAsTitle } }, collection })=>{
    const preferenceKey = `${collection.slug}-list`;
    const prevCollection = (0, _react.useRef)();
    const hasInitialized = (0, _react.useRef)(false);
    const { getPreference, setPreference } = (0, _Preferences.usePreferences)();
    const [formattedFields] = (0, _react.useState)(()=>(0, _formatFields.default)(collection));
    const filteredFields = filterTableFields(formattedFields);
    const [tableColumns, dispatchTableColumns] = (0, _react.useReducer)(_columnReducer.columnReducer, {}, ()=>{
        const initialColumns = (0, _getInitialColumns.default)(filteredFields, useAsTitle, defaultColumns);
        return (0, _buildColumns.default)({
            cellProps,
            collection,
            columns: initialColumns.map((column)=>({
                    accessor: column,
                    active: true
                }))
        });
    });
    // /////////////////////////////////////
    // Sync preferences on collection change
    // /////////////////////////////////////
    (0, _react.useEffect)(()=>{
        const sync = async ()=>{
            const collectionHasChanged = prevCollection.current !== collection.slug;
            if (collectionHasChanged) {
                hasInitialized.current = false;
                const currentPreferences = await getPreference(preferenceKey);
                prevCollection.current = collection.slug;
                const initialColumns = (0, _getInitialColumns.default)(filteredFields, useAsTitle, defaultColumns);
                const newCols = currentPreferences?.columns || initialColumns;
                dispatchTableColumns({
                    type: 'set',
                    payload: {
                        cellProps,
                        collection: {
                            ...collection,
                            fields: filteredFields
                        },
                        columns: newCols.map((column)=>{
                            // 'string' is for backwards compatibility
                            // the preference used to be stored as an array of strings
                            if (typeof column === 'string') {
                                return {
                                    accessor: column,
                                    active: true
                                };
                            }
                            return column;
                        })
                    }
                });
                hasInitialized.current = true;
            }
        };
        void sync();
    }, [
        preferenceKey,
        setPreference,
        tableColumns,
        getPreference,
        useAsTitle,
        defaultColumns,
        collection,
        cellProps,
        filteredFields
    ]);
    // /////////////////////////////////////
    // Set preferences on column change
    // /////////////////////////////////////
    (0, _react.useEffect)(()=>{
        if (!hasInitialized.current) return;
        const columns = tableColumns.map((c)=>({
                accessor: c.accessor,
                active: c.active
            }));
        void setPreference(preferenceKey, {
            columns
        }, true);
    }, [
        tableColumns,
        preferenceKey,
        setPreference,
        getPreference
    ]);
    const setActiveColumns = (0, _react.useCallback)((columns)=>{
        dispatchTableColumns({
            type: 'set',
            payload: {
                // onSelect,
                cellProps,
                collection: {
                    ...collection,
                    fields: (0, _formatFields.default)(collection)
                },
                columns: columns.map((column)=>({
                        accessor: column,
                        active: true
                    }))
            }
        });
    }, [
        collection,
        cellProps
    ]);
    const moveColumn = (0, _react.useCallback)((args)=>{
        const { fromIndex, toIndex } = args;
        dispatchTableColumns({
            type: 'move',
            payload: {
                cellProps,
                collection: {
                    ...collection,
                    fields: (0, _formatFields.default)(collection)
                },
                fromIndex,
                toIndex
            }
        });
    }, [
        collection,
        cellProps
    ]);
    const toggleColumn = (0, _react.useCallback)((column)=>{
        dispatchTableColumns({
            type: 'toggle',
            payload: {
                cellProps,
                collection: {
                    ...collection,
                    fields: (0, _formatFields.default)(collection)
                },
                column
            }
        });
    }, [
        collection,
        cellProps
    ]);
    return /*#__PURE__*/ _react.default.createElement(TableColumnContext.Provider, {
        value: {
            columns: tableColumns,
            dispatchTableColumns,
            moveColumn,
            setActiveColumns,
            toggleColumn
        }
    }, children);
};

//# sourceMappingURL=data:application/json;base64,