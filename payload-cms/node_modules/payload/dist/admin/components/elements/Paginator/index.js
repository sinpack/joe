"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
const _qs = /*#__PURE__*/ _interop_require_default(require("qs"));
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _reactrouterdom = require("react-router-dom");
const _SearchParams = require("../../utilities/SearchParams");
const _ClickableArrow = /*#__PURE__*/ _interop_require_default(require("./ClickableArrow"));
const _Page = /*#__PURE__*/ _interop_require_default(require("./Page"));
const _Separator = /*#__PURE__*/ _interop_require_default(require("./Separator"));
require("./index.scss");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const nodeTypes = {
    ClickableArrow: _ClickableArrow.default,
    Page: _Page.default,
    Separator: _Separator.default
};
const baseClass = 'paginator';
const Pagination = (props)=>{
    const history = (0, _reactrouterdom.useHistory)();
    const params = (0, _SearchParams.useSearchParams)();
    const { disableHistoryChange = false, hasNextPage = false, hasPrevPage = false, nextPage = null, numberOfNeighbors = 1, onChange, page: currentPage, prevPage = null, totalPages = null } = props;
    if (!totalPages || totalPages <= 1) return null;
    // uses react router to set the current page
    const updatePage = (page)=>{
        if (!disableHistoryChange) {
            const newParams = {
                ...params
            };
            newParams.page = page;
            history.push({
                search: _qs.default.stringify(newParams, {
                    addQueryPrefix: true
                })
            });
        }
        if (typeof onChange === 'function') onChange(page);
    };
    // Create array of integers for each page
    const pages = Array.from({
        length: totalPages
    }, (_, index)=>index + 1);
    // Assign indices for start and end of the range of pages that should be shown in paginator
    let rangeStartIndex = currentPage - 1 - numberOfNeighbors;
    // Sanitize rangeStartIndex in case it is less than zero for safe split
    if (rangeStartIndex <= 0) rangeStartIndex = 0;
    const rangeEndIndex = currentPage - 1 + numberOfNeighbors + 1;
    // Slice out the range of pages that we want to render
    const nodes = pages.slice(rangeStartIndex, rangeEndIndex);
    // Add prev separator if necessary
    if (currentPage - numberOfNeighbors - 1 >= 2) nodes.unshift({
        type: 'Separator'
    });
    // Add first page if necessary
    if (currentPage > numberOfNeighbors + 1) {
        nodes.unshift({
            props: {
                isFirstPage: true,
                page: 1,
                updatePage
            },
            type: 'Page'
        });
    }
    // Add next separator if necessary
    if (currentPage + numberOfNeighbors + 1 < totalPages) nodes.push({
        type: 'Separator'
    });
    // Add last page if necessary
    if (rangeEndIndex < totalPages) {
        nodes.push({
            props: {
                isLastPage: true,
                page: totalPages,
                updatePage
            },
            type: 'Page'
        });
    }
    // Add prev and next arrows based on necessity
    nodes.unshift({
        props: {
            direction: 'right',
            isDisabled: !hasNextPage,
            updatePage: ()=>updatePage(nextPage)
        },
        type: 'ClickableArrow'
    });
    nodes.unshift({
        props: {
            direction: 'left',
            isDisabled: !hasPrevPage,
            updatePage: ()=>updatePage(prevPage)
        },
        type: 'ClickableArrow'
    });
    return /*#__PURE__*/ _react.default.createElement("div", {
        className: baseClass
    }, nodes.map((node, i)=>{
        if (typeof node === 'number') {
            return /*#__PURE__*/ _react.default.createElement(_Page.default, {
                isCurrent: currentPage === node,
                key: i,
                page: node,
                updatePage: updatePage
            });
        }
        const NodeType = nodeTypes[node.type];
        return /*#__PURE__*/ _react.default.createElement(NodeType, {
            key: i,
            ...node.props
        });
    }));
};
const _default = Pagination;

//# sourceMappingURL=data:application/json;base64,