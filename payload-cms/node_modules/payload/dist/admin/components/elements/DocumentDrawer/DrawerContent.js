"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "DocumentDrawerContent", {
    enumerable: true,
    get: function() {
        return DocumentDrawerContent;
    }
});
const _modal = require("@faceless-ui/modal");
const _react = /*#__PURE__*/ _interop_require_wildcard(require("react"));
const _reacti18next = require("react-i18next");
const _reacttoastify = require("react-toastify");
const _ = require(".");
const _getTranslation = require("../../../../utilities/getTranslation");
const _usePayloadAPI = /*#__PURE__*/ _interop_require_default(require("../../../hooks/usePayloadAPI"));
const _buildStateFromSchema = /*#__PURE__*/ _interop_require_default(require("../../forms/Form/buildStateFromSchema"));
const _fieldtypes = require("../../forms/field-types");
const _useRelatedCollections = require("../../forms/field-types/Relationship/AddNew/useRelatedCollections");
const _X = /*#__PURE__*/ _interop_require_default(require("../../icons/X"));
const _Auth = require("../../utilities/Auth");
const _Config = require("../../utilities/Config");
const _DocumentInfo = require("../../utilities/DocumentInfo");
const _Locale = require("../../utilities/Locale");
const _RenderCustomComponent = /*#__PURE__*/ _interop_require_default(require("../../utilities/RenderCustomComponent"));
const _Default = /*#__PURE__*/ _interop_require_default(require("../../views/collections/Edit/Default"));
const _formatFields = /*#__PURE__*/ _interop_require_default(require("../../views/collections/Edit/formatFields"));
const _Button = /*#__PURE__*/ _interop_require_default(require("../Button"));
const _IDLabel = /*#__PURE__*/ _interop_require_default(require("../IDLabel"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
const Content = ({ collectionSlug, customHeader, drawerSlug, onSave })=>{
    const { routes: { api }, serverURL } = (0, _Config.useConfig)();
    const { closeModal, modalState, toggleModal } = (0, _modal.useModal)();
    const { code: locale } = (0, _Locale.useLocale)();
    const { user } = (0, _Auth.useAuth)();
    const [internalState, setInternalState] = (0, _react.useState)();
    const { i18n, t } = (0, _reacti18next.useTranslation)([
        'fields',
        'general'
    ]);
    const hasInitializedState = (0, _react.useRef)(false);
    const [isOpen, setIsOpen] = (0, _react.useState)(false);
    const [collectionConfig] = (0, _useRelatedCollections.useRelatedCollections)(collectionSlug);
    const config = (0, _Config.useConfig)();
    const { admin: { components: { views: { Edit } = {} } = {} } = {} } = collectionConfig;
    const { id, action, docPermissions, getDocPreferences } = (0, _DocumentInfo.useDocumentInfo)();
    // If they are replacing the entire edit view, use that.
    // Else let the DefaultEdit determine what to render.
    const CustomEditView = typeof Edit === 'function' ? Edit : undefined;
    const [fields, setFields] = (0, _react.useState)(()=>(0, _formatFields.default)(collectionConfig, true));
    // no need to an additional requests when creating new documents
    const initialID = (0, _react.useRef)(id);
    const [{ data, isError, isLoading: isLoadingDocument }] = (0, _usePayloadAPI.default)(initialID.current ? `${serverURL}${api}/${collectionSlug}/${initialID.current}` : null, {
        initialParams: {
            depth: 0,
            draft: 'true',
            'fallback-locale': 'null'
        }
    });
    (0, _react.useEffect)(()=>{
        setFields((0, _formatFields.default)(collectionConfig, true));
    }, [
        collectionSlug,
        collectionConfig
    ]);
    (0, _react.useEffect)(()=>{
        if (isLoadingDocument || hasInitializedState.current) {
            return;
        }
        const awaitInitialState = async ()=>{
            const preferences = await getDocPreferences();
            const state = await (0, _buildStateFromSchema.default)({
                id,
                config,
                data,
                fieldSchema: fields,
                locale,
                operation: id ? 'update' : 'create',
                preferences,
                t,
                user
            });
            setInternalState(state);
        };
        void awaitInitialState();
        hasInitializedState.current = true;
    }, [
        data,
        fields,
        id,
        user,
        locale,
        isLoadingDocument,
        t,
        getDocPreferences,
        config
    ]);
    (0, _react.useEffect)(()=>{
        setIsOpen(Boolean(modalState[drawerSlug]?.isOpen));
    }, [
        modalState,
        drawerSlug
    ]);
    (0, _react.useEffect)(()=>{
        if (isOpen && !isLoadingDocument && isError) {
            closeModal(drawerSlug);
            _reacttoastify.toast.error(data.errors?.[0].message || t('error:unspecific'));
        }
    }, [
        isError,
        t,
        isOpen,
        data,
        drawerSlug,
        closeModal,
        isLoadingDocument
    ]);
    if (isError) return null;
    const isEditing = Boolean(id);
    const apiURL = id ? `${serverURL}${api}/${collectionSlug}/${id}?locale=${locale}` : null;
    const hasSavePermission = isEditing && docPermissions?.update?.permission || !isEditing && docPermissions?.create?.permission;
    const isLoading = !internalState || !docPermissions || isLoadingDocument;
    return /*#__PURE__*/ _react.default.createElement(_RenderCustomComponent.default, {
        CustomComponent: CustomEditView,
        DefaultComponent: _Default.default,
        componentProps: {
            id,
            action,
            apiURL,
            collection: collectionConfig,
            customHeader: /*#__PURE__*/ _react.default.createElement("div", {
                className: `${_.baseClass}__header`
            }, /*#__PURE__*/ _react.default.createElement("div", {
                className: `${_.baseClass}__header-content`
            }, /*#__PURE__*/ _react.default.createElement("h2", {
                className: `${_.baseClass}__header-text`
            }, !customHeader ? t(!id ? 'fields:addNewLabel' : 'general:editLabel', {
                label: (0, _getTranslation.getTranslation)(collectionConfig.labels.singular, i18n)
            }) : customHeader), /*#__PURE__*/ _react.default.createElement(_Button.default, {
                "aria-label": t('general:close'),
                buttonStyle: "none",
                className: `${_.baseClass}__header-close`,
                onClick: ()=>toggleModal(drawerSlug)
            }, /*#__PURE__*/ _react.default.createElement(_X.default, null))), id && /*#__PURE__*/ _react.default.createElement(_IDLabel.default, {
                id: id.toString()
            })),
            data,
            disableActions: true,
            disableLeaveWithoutSaving: true,
            disableRoutes: true,
            fieldTypes: _fieldtypes.fieldTypes,
            hasSavePermission,
            internalState,
            isEditing,
            isLoading,
            me: true,
            onSave,
            permissions: docPermissions
        }
    });
};
const DocumentDrawerContent = (props)=>{
    const { id: idFromProps, collectionSlug, onSave: onSaveFromProps } = props;
    const [collectionConfig] = (0, _useRelatedCollections.useRelatedCollections)(collectionSlug);
    const [id, setId] = (0, _react.useState)(idFromProps);
    const onSave = (0, _react.useCallback)((args)=>{
        setId(args.doc.id);
        if (typeof onSaveFromProps === 'function') {
            onSaveFromProps({
                ...args,
                collectionConfig
            });
        }
    }, [
        onSaveFromProps,
        collectionConfig
    ]);
    return /*#__PURE__*/ _react.default.createElement(_DocumentInfo.DocumentInfoProvider, {
        collection: collectionConfig,
        id: id
    }, /*#__PURE__*/ _react.default.createElement(Content, {
        ...props,
        onSave: onSave
    }));
};

//# sourceMappingURL=data:application/json;base64,