"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    DocumentDrawer: function() {
        return DocumentDrawer;
    },
    DocumentDrawerToggler: function() {
        return DocumentDrawerToggler;
    },
    baseClass: function() {
        return baseClass;
    },
    useDocumentDrawer: function() {
        return useDocumentDrawer;
    }
});
const _modal = require("@faceless-ui/modal");
const _react = /*#__PURE__*/ _interop_require_wildcard(require("react"));
const _reacti18next = require("react-i18next");
const _getTranslation = require("../../../../utilities/getTranslation");
const _useRelatedCollections = require("../../forms/field-types/Relationship/AddNew/useRelatedCollections");
const _EditDepth = require("../../utilities/EditDepth");
const _Drawer = require("../Drawer");
const _DrawerContent = require("./DrawerContent");
require("./index.scss");
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
const baseClass = 'doc-drawer';
const formatDocumentDrawerSlug = ({ id, collectionSlug, depth, uuid })=>`doc-drawer_${collectionSlug}_${depth}${id ? `_${id}` : ''}_${uuid}`;
const DocumentDrawerToggler = ({ id, children, className, collectionSlug, disabled, drawerSlug, ...rest })=>{
    const { i18n, t } = (0, _reacti18next.useTranslation)([
        'fields',
        'general'
    ]);
    const [collectionConfig] = (0, _useRelatedCollections.useRelatedCollections)(collectionSlug);
    return /*#__PURE__*/ _react.default.createElement(_Drawer.DrawerToggler, {
        "aria-label": t(!id ? 'fields:addNewLabel' : 'general:editLabel', {
            label: (0, _getTranslation.getTranslation)(collectionConfig.labels.singular, i18n)
        }),
        className: [
            className,
            `${baseClass}__toggler`
        ].filter(Boolean).join(' '),
        disabled: disabled,
        slug: drawerSlug,
        ...rest
    }, children);
};
const DocumentDrawer = (props)=>{
    const { drawerSlug } = props;
    return /*#__PURE__*/ _react.default.createElement(_Drawer.Drawer, {
        className: baseClass,
        gutter: false,
        header: false,
        slug: drawerSlug
    }, /*#__PURE__*/ _react.default.createElement(_DrawerContent.DocumentDrawerContent, props));
};
const useDocumentDrawer = ({ id, collectionSlug })=>{
    const drawerDepth = (0, _EditDepth.useEditDepth)();
    const uuid = (0, _react.useId)();
    const { closeModal, modalState, openModal, toggleModal } = (0, _modal.useModal)();
    const [isOpen, setIsOpen] = (0, _react.useState)(false);
    const drawerSlug = formatDocumentDrawerSlug({
        id,
        collectionSlug,
        depth: drawerDepth,
        uuid
    });
    (0, _react.useEffect)(()=>{
        setIsOpen(Boolean(modalState[drawerSlug]?.isOpen));
    }, [
        modalState,
        drawerSlug
    ]);
    const toggleDrawer = (0, _react.useCallback)(()=>{
        toggleModal(drawerSlug);
    }, [
        toggleModal,
        drawerSlug
    ]);
    const closeDrawer = (0, _react.useCallback)(()=>{
        closeModal(drawerSlug);
    }, [
        closeModal,
        drawerSlug
    ]);
    const openDrawer = (0, _react.useCallback)(()=>{
        openModal(drawerSlug);
    }, [
        openModal,
        drawerSlug
    ]);
    const MemoizedDrawer = (0, _react.useMemo)(()=>{
        return (props)=>/*#__PURE__*/ _react.default.createElement(DocumentDrawer, {
                ...props,
                collectionSlug: collectionSlug,
                drawerSlug: drawerSlug,
                id: id,
                key: drawerSlug
            });
    }, [
        id,
        drawerSlug,
        collectionSlug
    ]);
    const MemoizedDrawerToggler = (0, _react.useMemo)(()=>{
        return (props)=>/*#__PURE__*/ _react.default.createElement(DocumentDrawerToggler, {
                ...props,
                collectionSlug: collectionSlug,
                drawerSlug: drawerSlug,
                id: id
            });
    }, [
        id,
        drawerSlug,
        collectionSlug
    ]);
    const MemoizedDrawerState = (0, _react.useMemo)(()=>({
            closeDrawer,
            drawerDepth,
            drawerSlug,
            isDrawerOpen: isOpen,
            openDrawer,
            toggleDrawer
        }), [
        drawerDepth,
        drawerSlug,
        isOpen,
        toggleDrawer,
        closeDrawer,
        openDrawer
    ]);
    return [
        MemoizedDrawer,
        MemoizedDrawerToggler,
        MemoizedDrawerState
    ];
};

//# sourceMappingURL=data:application/json;base64,