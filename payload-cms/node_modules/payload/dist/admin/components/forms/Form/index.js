/* eslint-disable jsx-a11y/no-noninteractive-element-interactions */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
const _deepequal = /*#__PURE__*/ _interop_require_default(require("deep-equal"));
const _objecttoformdata = require("object-to-formdata");
const _react = /*#__PURE__*/ _interop_require_wildcard(require("react"));
const _reacti18next = require("react-i18next");
const _reactrouterdom = require("react-router-dom");
const _reacttoastify = require("react-toastify");
const _isNumber = require("../../../../utilities/isNumber");
const _setsAreEqual = require("../../../../utilities/setsAreEqual");
const _splitPathByArrayFields = require("../../../../utilities/splitPathByArrayFields");
const _wait = /*#__PURE__*/ _interop_require_default(require("../../../../utilities/wait"));
const _api = require("../../../api");
const _useThrottledEffect = /*#__PURE__*/ _interop_require_default(require("../../../hooks/useThrottledEffect"));
const _Auth = require("../../utilities/Auth");
const _Config = require("../../utilities/Config");
const _DocumentInfo = require("../../utilities/DocumentInfo");
const _Locale = require("../../utilities/Locale");
const _OperationProvider = require("../../utilities/OperationProvider");
const _WatchFormErrors = require("./WatchFormErrors");
const _buildFieldSchemaMap = require("./buildFieldSchemaMap");
const _buildInitialState = /*#__PURE__*/ _interop_require_default(require("./buildInitialState"));
const _buildStateFromSchema = /*#__PURE__*/ _interop_require_default(require("./buildStateFromSchema"));
const _context = require("./context");
const _errorMessages = /*#__PURE__*/ _interop_require_default(require("./errorMessages"));
const _fieldReducer = require("./fieldReducer");
const _getDataByPath = /*#__PURE__*/ _interop_require_default(require("./getDataByPath"));
const _getSiblingData = /*#__PURE__*/ _interop_require_default(require("./getSiblingData"));
const _initContextState = /*#__PURE__*/ _interop_require_default(require("./initContextState"));
const _reduceFieldsToValues = /*#__PURE__*/ _interop_require_default(require("./reduceFieldsToValues"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
const baseClass = 'form';
const Form = (props)=>{
    const { id, collection, getDocPreferences, global } = (0, _DocumentInfo.useDocumentInfo)();
    const { action, children, className, disableSuccessStatus, disabled, fields: fieldsFromProps = collection?.fields || global?.fields, handleResponse, initialData, initialState, method, onSubmit, onSuccess, redirect, submitted: submittedFromProps, waitForAutocomplete } = props;
    const history = (0, _reactrouterdom.useHistory)();
    const { code: locale } = (0, _Locale.useLocale)();
    const { i18n, t } = (0, _reacti18next.useTranslation)('general');
    const { refreshCookie, user } = (0, _Auth.useAuth)();
    const operation = (0, _OperationProvider.useOperation)();
    const config = (0, _Config.useConfig)();
    const [modified, setModified] = (0, _react.useState)(false);
    const [processing, setProcessing] = (0, _react.useState)(false);
    const [submitted, setSubmitted] = (0, _react.useState)(false);
    const [formattedInitialData, setFormattedInitialData] = (0, _react.useState)((0, _buildInitialState.default)(initialData));
    const formRef = (0, _react.useRef)(null);
    const contextRef = (0, _react.useRef)({});
    let initialFieldState = {};
    if (formattedInitialData) initialFieldState = formattedInitialData;
    if (initialState) initialFieldState = initialState;
    const fieldsReducer = (0, _react.useReducer)(_fieldReducer.fieldReducer, {}, ()=>initialFieldState);
    /**
   * `fields` is the current, up-to-date state/data of all fields in the form. It can be modified by using dispatchFields,
   * which calls the fieldReducer, which then updates the state.
   */ const [fields, dispatchFields] = fieldsReducer;
    contextRef.current.fields = fields;
    contextRef.current.dispatchFields = dispatchFields;
    // Build a current set of child errors for all rows in form state
    const buildRowErrors = (0, _react.useCallback)(()=>{
        const existingFieldRows = {};
        const newFieldRows = {};
        Object.entries(fields).forEach(([path, field])=>{
            const pathSegments = (0, _splitPathByArrayFields.splitPathByArrayFields)(path);
            for(let i = 0; i < pathSegments.length; i += 1){
                const fieldPath = pathSegments.slice(0, i + 1).join('.');
                const formField = fields?.[fieldPath];
                // Is this an array or blocks field?
                if (Array.isArray(formField?.rows)) {
                    // Keep a reference to the existing row state
                    existingFieldRows[fieldPath] = formField.rows;
                    // A new row state will be used to compare
                    // against the old state later,
                    // to see if we need to dispatch an update
                    if (!newFieldRows[fieldPath]) {
                        newFieldRows[fieldPath] = formField.rows.map((existingRow)=>({
                                ...existingRow,
                                childErrorPaths: new Set()
                            }));
                    }
                    const rowIndex = pathSegments[i + 1];
                    const childFieldPath = pathSegments.slice(i + 1).join('.');
                    if (field.valid === false && childFieldPath) {
                        newFieldRows[fieldPath][rowIndex].childErrorPaths.add(`${fieldPath}.${childFieldPath}`);
                    }
                }
            }
        });
        // Now loop over all fields with rows -
        // if anything changed, dispatch an update for the field
        // with the new row state
        Object.entries(newFieldRows).forEach(([path, newRows])=>{
            const stateMatches = newRows.every((newRow, i)=>{
                const existingRowErrorPaths = existingFieldRows[path][i]?.childErrorPaths;
                return (0, _setsAreEqual.setsAreEqual)(newRow.childErrorPaths, existingRowErrorPaths);
            });
            if (!stateMatches) {
                dispatchFields({
                    type: 'UPDATE',
                    path,
                    rows: newRows
                });
            }
        });
    }, [
        fields,
        dispatchFields
    ]);
    const validateForm = (0, _react.useCallback)(async ()=>{
        const validatedFieldState = {};
        let isValid = true;
        const data = contextRef.current.getData();
        const validationPromises = Object.entries(contextRef.current.fields).map(async ([path, field])=>{
            const validatedField = {
                ...field,
                valid: true
            };
            if (field.passesCondition !== false) {
                let validationResult = true;
                if (typeof field.validate === 'function') {
                    let valueToValidate = field.value;
                    if (field?.rows && Array.isArray(field.rows)) {
                        valueToValidate = contextRef.current.getDataByPath(path);
                    }
                    validationResult = await field.validate(valueToValidate, {
                        id,
                        config,
                        data,
                        operation,
                        previousValue: field.previousValue,
                        siblingData: contextRef.current.getSiblingData(path),
                        t,
                        user
                    });
                }
                if (typeof validationResult === 'string') {
                    validatedField.errorMessage = validationResult;
                    validatedField.valid = false;
                    isValid = false;
                }
            }
            validatedFieldState[path] = validatedField;
        });
        await Promise.all(validationPromises);
        if (!(0, _deepequal.default)(contextRef.current.fields, validatedFieldState)) {
            dispatchFields({
                type: 'REPLACE_STATE',
                state: validatedFieldState
            });
        }
        return isValid;
    }, [
        contextRef,
        id,
        user,
        operation,
        t,
        dispatchFields,
        config
    ]);
    const submit = (0, _react.useCallback)(async (options = {}, e)=>{
        const { action: actionToUse = action, method: methodToUse = method, overrides = {}, skipValidation } = options;
        if (disabled) {
            if (e) {
                e.preventDefault();
            }
            return;
        }
        if (e) {
            e.stopPropagation();
            e.preventDefault();
        }
        setProcessing(true);
        if (waitForAutocomplete) await (0, _wait.default)(100);
        const isValid = skipValidation ? true : await contextRef.current.validateForm();
        contextRef.current.buildRowErrors();
        if (!skipValidation) setSubmitted(true);
        // If not valid, prevent submission
        if (!isValid) {
            _reacttoastify.toast.error(t('error:correctInvalidFields'));
            setProcessing(false);
            return;
        }
        // If submit handler comes through via props, run that
        if (onSubmit) {
            const data = {
                ...(0, _reduceFieldsToValues.default)(fields, true),
                ...overrides
            };
            onSubmit(fields, data);
        }
        const formData = contextRef.current.createFormData(overrides);
        try {
            const res = await _api.requests[methodToUse.toLowerCase()](actionToUse, {
                body: formData,
                headers: {
                    'Accept-Language': i18n.language
                }
            });
            setModified(false);
            if (typeof handleResponse === 'function') {
                handleResponse(res);
                return;
            }
            setProcessing(false);
            const contentType = res.headers.get('content-type');
            const isJSON = contentType && contentType.indexOf('application/json') !== -1;
            let json = {};
            if (isJSON) json = await res.json();
            if (res.status < 400) {
                setSubmitted(false);
                if (typeof onSuccess === 'function') onSuccess(json);
                if (redirect) {
                    const destination = {
                        pathname: redirect,
                        state: {}
                    };
                    if (typeof json === 'object' && json.message && !disableSuccessStatus) {
                        destination.state = {
                            status: [
                                {
                                    type: 'success',
                                    message: json.message
                                }
                            ]
                        };
                    }
                    history.push(destination);
                } else if (!disableSuccessStatus) {
                    _reacttoastify.toast.success(json.message || t('submissionSuccessful'), {
                        autoClose: 3000
                    });
                }
            } else {
                contextRef.current = {
                    ...contextRef.current
                } // triggers rerender of all components that subscribe to form
                ;
                if (json.message) {
                    _reacttoastify.toast.error(json.message);
                    return;
                }
                if (Array.isArray(json.errors)) {
                    const [fieldErrors, nonFieldErrors] = json.errors.reduce(([fieldErrs, nonFieldErrs], err)=>{
                        const newFieldErrs = [];
                        const newNonFieldErrs = [];
                        if (err?.message) {
                            newNonFieldErrs.push(err);
                        }
                        if (Array.isArray(err?.data)) {
                            err.data.forEach((dataError)=>{
                                if (dataError?.field) {
                                    newFieldErrs.push(dataError);
                                } else {
                                    newNonFieldErrs.push(dataError);
                                }
                            });
                        }
                        return [
                            [
                                ...fieldErrs,
                                ...newFieldErrs
                            ],
                            [
                                ...nonFieldErrs,
                                ...newNonFieldErrs
                            ]
                        ];
                    }, [
                        [],
                        []
                    ]);
                    fieldErrors.forEach((err)=>{
                        dispatchFields({
                            type: 'UPDATE',
                            ...contextRef.current?.fields?.[err.field] || {},
                            errorMessage: err.message,
                            path: err.field,
                            valid: false
                        });
                    });
                    nonFieldErrors.forEach((err)=>{
                        _reacttoastify.toast.error(err.message || t('error:unknown'));
                    });
                    return;
                }
                const message = _errorMessages.default[res.status] || t('error:unknown');
                _reacttoastify.toast.error(message);
            }
        } catch (err) {
            setProcessing(false);
            _reacttoastify.toast.error(err);
        }
    }, [
        action,
        disableSuccessStatus,
        disabled,
        dispatchFields,
        fields,
        handleResponse,
        history,
        method,
        onSubmit,
        onSuccess,
        redirect,
        t,
        i18n,
        waitForAutocomplete
    ]);
    const traverseRowConfigs = _react.default.useCallback(({ fieldConfig, path, pathPrefix })=>{
        const config = fieldConfig;
        const pathSegments = (0, _splitPathByArrayFields.splitPathByArrayFields)(path);
        const configMap = (0, _buildFieldSchemaMap.buildFieldSchemaMap)(config);
        for(let i = 0; i < pathSegments.length; i += 1){
            const pathSegment = pathSegments[i];
            if ((0, _isNumber.isNumber)(pathSegment)) {
                const rowIndex = parseInt(pathSegment, 10);
                const parentFieldPath = pathSegments.slice(0, i).join('.');
                const remainingPath = pathSegments.slice(i + 1).join('.');
                const arrayFieldPath = pathPrefix ? `${pathPrefix}.${parentFieldPath}` : parentFieldPath;
                const parentArrayField = contextRef.current.getField(arrayFieldPath);
                const rowField = parentArrayField.rows[rowIndex];
                if (rowField.blockType) {
                    const blockConfig = configMap.get(`${parentFieldPath}.${rowField.blockType}`);
                    if (blockConfig) {
                        return traverseRowConfigs({
                            fieldConfig: blockConfig,
                            path: remainingPath,
                            pathPrefix: `${arrayFieldPath}.${rowIndex}`
                        });
                    }
                    throw new Error(`Block config not found for ${rowField.blockType} at path ${path}`);
                } else {
                    return traverseRowConfigs({
                        fieldConfig: configMap.get(parentFieldPath),
                        path: remainingPath,
                        pathPrefix: `${arrayFieldPath}.${rowIndex}`
                    });
                }
            }
        }
        return config;
    }, []);
    const getRowSchemaByPath = _react.default.useCallback(({ blockType, path })=>{
        const rowConfig = traverseRowConfigs({
            fieldConfig: fieldsFromProps,
            path
        });
        const rowFieldConfigs = (0, _buildFieldSchemaMap.buildFieldSchemaMap)(rowConfig);
        const pathSegments = (0, _splitPathByArrayFields.splitPathByArrayFields)(path);
        const fieldKey = pathSegments.at(-1);
        return rowFieldConfigs.get(blockType ? `${fieldKey}.${blockType}` : fieldKey);
    }, [
        traverseRowConfigs,
        fieldsFromProps
    ]);
    // Array/Block row manipulation. This is called when, for example, you add a new block to a blocks field.
    // The block data is saved in the rows property of the state, which is modified updated here.
    const addFieldRow = (0, _react.useCallback)(async ({ data, path, rowIndex })=>{
        const preferences = await getDocPreferences();
        const rowSchema = getRowSchemaByPath({
            blockType: data?.blockType,
            path
        });
        if (rowSchema) {
            const subFieldState = await (0, _buildStateFromSchema.default)({
                id,
                config,
                data,
                fieldSchema: rowSchema,
                locale,
                operation,
                preferences,
                t,
                user
            });
            dispatchFields({
                type: 'ADD_ROW',
                blockType: data?.blockType,
                path,
                rowIndex,
                subFieldState
            });
        }
    }, [
        dispatchFields,
        getDocPreferences,
        id,
        user,
        operation,
        locale,
        t,
        getRowSchemaByPath,
        config
    ]);
    const removeFieldRow = (0, _react.useCallback)(({ path, rowIndex })=>{
        dispatchFields({
            type: 'REMOVE_ROW',
            path,
            rowIndex
        });
    }, [
        dispatchFields
    ]);
    const replaceFieldRow = (0, _react.useCallback)(async ({ data, path, rowIndex })=>{
        const preferences = await getDocPreferences();
        const rowSchema = getRowSchemaByPath({
            blockType: data?.blockType,
            path
        });
        if (rowSchema) {
            const subFieldState = await (0, _buildStateFromSchema.default)({
                id,
                config,
                data,
                fieldSchema: rowSchema,
                locale,
                operation,
                preferences,
                t,
                user
            });
            dispatchFields({
                type: 'REPLACE_ROW',
                blockType: data?.blockType,
                path,
                rowIndex,
                subFieldState
            });
        }
    }, [
        dispatchFields,
        getDocPreferences,
        id,
        user,
        operation,
        locale,
        t,
        getRowSchemaByPath,
        config
    ]);
    const getFields = (0, _react.useCallback)(()=>contextRef.current.fields, [
        contextRef
    ]);
    const getField = (0, _react.useCallback)((path)=>contextRef.current.fields[path], [
        contextRef
    ]);
    const getData = (0, _react.useCallback)(()=>(0, _reduceFieldsToValues.default)(contextRef.current.fields, true), [
        contextRef
    ]);
    const getSiblingData = (0, _react.useCallback)((path)=>(0, _getSiblingData.default)(contextRef.current.fields, path), [
        contextRef
    ]);
    const getDataByPath = (0, _react.useCallback)((path)=>(0, _getDataByPath.default)(contextRef.current.fields, path), [
        contextRef
    ]);
    const createFormData = (0, _react.useCallback)((overrides = {})=>{
        const data = (0, _reduceFieldsToValues.default)(contextRef.current.fields, true);
        const file = data?.file;
        if (file) {
            delete data.file;
        }
        const dataWithOverrides = {
            ...data,
            ...overrides
        };
        const dataToSerialize = {
            _payload: JSON.stringify(dataWithOverrides),
            file
        };
        // nullAsUndefineds is important to allow uploads and relationship fields to clear themselves
        const formData = (0, _objecttoformdata.serialize)(dataToSerialize, {
            indices: true,
            nullsAsUndefineds: false
        });
        return formData;
    }, [
        contextRef
    ]);
    const reset = (0, _react.useCallback)(async (fieldSchema, data)=>{
        const preferences = await getDocPreferences();
        const state = await (0, _buildStateFromSchema.default)({
            id,
            config,
            data,
            fieldSchema,
            locale,
            operation,
            preferences,
            t,
            user
        });
        contextRef.current = {
            ..._initContextState.default
        };
        setModified(false);
        dispatchFields({
            type: 'REPLACE_STATE',
            state
        });
    }, [
        id,
        user,
        operation,
        locale,
        t,
        dispatchFields,
        getDocPreferences,
        config
    ]);
    const replaceState = (0, _react.useCallback)((state)=>{
        contextRef.current = {
            ..._initContextState.default
        };
        setModified(false);
        dispatchFields({
            type: 'REPLACE_STATE',
            state
        });
    }, [
        dispatchFields
    ]);
    contextRef.current.submit = submit;
    contextRef.current.getFields = getFields;
    contextRef.current.getField = getField;
    contextRef.current.getData = getData;
    contextRef.current.getSiblingData = getSiblingData;
    contextRef.current.getDataByPath = getDataByPath;
    contextRef.current.validateForm = validateForm;
    contextRef.current.createFormData = createFormData;
    contextRef.current.setModified = setModified;
    contextRef.current.setProcessing = setProcessing;
    contextRef.current.setSubmitted = setSubmitted;
    contextRef.current.disabled = disabled;
    contextRef.current.formRef = formRef;
    contextRef.current.reset = reset;
    contextRef.current.replaceState = replaceState;
    contextRef.current.buildRowErrors = buildRowErrors;
    contextRef.current.addFieldRow = addFieldRow;
    contextRef.current.removeFieldRow = removeFieldRow;
    contextRef.current.replaceFieldRow = replaceFieldRow;
    (0, _react.useEffect)(()=>{
        if (typeof submittedFromProps === 'boolean') setSubmitted(submittedFromProps);
    }, [
        submittedFromProps
    ]);
    (0, _react.useEffect)(()=>{
        if (initialState) {
            contextRef.current = {
                ..._initContextState.default
            };
            dispatchFields({
                type: 'REPLACE_STATE',
                state: initialState
            });
        }
    }, [
        initialState,
        dispatchFields
    ]);
    (0, _react.useEffect)(()=>{
        if (initialData) {
            contextRef.current = {
                ..._initContextState.default
            };
            const builtState = (0, _buildInitialState.default)(initialData);
            setFormattedInitialData(builtState);
            dispatchFields({
                type: 'REPLACE_STATE',
                state: builtState
            });
        }
    }, [
        initialData,
        dispatchFields
    ]);
    (0, _useThrottledEffect.default)(()=>{
        refreshCookie();
    }, 15000, [
        fields
    ]);
    (0, _react.useEffect)(()=>{
        contextRef.current = {
            ...contextRef.current
        } // triggers rerender of all components that subscribe to form
        ;
        setModified(false);
    }, [
        locale
    ]);
    const classes = [
        className,
        baseClass
    ].filter(Boolean).join(' ');
    return /*#__PURE__*/ _react.default.createElement("form", {
        action: action,
        className: classes,
        method: method,
        noValidate: true,
        onSubmit: (e)=>contextRef.current.submit({}, e),
        ref: formRef
    }, /*#__PURE__*/ _react.default.createElement(_context.FormContext.Provider, {
        value: contextRef.current
    }, /*#__PURE__*/ _react.default.createElement(_context.FormWatchContext.Provider, {
        value: {
            fields,
            ...contextRef.current
        }
    }, /*#__PURE__*/ _react.default.createElement(_context.SubmittedContext.Provider, {
        value: submitted
    }, /*#__PURE__*/ _react.default.createElement(_context.ProcessingContext.Provider, {
        value: processing
    }, /*#__PURE__*/ _react.default.createElement(_context.ModifiedContext.Provider, {
        value: modified
    }, /*#__PURE__*/ _react.default.createElement(_context.FormFieldsContext.Provider, {
        value: fieldsReducer
    }, /*#__PURE__*/ _react.default.createElement(_WatchFormErrors.WatchFormErrors, {
        buildRowErrors: buildRowErrors
    }), children)))))));
};
const _default = Form;

//# sourceMappingURL=data:application/json;base64,