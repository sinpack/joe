"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
const _react = /*#__PURE__*/ _interop_require_wildcard(require("react"));
const _reacti18next = require("react-i18next");
const _types = require("../../../../fields/config/types");
const _getTranslation = require("../../../../utilities/getTranslation");
const _useIntersect = /*#__PURE__*/ _interop_require_default(require("../../../hooks/useIntersect"));
const _OperationProvider = require("../../utilities/OperationProvider");
const _RenderCustomComponent = /*#__PURE__*/ _interop_require_default(require("../../utilities/RenderCustomComponent"));
const _filterFields = require("./filterFields");
require("./index.scss");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
const baseClass = 'render-fields';
const intersectionObserverOptions = {
    rootMargin: '1000px'
};
/**
 * If you send `fields` through, it will render those fields explicitly
 * Otherwise, it will reduce your fields using the other provided props
 * This is so that we can conditionally render fields before reducing them, if desired
 * See the sidebar in '../collections/Edit/Default/index.tsx' for an example
 *
 * The state/data for the fields it renders is not managed by this component. Instead, every component it renders has
 * their own handling of their own value, usually through the useField hook. This hook will get the field's value
 * from the Form the field is in, using the field's path.
 *
 * Thus, if you would like to set the value of a field you render here, you must do so in the Form that contains the field, or in the
 * Field component itself.
 *
 * All this component does is render the field's Field Components, and pass them the props they need to function.
 **/ const RenderFields = (props)=>{
    const { className, fieldTypes, forceRender, margins } = props;
    const { i18n, t } = (0, _reacti18next.useTranslation)('general');
    const [hasRendered, setHasRendered] = (0, _react.useState)(Boolean(forceRender));
    const [intersectionRef, entry] = (0, _useIntersect.default)(intersectionObserverOptions, forceRender);
    const isIntersecting = Boolean(entry?.isIntersecting);
    const isAboveViewport = entry?.boundingClientRect?.top < 0;
    const shouldRender = forceRender || isIntersecting || isAboveViewport;
    const operation = (0, _OperationProvider.useOperation)();
    (0, _react.useEffect)(()=>{
        if (shouldRender && !hasRendered) {
            setHasRendered(true);
        }
    }, [
        shouldRender,
        hasRendered
    ]);
    let fieldsToRender = 'fields' in props ? props?.fields : null;
    if (!fieldsToRender && 'fieldSchema' in props) {
        const { fieldSchema, fieldTypes, filter, permissions, readOnly: readOnlyOverride } = props;
        fieldsToRender = (0, _filterFields.filterFields)({
            fieldSchema,
            fieldTypes,
            filter,
            operation,
            permissions,
            readOnly: readOnlyOverride
        });
    }
    if (fieldsToRender) {
        return /*#__PURE__*/ _react.default.createElement("div", {
            className: [
                baseClass,
                className,
                margins && `${baseClass}--margins-${margins}`,
                margins === false && `${baseClass}--margins-none`
            ].filter(Boolean).join(' '),
            ref: intersectionRef
        }, hasRendered && fieldsToRender.map((reducedField, fieldIndex)=>{
            const { FieldComponent, field, fieldIsPresentational, fieldPermissions, isFieldAffectingData, readOnly } = reducedField;
            if (fieldIsPresentational) {
                return /*#__PURE__*/ _react.default.createElement(FieldComponent, {
                    key: fieldIndex,
                    ...field
                });
            }
            if (field) {
                return /*#__PURE__*/ _react.default.createElement(_RenderCustomComponent.default, {
                    CustomComponent: field?.admin?.components?.Field,
                    DefaultComponent: FieldComponent,
                    componentProps: {
                        ...field,
                        admin: {
                            ...field.admin || {},
                            readOnly
                        },
                        fieldTypes,
                        forceRender,
                        indexPath: 'indexPath' in props ? `${props?.indexPath}.${fieldIndex}` : `${fieldIndex}`,
                        path: field.path || (isFieldAffectingData && 'name' in field ? field.name : ''),
                        permissions: fieldPermissions
                    },
                    key: fieldIndex
                });
            }
            return /*#__PURE__*/ _react.default.createElement("div", {
                className: "missing-field",
                key: fieldIndex
            }, t('error:noMatchedField', {
                label: (0, _types.fieldAffectsData)(field) ? (0, _getTranslation.getTranslation)(field.label || field.name, i18n) : field.path
            }));
        }));
    }
    return null;
};
const _default = RenderFields;

//# sourceMappingURL=data:application/json;base64,