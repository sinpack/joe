"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
const _react = require("react");
const _reacti18next = require("react-i18next");
const _useThrottledEffect = /*#__PURE__*/ _interop_require_default(require("../../../hooks/useThrottledEffect"));
const _Auth = require("../../utilities/Auth");
const _Config = require("../../utilities/Config");
const _DocumentInfo = require("../../utilities/DocumentInfo");
const _OperationProvider = require("../../utilities/OperationProvider");
const _context = require("../Form/context");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
/**
 * Get and set the value of a form field.
 *
 * @see https://payloadcms.com/docs/admin/hooks#usefield
 */ const useField = (options)=>{
    const { condition, disableFormData = false, hasRows, path, validate } = options;
    const submitted = (0, _context.useFormSubmitted)();
    const processing = (0, _context.useFormProcessing)();
    const { user } = (0, _Auth.useAuth)();
    const { id } = (0, _DocumentInfo.useDocumentInfo)();
    const operation = (0, _OperationProvider.useOperation)();
    const field = (0, _context.useFormFields)(([fields])=>fields[path]);
    const { t } = (0, _reacti18next.useTranslation)();
    const dispatchField = (0, _context.useFormFields)(([_, dispatch])=>dispatch);
    const config = (0, _Config.useConfig)();
    const { getData, getDataByPath, getSiblingData, setModified } = (0, _context.useForm)();
    const value = field?.value;
    const initialValue = field?.initialValue;
    const valid = typeof field?.valid === 'boolean' ? field.valid : true;
    const showError = valid === false && submitted;
    const prevValid = (0, _react.useRef)(valid);
    const prevValue = (0, _react.useRef)(value);
    // Method to return from `useField`, used to
    // update field values from field component(s)
    const setValue = (0, _react.useCallback)((e, disableModifyingForm = false)=>{
        const val = e && e.target ? e.target.value : e;
        if (!disableModifyingForm) {
            if (typeof setModified === 'function') {
                // Update modified state after field value comes back
                // to avoid cursor jump caused by state value / DOM mismatch
                setTimeout(()=>{
                    setModified(true);
                }, 10);
            }
        }
        dispatchField({
            type: 'UPDATE',
            disableFormData: disableFormData || hasRows && val > 0,
            path,
            value: val
        });
    }, [
        setModified,
        path,
        dispatchField,
        disableFormData,
        hasRows
    ]);
    // Store result from hook as ref
    // to prevent unnecessary rerenders
    const result = (0, _react.useMemo)(()=>({
            errorMessage: field?.errorMessage,
            formProcessing: processing,
            formSubmitted: submitted,
            initialValue,
            rows: field?.rows,
            setValue,
            showError,
            valid: field?.valid,
            value
        }), [
        field?.errorMessage,
        field?.rows,
        field?.valid,
        processing,
        setValue,
        showError,
        submitted,
        value,
        initialValue
    ]);
    // Throttle the validate function
    (0, _useThrottledEffect.default)(()=>{
        const validateField = async ()=>{
            let valueToValidate = value;
            if (field?.rows && Array.isArray(field.rows)) {
                valueToValidate = getDataByPath(path);
            }
            let errorMessage;
            let valid = false;
            const validationResult = typeof validate === 'function' ? await validate(valueToValidate, {
                id,
                config,
                data: getData(),
                operation,
                previousValue: prevValue.current,
                siblingData: getSiblingData(path),
                t,
                user
            }) : true;
            if (typeof validationResult === 'string') {
                errorMessage = validationResult;
                valid = false;
            } else {
                valid = validationResult;
                errorMessage = undefined;
            }
            // Only dispatch if the validation result has changed
            // This will prevent unnecessary rerenders
            if (valid !== prevValid.current) {
                prevValid.current = valid;
                if (typeof dispatchField === 'function') {
                    dispatchField({
                        type: 'UPDATE',
                        condition,
                        disableFormData: disableFormData || (hasRows ? typeof value === 'number' && value > 0 : false),
                        errorMessage,
                        path,
                        previousValue: prevValue.current,
                        rows: field?.rows,
                        valid,
                        validate,
                        value
                    });
                }
            }
        };
        void validateField();
    }, 150, [
        value,
        condition,
        disableFormData,
        dispatchField,
        getData,
        getSiblingData,
        getDataByPath,
        id,
        operation,
        path,
        user,
        validate,
        field?.rows
    ]);
    return result;
};
const _default = useField;

//# sourceMappingURL=data:application/json;base64,