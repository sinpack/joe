"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
const _react = /*#__PURE__*/ _interop_require_wildcard(require("react"));
const _reacti18next = require("react-i18next");
const _types = require("../../../../../fields/config/types");
const _getTranslation = require("../../../../../utilities/getTranslation");
const _toKebabCase = /*#__PURE__*/ _interop_require_default(require("../../../../../utilities/toKebabCase"));
const _provider = require("../../../elements/Collapsible/provider");
const _ErrorPill = require("../../../elements/ErrorPill");
const _DocumentInfo = require("../../../utilities/DocumentInfo");
const _Preferences = require("../../../utilities/Preferences");
const _FieldDescription = /*#__PURE__*/ _interop_require_default(require("../../FieldDescription"));
const _context = require("../../Form/context");
const _createNestedFieldPath = require("../../Form/createNestedFieldPath");
const _RenderFields = /*#__PURE__*/ _interop_require_default(require("../../RenderFields"));
const _WatchChildErrors = require("../../WatchChildErrors");
const _withCondition = /*#__PURE__*/ _interop_require_default(require("../../withCondition"));
const _shared = require("../shared");
require("./index.scss");
const _provider1 = require("./provider");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
const baseClass = 'tabs-field';
const TabComponent = ({ isActive, parentPath, setIsActive, tab })=>{
    const { i18n } = (0, _reacti18next.useTranslation)();
    const [errorCount, setErrorCount] = (0, _react.useState)(undefined);
    const hasName = (0, _types.tabHasName)(tab);
    const submitted = (0, _context.useFormSubmitted)();
    const pathSegments = [];
    if (parentPath) pathSegments.push(parentPath);
    if (hasName) pathSegments.push(tab.name);
    const path = pathSegments.join('.');
    const tabHasErrors = submitted && errorCount > 0;
    return /*#__PURE__*/ _react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/ _react.default.createElement(_WatchChildErrors.WatchChildErrors, {
        fieldSchema: hasName ? undefined : tab.fields,
        path: path,
        setErrorCount: setErrorCount
    }), /*#__PURE__*/ _react.default.createElement("button", {
        className: [
            `${baseClass}__tab-button`,
            tabHasErrors && `${baseClass}__tab-button--has-error`,
            isActive && `${baseClass}__tab-button--active`
        ].filter(Boolean).join(' '),
        onClick: setIsActive,
        type: "button"
    }, tab.label ? (0, _getTranslation.getTranslation)(tab.label, i18n) : hasName && tab.name, tabHasErrors && /*#__PURE__*/ _react.default.createElement(_ErrorPill.ErrorPill, {
        count: errorCount
    })));
};
const TabsField = (props)=>{
    const { admin: { className, readOnly }, fieldTypes, forceRender = false, indexPath, path, permissions, tabs } = props;
    const { getPreference, setPreference } = (0, _Preferences.usePreferences)();
    const { preferencesKey } = (0, _DocumentInfo.useDocumentInfo)();
    const { i18n } = (0, _reacti18next.useTranslation)();
    const { withinCollapsible } = (0, _provider.useCollapsible)();
    const [activeTabIndex, setActiveTabIndex] = (0, _react.useState)(0);
    const tabsPrefKey = `tabs-${indexPath}`;
    (0, _react.useEffect)(()=>{
        if (preferencesKey) {
            const getInitialPref = async ()=>{
                const existingPreferences = await getPreference(preferencesKey);
                const initialIndex = path ? existingPreferences?.fields?.[path]?.tabIndex : existingPreferences?.fields?.[tabsPrefKey]?.tabIndex;
                setActiveTabIndex(initialIndex || 0);
            };
            void getInitialPref();
        }
    }, [
        path,
        indexPath,
        getPreference,
        preferencesKey,
        tabsPrefKey
    ]);
    const handleTabChange = (0, _react.useCallback)(async (incomingTabIndex)=>{
        setActiveTabIndex(incomingTabIndex);
        const existingPreferences = await getPreference(preferencesKey);
        if (preferencesKey) {
            await setPreference(preferencesKey, {
                ...existingPreferences,
                ...path ? {
                    fields: {
                        ...existingPreferences?.fields || {},
                        [path]: {
                            ...existingPreferences?.fields?.[path],
                            tabIndex: incomingTabIndex
                        }
                    }
                } : {
                    fields: {
                        ...existingPreferences?.fields,
                        [tabsPrefKey]: {
                            ...existingPreferences?.fields?.[tabsPrefKey],
                            tabIndex: incomingTabIndex
                        }
                    }
                }
            });
        }
    }, [
        preferencesKey,
        getPreference,
        setPreference,
        path,
        tabsPrefKey
    ]);
    const activeTabConfig = tabs[activeTabIndex];
    return /*#__PURE__*/ _react.default.createElement("div", {
        className: [
            _shared.fieldBaseClass,
            className,
            baseClass,
            withinCollapsible && `${baseClass}--within-collapsible`
        ].filter(Boolean).join(' ')
    }, /*#__PURE__*/ _react.default.createElement(_provider1.TabsProvider, null, /*#__PURE__*/ _react.default.createElement("div", {
        className: `${baseClass}__tabs-wrap`
    }, /*#__PURE__*/ _react.default.createElement("div", {
        className: `${baseClass}__tabs`
    }, tabs.map((tab, tabIndex)=>{
        return /*#__PURE__*/ _react.default.createElement(TabComponent, {
            isActive: activeTabIndex === tabIndex,
            key: tabIndex,
            parentPath: path,
            setIsActive: ()=>handleTabChange(tabIndex),
            tab: tab
        });
    }))), /*#__PURE__*/ _react.default.createElement("div", {
        className: `${baseClass}__content-wrap`
    }, activeTabConfig && /*#__PURE__*/ _react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/ _react.default.createElement("div", {
        className: [
            `${baseClass}__tab`,
            activeTabConfig.label && `${baseClass}__tabConfigLabel-${(0, _toKebabCase.default)((0, _getTranslation.getTranslation)(activeTabConfig.label, i18n))}`
        ].filter(Boolean).join(' ')
    }, /*#__PURE__*/ _react.default.createElement(_FieldDescription.default, {
        className: `${baseClass}__description`,
        description: activeTabConfig.description,
        marginPlacement: "bottom",
        path: path
    }), /*#__PURE__*/ _react.default.createElement(_RenderFields.default, {
        fieldSchema: activeTabConfig.fields.map((field)=>{
            const pathSegments = [];
            if (path) pathSegments.push(path);
            if ((0, _types.tabHasName)(activeTabConfig)) pathSegments.push(activeTabConfig.name);
            return {
                ...field,
                path: (0, _createNestedFieldPath.createNestedFieldPath)(pathSegments.join('.'), field)
            };
        }),
        fieldTypes: fieldTypes,
        forceRender: forceRender,
        indexPath: indexPath,
        key: activeTabConfig.label ? (0, _getTranslation.getTranslation)(activeTabConfig.label, i18n) : activeTabConfig['name'],
        margins: "small",
        permissions: (0, _types.tabHasName)(activeTabConfig) && permissions?.[activeTabConfig.name] ? permissions[activeTabConfig.name].fields : permissions,
        readOnly: readOnly
    }))))));
};
const _default = (0, _withCondition.default)(TabsField);

//# sourceMappingURL=data:application/json;base64,