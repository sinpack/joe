"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "BlockRow", {
    enumerable: true,
    get: function() {
        return BlockRow;
    }
});
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _reacti18next = require("react-i18next");
const _getTranslation = require("../../../../../utilities/getTranslation");
const _Collapsible = require("../../../elements/Collapsible");
const _ErrorPill = require("../../../elements/ErrorPill");
const _Pill = /*#__PURE__*/ _interop_require_default(require("../../../elements/Pill"));
const _context = require("../../Form/context");
const _createNestedFieldPath = require("../../Form/createNestedFieldPath");
const _RenderFields = /*#__PURE__*/ _interop_require_default(require("../../RenderFields"));
const _HiddenInput = /*#__PURE__*/ _interop_require_default(require("../HiddenInput"));
const _RowActions = require("./RowActions");
const _SectionTitle = /*#__PURE__*/ _interop_require_default(require("./SectionTitle"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const baseClass = 'blocks-field';
const BlockRow = ({ addRow, attributes, blockToRender, blocks, duplicateRow, fieldTypes, forceRender, hasMaxRows, indexPath, isSortable, labels, listeners, moveRow, path: parentPath, permissions, readOnly, removeRow, row, rowCount, rowIndex, setCollapse, setNodeRef, transform })=>{
    const path = `${parentPath}.${rowIndex}`;
    const { i18n } = (0, _reacti18next.useTranslation)();
    const hasSubmitted = (0, _context.useFormSubmitted)();
    const childErrorPathsCount = row.childErrorPaths?.size;
    const fieldHasErrors = hasSubmitted && childErrorPathsCount > 0;
    const classNames = [
        `${baseClass}__row`,
        fieldHasErrors ? `${baseClass}__row--has-errors` : `${baseClass}__row--no-errors`
    ].filter(Boolean).join(' ');
    return /*#__PURE__*/ _react.default.createElement("div", {
        id: `${parentPath.split('.').join('-')}-row-${rowIndex}`,
        key: `${parentPath}-row-${rowIndex}`,
        ref: setNodeRef,
        style: {
            transform
        }
    }, /*#__PURE__*/ _react.default.createElement(_Collapsible.Collapsible, {
        actions: !readOnly ? /*#__PURE__*/ _react.default.createElement(_RowActions.RowActions, {
            addRow: addRow,
            blockType: row.blockType,
            blocks: blocks,
            duplicateRow: duplicateRow,
            hasMaxRows: hasMaxRows,
            isSortable: isSortable,
            labels: labels,
            moveRow: moveRow,
            removeRow: removeRow,
            rowCount: rowCount,
            rowIndex: rowIndex
        }) : undefined,
        className: classNames,
        collapsed: row.collapsed,
        collapsibleStyle: fieldHasErrors ? 'error' : 'default',
        dragHandleProps: isSortable ? {
            id: row.id,
            attributes,
            listeners
        } : undefined,
        header: /*#__PURE__*/ _react.default.createElement("div", {
            className: `${baseClass}__block-header`
        }, /*#__PURE__*/ _react.default.createElement("span", {
            className: `${baseClass}__block-number`
        }, String(rowIndex + 1).padStart(2, '0')), /*#__PURE__*/ _react.default.createElement(_Pill.default, {
            className: `${baseClass}__block-pill ${baseClass}__block-pill-${row.blockType}`,
            pillStyle: "white"
        }, (0, _getTranslation.getTranslation)(blockToRender.labels.singular, i18n)), /*#__PURE__*/ _react.default.createElement(_SectionTitle.default, {
            path: `${path}.blockName`,
            readOnly: readOnly
        }), fieldHasErrors && /*#__PURE__*/ _react.default.createElement(_ErrorPill.ErrorPill, {
            count: childErrorPathsCount,
            withMessage: true
        })),
        key: row.id,
        onToggle: (collapsed)=>setCollapse(row.id, collapsed)
    }, /*#__PURE__*/ _react.default.createElement(_HiddenInput.default, {
        name: `${path}.id`,
        value: row.id
    }), /*#__PURE__*/ _react.default.createElement(_RenderFields.default, {
        className: `${baseClass}__fields`,
        fieldSchema: blockToRender.fields.map((field)=>({
                ...field,
                path: (0, _createNestedFieldPath.createNestedFieldPath)(path, field)
            })),
        fieldTypes: fieldTypes,
        forceRender: forceRender,
        indexPath: indexPath,
        margins: "small",
        permissions: permissions?.blocks?.[row.blockType]?.fields,
        readOnly: readOnly
    })));
};

//# sourceMappingURL=data:application/json;base64,