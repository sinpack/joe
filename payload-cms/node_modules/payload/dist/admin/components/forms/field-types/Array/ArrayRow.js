"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "ArrayRow", {
    enumerable: true,
    get: function() {
        return ArrayRow;
    }
});
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _reacti18next = require("react-i18next");
const _getTranslation = require("../../../../../utilities/getTranslation");
const _ArrayAction = require("../../../elements/ArrayAction");
const _Collapsible = require("../../../elements/Collapsible");
const _ErrorPill = require("../../../elements/ErrorPill");
const _context = require("../../Form/context");
const _createNestedFieldPath = require("../../Form/createNestedFieldPath");
const _RenderFields = /*#__PURE__*/ _interop_require_default(require("../../RenderFields"));
const _RowLabel = require("../../RowLabel");
const _HiddenInput = /*#__PURE__*/ _interop_require_default(require("../HiddenInput"));
require("./index.scss");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const baseClass = 'array-field';
const ArrayRow = ({ CustomRowLabel, addRow, attributes, duplicateRow, fieldTypes, fields, forceRender = false, hasMaxRows, indexPath, isSortable, labels, listeners, moveRow, path: parentPath, permissions, readOnly, removeRow, row, rowCount, rowIndex, setCollapse, setNodeRef, transform })=>{
    const path = `${parentPath}.${rowIndex}`;
    const { i18n } = (0, _reacti18next.useTranslation)();
    const hasSubmitted = (0, _context.useFormSubmitted)();
    const fallbackLabel = `${(0, _getTranslation.getTranslation)(labels.singular, i18n)} ${String(rowIndex + 1).padStart(2, '0')}`;
    const childErrorPathsCount = row.childErrorPaths?.size;
    const fieldHasErrors = hasSubmitted && childErrorPathsCount > 0;
    const classNames = [
        `${baseClass}__row`,
        fieldHasErrors ? `${baseClass}__row--has-errors` : `${baseClass}__row--no-errors`
    ].filter(Boolean).join(' ');
    return /*#__PURE__*/ _react.default.createElement("div", {
        id: `${parentPath.split('.').join('-')}-row-${rowIndex}`,
        key: `${parentPath}-row-${row.id}`,
        ref: setNodeRef,
        style: {
            transform
        }
    }, /*#__PURE__*/ _react.default.createElement(_Collapsible.Collapsible, {
        actions: !readOnly ? /*#__PURE__*/ _react.default.createElement(_ArrayAction.ArrayAction, {
            addRow: addRow,
            duplicateRow: duplicateRow,
            hasMaxRows: hasMaxRows,
            index: rowIndex,
            isSortable: isSortable,
            moveRow: moveRow,
            removeRow: removeRow,
            rowCount: rowCount
        }) : undefined,
        className: classNames,
        collapsed: row.collapsed,
        collapsibleStyle: fieldHasErrors ? 'error' : 'default',
        dragHandleProps: isSortable ? {
            id: row.id,
            attributes,
            listeners
        } : undefined,
        header: /*#__PURE__*/ _react.default.createElement("div", {
            className: `${baseClass}__row-header`
        }, /*#__PURE__*/ _react.default.createElement(_RowLabel.RowLabel, {
            label: CustomRowLabel || fallbackLabel,
            path: path,
            rowNumber: rowIndex + 1
        }), fieldHasErrors && /*#__PURE__*/ _react.default.createElement(_ErrorPill.ErrorPill, {
            count: childErrorPathsCount,
            withMessage: true
        })),
        onToggle: (collapsed)=>setCollapse(row.id, collapsed)
    }, /*#__PURE__*/ _react.default.createElement(_HiddenInput.default, {
        name: `${path}.id`,
        value: row.id
    }), /*#__PURE__*/ _react.default.createElement(_RenderFields.default, {
        className: `${baseClass}__fields`,
        fieldSchema: fields.map((field)=>({
                ...field,
                path: (0, _createNestedFieldPath.createNestedFieldPath)(path, field)
            })),
        fieldTypes: fieldTypes,
        forceRender: forceRender,
        indexPath: indexPath,
        margins: "small",
        permissions: permissions?.fields,
        readOnly: readOnly
    })));
};

//# sourceMappingURL=data:application/json;base64,