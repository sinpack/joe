"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    fieldBaseClass: function() {
        return fieldBaseClass;
    },
    isFieldRTL: function() {
        return isFieldRTL;
    }
});
const fieldBaseClass = 'field-type';
function isFieldRTL({ fieldLocalized, fieldRTL, locale, localizationConfig }) {
    const hasMultipleLocales = locale && localizationConfig && localizationConfig.locales && localizationConfig.locales.length > 1;
    const isCurrentLocaleDefaultLocale = locale?.code === localizationConfig?.defaultLocale;
    return fieldRTL !== false && locale?.rtl === true && (fieldLocalized || !fieldLocalized && !hasMultipleLocales || // If there is only one locale which is also rtl, that field is rtl too
    !fieldLocalized && isCurrentLocaleDefaultLocale) || // If the current locale is the default locale, but the field is not localized, that field is rtl too
    fieldRTL === true // If fieldRTL is true. This should be useful for when no localization is set at all in the payload config, but you still want fields to be rtl.
    ;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9hZG1pbi9jb21wb25lbnRzL2Zvcm1zL2ZpZWxkLXR5cGVzL3NoYXJlZC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IExvY2FsZSwgU2FuaXRpemVkTG9jYWxpemF0aW9uQ29uZmlnIH0gZnJvbSAnLi4vLi4vLi4vLi4vY29uZmlnL3R5cGVzJ1xuXG5leHBvcnQgY29uc3QgZmllbGRCYXNlQ2xhc3MgPSAnZmllbGQtdHlwZSdcblxuLyoqXG4gKiBEZXRlcm1pbmVzIHdoZXRoZXIgYSBmaWVsZCBzaG91bGQgYmUgZGlzcGxheWVkIGFzIHJpZ2h0LXRvLWxlZnQgKFJUTCkgYmFzZWQgb24gaXRzIGNvbmZpZ3VyYXRpb24sIHBheWxvYWQncyBsb2NhbGl6YXRpb24gY29uZmlndXJhdGlvbiBhbmQgdGhlIGFkbWluZyB1c2VyJ3MgY3VycmVudGx5IGVuYWJsZWQgbG9jYWxlLlxuXG4gKiBAcmV0dXJucyBXaGV0aGVyIHRoZSBmaWVsZCBzaG91bGQgYmUgZGlzcGxheWVkIGFzIFJUTC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzRmllbGRSVEwoe1xuICBmaWVsZExvY2FsaXplZCxcbiAgZmllbGRSVEwsXG4gIGxvY2FsZSxcbiAgbG9jYWxpemF0aW9uQ29uZmlnLFxufToge1xuICBmaWVsZExvY2FsaXplZDogYm9vbGVhblxuICBmaWVsZFJUTDogYm9vbGVhblxuICBsb2NhbGU6IExvY2FsZVxuICBsb2NhbGl6YXRpb25Db25maWc/OiBTYW5pdGl6ZWRMb2NhbGl6YXRpb25Db25maWdcbn0pIHtcbiAgY29uc3QgaGFzTXVsdGlwbGVMb2NhbGVzID1cbiAgICBsb2NhbGUgJiZcbiAgICBsb2NhbGl6YXRpb25Db25maWcgJiZcbiAgICBsb2NhbGl6YXRpb25Db25maWcubG9jYWxlcyAmJlxuICAgIGxvY2FsaXphdGlvbkNvbmZpZy5sb2NhbGVzLmxlbmd0aCA+IDFcbiAgY29uc3QgaXNDdXJyZW50TG9jYWxlRGVmYXVsdExvY2FsZSA9IGxvY2FsZT8uY29kZSA9PT0gbG9jYWxpemF0aW9uQ29uZmlnPy5kZWZhdWx0TG9jYWxlXG5cbiAgcmV0dXJuIChcbiAgICAoZmllbGRSVEwgIT09IGZhbHNlICYmXG4gICAgICBsb2NhbGU/LnJ0bCA9PT0gdHJ1ZSAmJlxuICAgICAgKGZpZWxkTG9jYWxpemVkIHx8XG4gICAgICAgICghZmllbGRMb2NhbGl6ZWQgJiYgIWhhc011bHRpcGxlTG9jYWxlcykgfHwgLy8gSWYgdGhlcmUgaXMgb25seSBvbmUgbG9jYWxlIHdoaWNoIGlzIGFsc28gcnRsLCB0aGF0IGZpZWxkIGlzIHJ0bCB0b29cbiAgICAgICAgKCFmaWVsZExvY2FsaXplZCAmJiBpc0N1cnJlbnRMb2NhbGVEZWZhdWx0TG9jYWxlKSkpIHx8IC8vIElmIHRoZSBjdXJyZW50IGxvY2FsZSBpcyB0aGUgZGVmYXVsdCBsb2NhbGUsIGJ1dCB0aGUgZmllbGQgaXMgbm90IGxvY2FsaXplZCwgdGhhdCBmaWVsZCBpcyBydGwgdG9vXG4gICAgZmllbGRSVEwgPT09IHRydWVcbiAgKSAvLyBJZiBmaWVsZFJUTCBpcyB0cnVlLiBUaGlzIHNob3VsZCBiZSB1c2VmdWwgZm9yIHdoZW4gbm8gbG9jYWxpemF0aW9uIGlzIHNldCBhdCBhbGwgaW4gdGhlIHBheWxvYWQgY29uZmlnLCBidXQgeW91IHN0aWxsIHdhbnQgZmllbGRzIHRvIGJlIHJ0bC5cbn1cbiJdLCJuYW1lcyI6WyJmaWVsZEJhc2VDbGFzcyIsImlzRmllbGRSVEwiLCJmaWVsZExvY2FsaXplZCIsImZpZWxkUlRMIiwibG9jYWxlIiwibG9jYWxpemF0aW9uQ29uZmlnIiwiaGFzTXVsdGlwbGVMb2NhbGVzIiwibG9jYWxlcyIsImxlbmd0aCIsImlzQ3VycmVudExvY2FsZURlZmF1bHRMb2NhbGUiLCJjb2RlIiwiZGVmYXVsdExvY2FsZSIsInJ0bCJdLCJyYW5nZU1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7SUFFYUEsY0FBYztlQUFkQTs7SUFPR0MsVUFBVTtlQUFWQTs7O0FBUFQsTUFBTUQsaUJBQWlCO0FBT3ZCLFNBQVNDLFdBQVcsRUFDekJDLGNBQWMsRUFDZEMsUUFBUSxFQUNSQyxNQUFNLEVBQ05DLGtCQUFrQixFQU1uQjtJQUNDLE1BQU1DLHFCQUNKRixVQUNBQyxzQkFDQUEsbUJBQW1CRSxPQUFPLElBQzFCRixtQkFBbUJFLE9BQU8sQ0FBQ0MsTUFBTSxHQUFHO0lBQ3RDLE1BQU1DLCtCQUErQkwsUUFBUU0sU0FBU0wsb0JBQW9CTTtJQUUxRSxPQUNFLEFBQUNSLGFBQWEsU0FDWkMsUUFBUVEsUUFBUSxRQUNmVixDQUFBQSxrQkFDRSxDQUFDQSxrQkFBa0IsQ0FBQ0ksc0JBQXVCLHVFQUF1RTtJQUNsSCxDQUFDSixrQkFBa0JPLDRCQUE0QixLQUFPLHFHQUFxRztJQUNoS04sYUFBYSxLQUNiLGdKQUFnSjs7QUFDcEoifQ==