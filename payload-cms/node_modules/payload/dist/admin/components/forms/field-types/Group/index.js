"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _reacti18next = require("react-i18next");
const _getTranslation = require("../../../../../utilities/getTranslation");
const _provider = require("../../../elements/Collapsible/provider");
const _ErrorPill = require("../../../elements/ErrorPill");
const _FieldDescription = /*#__PURE__*/ _interop_require_default(require("../../FieldDescription"));
const _context = require("../../Form/context");
const _createNestedFieldPath = require("../../Form/createNestedFieldPath");
const _RenderFields = /*#__PURE__*/ _interop_require_default(require("../../RenderFields"));
const _WatchChildErrors = require("../../WatchChildErrors");
const _withCondition = /*#__PURE__*/ _interop_require_default(require("../../withCondition"));
const _provider1 = require("../Row/provider");
const _provider2 = require("../Tabs/provider");
const _shared = require("../shared");
require("./index.scss");
const _provider3 = require("./provider");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const baseClass = 'group-field';
const Group = (props)=>{
    const { name, admin: { className, description, hideGutter = false, readOnly, style, width }, fieldTypes, fields, forceRender = false, indexPath, label, path: pathFromProps, permissions } = props;
    const { withinCollapsible } = (0, _provider.useCollapsible)();
    const isWithinGroup = (0, _provider3.useGroup)();
    const isWithinRow = (0, _provider1.useRow)();
    const isWithinTab = (0, _provider2.useTabs)();
    const { i18n } = (0, _reacti18next.useTranslation)();
    const submitted = (0, _context.useFormSubmitted)();
    const [errorCount, setErrorCount] = _react.default.useState(undefined);
    const groupHasErrors = submitted && errorCount > 0;
    const path = pathFromProps || name;
    const isTopLevel = !(withinCollapsible || isWithinGroup || isWithinRow);
    return /*#__PURE__*/ _react.default.createElement("div", {
        className: [
            _shared.fieldBaseClass,
            baseClass,
            isTopLevel && `${baseClass}--top-level`,
            withinCollapsible && `${baseClass}--within-collapsible`,
            isWithinGroup && `${baseClass}--within-group`,
            isWithinRow && `${baseClass}--within-row`,
            isWithinTab && `${baseClass}--within-tab`,
            !hideGutter && isWithinGroup && `${baseClass}--gutter`,
            groupHasErrors && `${baseClass}--has-error`,
            className
        ].filter(Boolean).join(' '),
        id: `field-${path.replace(/\./g, '__')}`,
        style: {
            ...style,
            width
        }
    }, /*#__PURE__*/ _react.default.createElement(_WatchChildErrors.WatchChildErrors, {
        fieldSchema: fields,
        path: path,
        setErrorCount: setErrorCount
    }), /*#__PURE__*/ _react.default.createElement(_provider3.GroupProvider, null, /*#__PURE__*/ _react.default.createElement("div", {
        className: `${baseClass}__wrap`
    }, /*#__PURE__*/ _react.default.createElement("div", {
        className: `${baseClass}__header`
    }, (label || description) && /*#__PURE__*/ _react.default.createElement("header", null, label && /*#__PURE__*/ _react.default.createElement("h3", {
        className: `${baseClass}__title`
    }, (0, _getTranslation.getTranslation)(label, i18n)), /*#__PURE__*/ _react.default.createElement(_FieldDescription.default, {
        className: `field-description-${path.replace(/\./g, '__')}`,
        description: description,
        path: path,
        value: null
    })), groupHasErrors && /*#__PURE__*/ _react.default.createElement(_ErrorPill.ErrorPill, {
        count: errorCount,
        withMessage: true
    })), /*#__PURE__*/ _react.default.createElement(_RenderFields.default, {
        fieldSchema: fields.map((subField)=>({
                ...subField,
                path: (0, _createNestedFieldPath.createNestedFieldPath)(path, subField)
            })),
        fieldTypes: fieldTypes,
        forceRender: forceRender,
        indexPath: indexPath,
        margins: "small",
        permissions: permissions?.fields,
        readOnly: readOnly
    }))));
};
const _default = (0, _withCondition.default)(Group);

//# sourceMappingURL=data:application/json;base64,