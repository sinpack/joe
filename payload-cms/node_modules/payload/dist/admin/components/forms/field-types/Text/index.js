"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
const _react = /*#__PURE__*/ _interop_require_wildcard(require("react"));
const _validations = require("../../../../../fields/validations");
const _Config = require("../../../utilities/Config");
const _Locale = require("../../../utilities/Locale");
const _useField = /*#__PURE__*/ _interop_require_default(require("../../useField"));
const _withCondition = /*#__PURE__*/ _interop_require_default(require("../../withCondition"));
const _shared = require("../shared");
const _Input = /*#__PURE__*/ _interop_require_default(require("./Input"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
const Text = (props)=>{
    const { name, admin: { className, components: { Error, Label, afterInput, beforeInput } = {}, condition, description, placeholder, readOnly, rtl, style, width } = {}, hasMany, inputRef, label, localized, maxLength, maxRows, minLength, minRows, path: pathFromProps, required, validate = _validations.text } = props;
    const path = pathFromProps || name;
    const locale = (0, _Locale.useLocale)();
    const { localization } = (0, _Config.useConfig)();
    const isRTL = (0, _shared.isFieldRTL)({
        fieldLocalized: localized,
        fieldRTL: rtl,
        locale,
        localizationConfig: localization || undefined
    });
    const memoizedValidate = (0, _react.useCallback)((value, options)=>{
        return validate(value, {
            ...options,
            maxLength,
            minLength,
            required
        });
    }, [
        validate,
        minLength,
        maxLength,
        required
    ]);
    const { errorMessage, setValue, showError, value } = (0, _useField.default)({
        condition,
        path,
        validate: memoizedValidate
    });
    const handleOnChange = (e)=>{
        setValue(e.target.value);
    };
    const handleHasManyChange = (0, _react.useCallback)((selectedOption)=>{
        if (!readOnly) {
            let newValue;
            if (!selectedOption) {
                newValue = [];
            } else if (Array.isArray(selectedOption)) {
                newValue = selectedOption.map((option)=>option.value?.value || option.value);
            } else {
                newValue = [
                    selectedOption.value?.value || selectedOption.value
                ];
            }
            setValue(newValue);
        }
    }, [
        readOnly,
        setValue
    ]);
    const [valueToRender, setValueToRender] = (0, _react.useState)([]) // Only for hasMany
    ;
    // useeffect update valueToRender:
    (0, _react.useEffect)(()=>{
        if (hasMany && Array.isArray(value)) {
            setValueToRender(value.map((val, index)=>{
                return {
                    id: `${val}${index}`,
                    label: `${val}`,
                    value: {
                        toString: ()=>`${val}${index}`,
                        value: val?.value || val
                    }
                };
            }));
        }
    }, [
        value,
        hasMany
    ]);
    return /*#__PURE__*/ _react.default.createElement(_Input.default, {
        Error: Error,
        Label: Label,
        afterInput: afterInput,
        beforeInput: beforeInput,
        className: className,
        description: description,
        errorMessage: errorMessage,
        hasMany: hasMany,
        inputRef: inputRef,
        label: label,
        maxRows: maxRows,
        minRows: minRows,
        name: name,
        onChange: hasMany ? handleHasManyChange : handleOnChange,
        path: path,
        placeholder: placeholder,
        readOnly: readOnly,
        required: required,
        rtl: isRTL,
        showError: showError,
        style: style,
        value: value,
        valueToRender: valueToRender,
        width: width
    });
};
const _default = (0, _withCondition.default)(Text);

//# sourceMappingURL=data:application/json;base64,