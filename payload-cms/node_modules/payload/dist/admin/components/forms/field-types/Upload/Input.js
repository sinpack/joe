"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
const _react = /*#__PURE__*/ _interop_require_wildcard(require("react"));
const _reacti18next = require("react-i18next");
const _getTranslation = require("../../../../../utilities/getTranslation");
const _Button = /*#__PURE__*/ _interop_require_default(require("../../../elements/Button"));
const _DocumentDrawer = require("../../../elements/DocumentDrawer");
const _FileDetails = /*#__PURE__*/ _interop_require_default(require("../../../elements/FileDetails"));
const _ListDrawer = require("../../../elements/ListDrawer");
const _GetFilterOptions = require("../../../utilities/GetFilterOptions");
const _Error = /*#__PURE__*/ _interop_require_default(require("../../Error"));
const _FieldDescription = /*#__PURE__*/ _interop_require_default(require("../../FieldDescription"));
const _Label = /*#__PURE__*/ _interop_require_default(require("../../Label"));
const _shared = require("../shared");
require("./index.scss");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
const baseClass = 'upload';
const UploadInput = (props)=>{
    const { Error, Label, api = '/api', className, collection, description, errorMessage, filterOptions, label, onChange, path, readOnly, relationTo, required, serverURL = 'http://localhost:3000', showError, style, value, width } = props;
    const { i18n, t } = (0, _reacti18next.useTranslation)('fields');
    const ErrorComp = Error || _Error.default;
    const LabelComp = Label || _Label.default;
    const [file, setFile] = (0, _react.useState)(undefined);
    const [missingFile, setMissingFile] = (0, _react.useState)(false);
    const [collectionSlugs] = (0, _react.useState)([
        collection?.slug
    ]);
    const [filterOptionsResult, setFilterOptionsResult] = (0, _react.useState)();
    const [DocumentDrawer, DocumentDrawerToggler, { closeDrawer }] = (0, _DocumentDrawer.useDocumentDrawer)({
        collectionSlug: collectionSlugs[0]
    });
    const [ListDrawer, ListDrawerToggler, { closeDrawer: closeListDrawer }] = (0, _ListDrawer.useListDrawer)({
        collectionSlugs,
        filterOptions: filterOptionsResult
    });
    (0, _react.useEffect)(()=>{
        if (value !== null && typeof value !== 'undefined' && value !== '') {
            const fetchFile = async ()=>{
                const response = await fetch(`${serverURL}${api}/${relationTo}/${value}`, {
                    credentials: 'include',
                    headers: {
                        'Accept-Language': i18n.language
                    }
                });
                if (response.ok) {
                    const json = await response.json();
                    setFile(json);
                } else {
                    setMissingFile(true);
                    setFile(undefined);
                }
            };
            fetchFile();
        } else {
            setFile(undefined);
        }
    }, [
        value,
        relationTo,
        api,
        serverURL,
        i18n
    ]);
    const onSave = (0, _react.useCallback)((args)=>{
        setMissingFile(false);
        onChange(args.doc);
        closeDrawer();
    }, [
        onChange,
        closeDrawer
    ]);
    const onSelect = (0, _react.useCallback)((args)=>{
        setMissingFile(false);
        onChange({
            id: args.docID
        });
        closeListDrawer();
    }, [
        onChange,
        closeListDrawer
    ]);
    return /*#__PURE__*/ _react.default.createElement("div", {
        className: [
            _shared.fieldBaseClass,
            baseClass,
            className,
            `field-${path.replace(/\./g, '__')}`,
            showError && 'error',
            readOnly && 'read-only'
        ].filter(Boolean).join(' '),
        style: {
            ...style,
            width
        }
    }, /*#__PURE__*/ _react.default.createElement(_GetFilterOptions.GetFilterOptions, {
        filterOptions,
        filterOptionsResult,
        path,
        relationTo,
        setFilterOptionsResult
    }), /*#__PURE__*/ _react.default.createElement(ErrorComp, {
        message: errorMessage,
        showError: showError
    }), /*#__PURE__*/ _react.default.createElement(LabelComp, {
        htmlFor: `field-${path.replace(/\./g, '__')}`,
        label: label,
        required: required
    }), collection?.upload && /*#__PURE__*/ _react.default.createElement(_react.default.Fragment, null, file && !missingFile && /*#__PURE__*/ _react.default.createElement(_FileDetails.default, {
        collection: collection,
        doc: file,
        handleRemove: readOnly ? undefined : ()=>{
            onChange(null);
        }
    }), (!file || missingFile) && /*#__PURE__*/ _react.default.createElement("div", {
        className: `${baseClass}__wrap`
    }, /*#__PURE__*/ _react.default.createElement("div", {
        className: `${baseClass}__buttons`
    }, /*#__PURE__*/ _react.default.createElement(DocumentDrawerToggler, {
        className: `${baseClass}__toggler`,
        disabled: readOnly
    }, /*#__PURE__*/ _react.default.createElement(_Button.default, {
        buttonStyle: "secondary",
        disabled: readOnly,
        el: "div"
    }, t('uploadNewLabel', {
        label: (0, _getTranslation.getTranslation)(collection.labels.singular, i18n)
    }))), /*#__PURE__*/ _react.default.createElement(ListDrawerToggler, {
        className: `${baseClass}__toggler`,
        disabled: readOnly
    }, /*#__PURE__*/ _react.default.createElement(_Button.default, {
        buttonStyle: "secondary",
        disabled: readOnly,
        el: "div"
    }, t('chooseFromExisting'))))), /*#__PURE__*/ _react.default.createElement(_FieldDescription.default, {
        description: description,
        path: path,
        value: file
    })), !readOnly && /*#__PURE__*/ _react.default.createElement(DocumentDrawer, {
        onSave: onSave
    }), !readOnly && /*#__PURE__*/ _react.default.createElement(ListDrawer, {
        onSelect: onSelect
    }));
};
const _default = UploadInput;

//# sourceMappingURL=data:application/json;base64,