"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    PreferencesProvider: function() {
        return PreferencesProvider;
    },
    usePreferences: function() {
        return usePreferences;
    }
});
const _deepequal = /*#__PURE__*/ _interop_require_default(require("deep-equal"));
const _react = /*#__PURE__*/ _interop_require_wildcard(require("react"));
const _reacti18next = require("react-i18next");
const _api = require("../../../api");
const _Auth = require("../Auth");
const _Config = require("../Config");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
const Context = /*#__PURE__*/ (0, _react.createContext)({});
const requestOptions = (value, language)=>({
        body: JSON.stringify({
            value
        }),
        headers: {
            'Accept-Language': language,
            'Content-Type': 'application/json'
        }
    });
const PreferencesProvider = ({ children })=>{
    const contextRef = (0, _react.useRef)({});
    const preferencesRef = (0, _react.useRef)({});
    const pendingUpdate = (0, _react.useRef)({});
    const config = (0, _Config.useConfig)();
    const { user } = (0, _Auth.useAuth)();
    const { i18n } = (0, _reacti18next.useTranslation)();
    const { routes: { api }, serverURL } = config;
    (0, _react.useEffect)(()=>{
        if (!user) {
            // clear preferences between users
            preferencesRef.current = {};
        }
    }, [
        user
    ]);
    const getPreference = (0, _react.useCallback)(async (key)=>{
        const prefs = preferencesRef.current;
        if (typeof prefs[key] !== 'undefined') return prefs[key];
        const promise = new Promise((resolve)=>{
            void (async ()=>{
                const request = await _api.requests.get(`${serverURL}${api}/payload-preferences/${key}`, {
                    headers: {
                        'Accept-Language': i18n.language
                    }
                });
                let value = null;
                if (request.status === 200) {
                    const preference = await request.json();
                    value = preference.value;
                }
                preferencesRef.current[key] = value;
                resolve(value);
            })();
        });
        prefs[key] = promise;
        return promise;
    }, [
        i18n.language,
        api,
        preferencesRef,
        serverURL
    ]);
    const setPreference = (0, _react.useCallback)(async (key, value, merge = false)=>{
        if (merge === false) {
            preferencesRef.current[key] = value;
            await _api.requests.post(`${serverURL}${api}/payload-preferences/${key}`, requestOptions(value, i18n.language));
            return;
        }
        let newValue = value;
        const currentPreference = await getPreference(key);
        // handle value objects where multiple values can be set under one key
        if (typeof value === 'object' && typeof currentPreference === 'object' && typeof newValue === 'object') {
            // merge the value with any existing preference for the key
            newValue = {
                ...currentPreference || {},
                ...value
            };
            if ((0, _deepequal.default)(newValue, currentPreference)) {
                return;
            }
            // add the requested changes to a pendingUpdate batch for the key
            pendingUpdate.current[key] = {
                ...pendingUpdate.current[key],
                ...newValue
            };
        } else {
            if (newValue === currentPreference) {
                return;
            }
            pendingUpdate.current[key] = newValue;
        }
        const updatePreference = async ()=>{
            // compare the value stored in context before sending to eliminate duplicate requests
            if ((0, _deepequal.default)(pendingUpdate.current[key], preferencesRef.current[key])) {
                return;
            }
            // preference set in context here to prevent other updatePreference at the same time
            preferencesRef.current[key] = pendingUpdate.current[key];
            await _api.requests.post(`${serverURL}${api}/payload-preferences/${key}`, requestOptions(preferencesRef.current[key], i18n.language));
            // reset any changes for this key after sending the request
            delete pendingUpdate.current[key];
        };
        // use timeout to allow multiple changes of different values using the same key in one request
        setTimeout(()=>{
            void updatePreference();
        });
    }, [
        api,
        getPreference,
        i18n.language,
        pendingUpdate,
        serverURL
    ]);
    contextRef.current.getPreference = getPreference;
    contextRef.current.setPreference = setPreference;
    return /*#__PURE__*/ _react.default.createElement(Context.Provider, {
        value: contextRef.current
    }, children);
};
const usePreferences = ()=>(0, _react.useContext)(Context);

//# sourceMappingURL=data:application/json;base64,