"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    AuthProvider: function() {
        return AuthProvider;
    },
    useAuth: function() {
        return useAuth;
    }
});
const _modal = require("@faceless-ui/modal");
const _qs = /*#__PURE__*/ _interop_require_default(require("qs"));
const _react = /*#__PURE__*/ _interop_require_wildcard(require("react"));
const _reacti18next = require("react-i18next");
const _reactrouterdom = require("react-router-dom");
const _reacttoastify = require("react-toastify");
const _api = require("../../../api");
const _useDebounce = /*#__PURE__*/ _interop_require_default(require("../../../hooks/useDebounce"));
const _Config = require("../Config");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
const Context = /*#__PURE__*/ (0, _react.createContext)({});
const maxTimeoutTime = 2147483647;
const AuthProvider = ({ children })=>{
    const [user, setUser] = (0, _react.useState)();
    const [tokenInMemory, setTokenInMemory] = (0, _react.useState)();
    const [tokenExpiration, setTokenExpiration] = (0, _react.useState)();
    const [strategy, setStrategy] = (0, _react.useState)();
    const { pathname } = (0, _reactrouterdom.useLocation)();
    const { push } = (0, _reactrouterdom.useHistory)();
    const config = (0, _Config.useConfig)();
    const { admin: { autoLogin, inactivityRoute: logoutInactivityRoute, user: userSlug }, routes: { admin, api }, serverURL } = config;
    const [permissions, setPermissions] = (0, _react.useState)();
    const { i18n } = (0, _reacti18next.useTranslation)();
    const { closeAllModals, openModal } = (0, _modal.useModal)();
    const [lastLocationChange, setLastLocationChange] = (0, _react.useState)(0);
    const debouncedLocationChange = (0, _useDebounce.default)(lastLocationChange, 10000);
    const userIDRef = _react.default.useRef();
    const id = user?.id;
    const refreshPermissions = (0, _react.useCallback)(async ({ locale } = {})=>{
        const params = {
            locale
        };
        try {
            const request = await _api.requests.get(`${serverURL}${api}/access${_qs.default.stringify(params, {
                addQueryPrefix: true
            })}`, {
                headers: {
                    'Accept-Language': i18n.language
                }
            });
            if (request.status === 200) {
                const json = await request.json();
                setPermissions(json);
            } else {
                throw new Error(`Fetching permissions failed with status code ${request.status}`);
            }
        } catch (e) {
            _reacttoastify.toast.error(`Refreshing permissions failed: ${e.message}`);
        }
    }, [
        serverURL,
        api,
        i18n
    ]);
    const setActiveUser = _react.default.useCallback((user)=>{
        setUser(user);
        userIDRef.current = user?.id || null;
        void refreshPermissions();
    }, [
        refreshPermissions
    ]);
    const redirectToInactivityRoute = (0, _react.useCallback)(()=>{
        if (window.location.pathname.startsWith(admin)) {
            const redirectParam = `?redirect=${encodeURIComponent(window.location.pathname.replace(admin, ''))}`;
            push(`${admin}${logoutInactivityRoute}${redirectParam}`);
        } else {
            push(`${admin}${logoutInactivityRoute}`);
        }
        closeAllModals();
    }, [
        push,
        admin,
        logoutInactivityRoute,
        closeAllModals
    ]);
    const revokeTokenAndExpire = (0, _react.useCallback)(()=>{
        setTokenInMemory(undefined);
        setTokenExpiration(undefined);
        setStrategy(undefined);
    }, []);
    const setTokenAndExpiration = (0, _react.useCallback)((json)=>{
        const token = json?.token || json?.refreshedToken;
        if (token && json?.exp) {
            setTokenInMemory(token);
            setTokenExpiration(json.exp);
            if (json.strategy) {
                setStrategy(json.strategy);
            }
        } else {
            revokeTokenAndExpire();
        }
    }, [
        revokeTokenAndExpire
    ]);
    const refreshCookie = (0, _react.useCallback)((forceRefresh)=>{
        const now = Math.round(new Date().getTime() / 1000);
        const remainingTime = (typeof tokenExpiration === 'number' ? tokenExpiration : 0) - now;
        if (forceRefresh || tokenExpiration && remainingTime < 120) {
            setTimeout(async ()=>{
                try {
                    const request = await _api.requests.post(`${serverURL}${api}/${userSlug}/refresh-token`, {
                        headers: {
                            'Accept-Language': i18n.language
                        }
                    });
                    if (request.status === 200) {
                        const json = await request.json();
                        setActiveUser(json.user);
                        setTokenAndExpiration(json);
                    } else {
                        setActiveUser(null);
                        redirectToInactivityRoute();
                    }
                } catch (e) {
                    _reacttoastify.toast.error(e.message);
                }
            }, 1000);
        }
    }, [
        tokenExpiration,
        serverURL,
        api,
        userSlug,
        i18n.language,
        setActiveUser,
        setTokenAndExpiration,
        redirectToInactivityRoute
    ]);
    const refreshCookieAsync = (0, _react.useCallback)(async (skipSetUser)=>{
        try {
            const request = await _api.requests.post(`${serverURL}${api}/${userSlug}/refresh-token`, {
                headers: {
                    'Accept-Language': i18n.language
                }
            });
            if (request.status === 200) {
                const json = await request.json();
                if (!skipSetUser) {
                    setActiveUser(json.user);
                    setTokenAndExpiration(json);
                }
                return json.user;
            }
            setActiveUser(null);
            redirectToInactivityRoute();
            return null;
        } catch (e) {
            _reacttoastify.toast.error(`Refreshing token failed: ${e.message}`);
            return null;
        }
    }, [
        serverURL,
        api,
        userSlug,
        i18n,
        redirectToInactivityRoute,
        setTokenAndExpiration,
        setActiveUser
    ]);
    const logOut = (0, _react.useCallback)(()=>{
        setActiveUser(null);
        revokeTokenAndExpire();
        void _api.requests.post(`${serverURL}${api}/${userSlug}/logout`);
    }, [
        serverURL,
        api,
        userSlug,
        revokeTokenAndExpire,
        setActiveUser
    ]);
    const fetchFullUser = _react.default.useCallback(async ()=>{
        try {
            const request = await _api.requests.get(`${serverURL}${api}/${userSlug}/me`, {
                headers: {
                    'Accept-Language': i18n.language
                }
            });
            if (request.status === 200) {
                const json = await request.json();
                if (json?.user) {
                    setActiveUser(json.user);
                    if (json?.token) {
                        setTokenAndExpiration(json);
                    }
                } else if (autoLogin && autoLogin.prefillOnly !== true) {
                    // auto log-in with the provided autoLogin credentials. This is used in dev mode
                    // so you don't have to log in over and over again
                    const autoLoginResult = await _api.requests.post(`${serverURL}${api}/${userSlug}/login`, {
                        body: JSON.stringify({
                            email: autoLogin.email,
                            password: autoLogin.password
                        }),
                        headers: {
                            'Accept-Language': i18n.language,
                            'Content-Type': 'application/json'
                        }
                    });
                    if (autoLoginResult.status === 200) {
                        const autoLoginJson = await autoLoginResult.json();
                        setActiveUser(autoLoginJson.user);
                        if (autoLoginJson?.token) {
                            setTokenAndExpiration(autoLoginJson);
                        }
                    } else {
                        setActiveUser(null);
                        revokeTokenAndExpire();
                    }
                } else {
                    setActiveUser(null);
                    revokeTokenAndExpire();
                }
            }
        } catch (e) {
            _reacttoastify.toast.error(`Fetching user failed: ${e.message}`);
        }
    }, [
        serverURL,
        api,
        userSlug,
        i18n,
        autoLogin,
        setTokenAndExpiration,
        revokeTokenAndExpire,
        setActiveUser
    ]);
    // On mount, get user and set
    (0, _react.useEffect)(()=>{
        if (id === undefined || id !== userIDRef.current) {
            void fetchFullUser();
        }
    }, [
        fetchFullUser,
        id
    ]);
    // When location changes, refresh cookie
    (0, _react.useEffect)(()=>{
        if (id) {
            refreshCookie();
        }
    }, [
        debouncedLocationChange,
        refreshCookie,
        id
    ]);
    (0, _react.useEffect)(()=>{
        setLastLocationChange(Date.now());
    }, [
        pathname
    ]);
    (0, _react.useEffect)(()=>{
        let reminder;
        const now = Math.round(new Date().getTime() / 1000);
        const remainingTime = typeof tokenExpiration === 'number' ? tokenExpiration - now : 0;
        if (remainingTime > 0) {
            reminder = setTimeout(()=>{
                openModal('stay-logged-in');
            }, Math.max(Math.min((remainingTime - 60) * 1000, maxTimeoutTime)));
        }
        return ()=>{
            if (reminder) clearTimeout(reminder);
        };
    }, [
        tokenExpiration,
        openModal
    ]);
    (0, _react.useEffect)(()=>{
        let forceLogOut;
        const now = Math.round(new Date().getTime() / 1000);
        const remainingTime = typeof tokenExpiration === 'number' ? tokenExpiration - now : 0;
        if (remainingTime > 0) {
            forceLogOut = setTimeout(()=>{
                setActiveUser(null);
                revokeTokenAndExpire();
                redirectToInactivityRoute();
            }, Math.max(Math.min(remainingTime * 1000, maxTimeoutTime), 0));
        }
        return ()=>{
            if (forceLogOut) clearTimeout(forceLogOut);
        };
    }, [
        tokenExpiration,
        closeAllModals,
        i18n,
        redirectToInactivityRoute,
        revokeTokenAndExpire,
        setActiveUser
    ]);
    return /*#__PURE__*/ _react.default.createElement(Context.Provider, {
        value: {
            fetchFullUser,
            logOut,
            permissions,
            refreshCookie,
            refreshCookieAsync,
            refreshPermissions,
            setUser: setActiveUser,
            strategy,
            token: tokenInMemory,
            tokenExpiration,
            user
        }
    }, children);
};
const useAuth = ()=>(0, _react.useContext)(Context);

//# sourceMappingURL=data:application/json;base64,