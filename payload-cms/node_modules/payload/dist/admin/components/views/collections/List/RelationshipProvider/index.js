"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    RelationshipProvider: function() {
        return RelationshipProvider;
    },
    useListRelationships: function() {
        return useListRelationships;
    }
});
const _qs = /*#__PURE__*/ _interop_require_default(require("qs"));
const _react = /*#__PURE__*/ _interop_require_wildcard(require("react"));
const _reacti18next = require("react-i18next");
const _useDebounce = /*#__PURE__*/ _interop_require_default(require("../../../../../hooks/useDebounce"));
const _Config = require("../../../../utilities/Config");
const _Locale = require("../../../../utilities/Locale");
const _reducer = require("./reducer");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
const Context = /*#__PURE__*/ (0, _react.createContext)({});
const RelationshipProvider = ({ children })=>{
    const [documents, dispatchDocuments] = (0, _react.useReducer)(_reducer.reducer, {});
    const debouncedDocuments = (0, _useDebounce.default)(documents, 100);
    const config = (0, _Config.useConfig)();
    const { i18n } = (0, _reacti18next.useTranslation)();
    const { code: locale } = (0, _Locale.useLocale)();
    const prevLocale = (0, _react.useRef)(locale);
    const { routes: { api }, serverURL } = config;
    const loadRelationshipDocs = (0, _react.useCallback)(async (reloadAll = false)=>{
        Object.entries(debouncedDocuments).forEach(async ([slug, docs])=>{
            const idsToLoad = [];
            Object.entries(docs).forEach(([id, value])=>{
                if (value === null || reloadAll) {
                    idsToLoad.push(id);
                }
            });
            if (idsToLoad.length > 0) {
                const url = `${serverURL}${api}/${slug}`;
                const params = {
                    depth: 0,
                    limit: 250,
                    locale,
                    'where[id][in]': idsToLoad
                };
                const query = _qs.default.stringify(params, {
                    addQueryPrefix: true
                });
                const result = await fetch(`${url}${query}`, {
                    credentials: 'include',
                    headers: {
                        'Accept-Language': i18n.language
                    }
                });
                if (result.ok) {
                    const json = await result.json();
                    if (json.docs) {
                        dispatchDocuments({
                            docs: json.docs,
                            idsToLoad,
                            relationTo: slug,
                            type: 'ADD_LOADED'
                        });
                    }
                } else {
                    dispatchDocuments({
                        docs: [],
                        idsToLoad,
                        relationTo: slug,
                        type: 'ADD_LOADED'
                    });
                }
            }
        });
    }, [
        debouncedDocuments,
        serverURL,
        api,
        i18n,
        locale
    ]);
    (0, _react.useEffect)(()=>{
        loadRelationshipDocs(locale && prevLocale.current !== locale);
        prevLocale.current = locale;
    }, [
        locale,
        loadRelationshipDocs
    ]);
    const getRelationships = (0, _react.useCallback)(async (relationships)=>{
        dispatchDocuments({
            docs: relationships,
            type: 'REQUEST'
        });
    }, []);
    return /*#__PURE__*/ _react.default.createElement(Context.Provider, {
        value: {
            documents,
            getRelationships
        }
    }, children);
};
const useListRelationships = ()=>(0, _react.useContext)(Context);

//# sourceMappingURL=data:application/json;base64,