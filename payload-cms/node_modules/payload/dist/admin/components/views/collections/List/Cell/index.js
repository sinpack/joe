"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _reacti18next = require("react-i18next");
const _reactrouterdom = require("react-router-dom");
const _types = require("../../../../../../fields/config/types");
const _getTranslation = require("../../../../../../utilities/getTranslation");
const _Config = require("../../../../utilities/Config");
const _RenderCustomComponent = /*#__PURE__*/ _interop_require_default(require("../../../../utilities/RenderCustomComponent"));
const _fieldtypes = /*#__PURE__*/ _interop_require_default(require("./field-types"));
const _Code = /*#__PURE__*/ _interop_require_default(require("./field-types/Code"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const DefaultCell = (props)=>{
    const { cellData, className, collection: { slug }, collection, field, link = true, onClick, rowData: { id } = {}, rowData } = props;
    const { routes: { admin } } = (0, _Config.useConfig)();
    const { i18n, t } = (0, _reacti18next.useTranslation)('general');
    let WrapElement = 'span';
    const wrapElementProps = {
        className
    };
    if (link) {
        WrapElement = _reactrouterdom.Link;
        wrapElementProps.to = `${admin}/collections/${slug}/${id}`;
    }
    if (typeof onClick === 'function') {
        WrapElement = 'button';
        wrapElementProps.type = 'button';
        wrapElementProps.onClick = ()=>{
            onClick(props);
        };
    }
    if (field.name === 'id') {
        return /*#__PURE__*/ _react.default.createElement(WrapElement, wrapElementProps, /*#__PURE__*/ _react.default.createElement(_Code.default, {
            collection: collection,
            data: `ID: ${cellData}`,
            field: field,
            nowrap: true,
            rowData: rowData
        }));
    }
    let CellComponent = cellData && _fieldtypes.default[field.type];
    if (!CellComponent) {
        if (collection.upload && (0, _types.fieldAffectsData)(field) && field.name === 'filename') {
            CellComponent = _fieldtypes.default.File;
        } else {
            if (!cellData && 'label' in field) {
                return /*#__PURE__*/ _react.default.createElement(WrapElement, wrapElementProps, t('noLabel', {
                    label: (0, _getTranslation.getTranslation)(typeof field.label === 'function' ? 'data' : field.label || 'data', i18n)
                }));
            } else if (typeof cellData === 'string' || typeof cellData === 'number') {
                return /*#__PURE__*/ _react.default.createElement(WrapElement, wrapElementProps, cellData);
            } else if (typeof cellData === 'object') {
                return /*#__PURE__*/ _react.default.createElement(WrapElement, wrapElementProps, JSON.stringify(cellData));
            }
        }
    }
    return /*#__PURE__*/ _react.default.createElement(WrapElement, wrapElementProps, /*#__PURE__*/ _react.default.createElement(CellComponent, {
        collection: collection,
        data: cellData,
        field: field,
        rowData: rowData
    }));
};
const Cell = (props)=>{
    const { cellData, className, colIndex, collection, field: { admin: { components: { Cell: CustomCell } = {} } = {} }, field, link, onClick, rowData } = props;
    return /*#__PURE__*/ _react.default.createElement(_RenderCustomComponent.default, {
        CustomComponent: CustomCell,
        DefaultComponent: DefaultCell,
        componentProps: {
            cellData,
            className,
            colIndex,
            collection,
            field,
            link,
            onClick,
            rowData
        }
    });
};
const _default = Cell;

//# sourceMappingURL=data:application/json;base64,