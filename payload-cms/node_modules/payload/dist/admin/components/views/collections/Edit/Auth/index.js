"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
const _react = /*#__PURE__*/ _interop_require_wildcard(require("react"));
const _reacti18next = require("react-i18next");
const _reacttoastify = require("react-toastify");
const _Button = /*#__PURE__*/ _interop_require_default(require("../../../../elements/Button"));
const _context = require("../../../../forms/Form/context");
const _Checkbox = /*#__PURE__*/ _interop_require_default(require("../../../../forms/field-types/Checkbox"));
const _ConfirmPassword = /*#__PURE__*/ _interop_require_default(require("../../../../forms/field-types/ConfirmPassword"));
const _Email = /*#__PURE__*/ _interop_require_default(require("../../../../forms/field-types/Email"));
const _Password = /*#__PURE__*/ _interop_require_default(require("../../../../forms/field-types/Password"));
const _Config = require("../../../../utilities/Config");
const _APIKey = /*#__PURE__*/ _interop_require_default(require("./APIKey"));
require("./index.scss");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
const baseClass = 'auth-fields';
const Auth = (props)=>{
    const { className, collection, collection: { slug }, email, operation, readOnly, requirePassword, useAPIKey, verify } = props;
    const [changingPassword, setChangingPassword] = (0, _react.useState)(requirePassword);
    const enableAPIKey = (0, _context.useFormFields)(([fields])=>fields.enableAPIKey);
    const dispatchFields = (0, _context.useFormFields)((reducer)=>reducer[1]);
    const modified = (0, _context.useFormModified)();
    const { i18n, t } = (0, _reacti18next.useTranslation)('authentication');
    const { routes: { api }, serverURL } = (0, _Config.useConfig)();
    const handleChangePassword = (0, _react.useCallback)(async (state)=>{
        if (!state) {
            dispatchFields({
                path: 'password',
                type: 'REMOVE'
            });
            dispatchFields({
                path: 'confirm-password',
                type: 'REMOVE'
            });
        }
        setChangingPassword(state);
    }, [
        dispatchFields
    ]);
    const unlock = (0, _react.useCallback)(async ()=>{
        const url = `${serverURL}${api}/${slug}/unlock`;
        const response = await fetch(url, {
            body: JSON.stringify({
                email
            }),
            credentials: 'include',
            headers: {
                'Accept-Language': i18n.language,
                'Content-Type': 'application/json'
            },
            method: 'post'
        });
        if (response.status === 200) {
            _reacttoastify.toast.success(t('successfullyUnlocked'), {
                autoClose: 3000
            });
        } else {
            _reacttoastify.toast.error(t('failedToUnlock'));
        }
    }, [
        i18n,
        serverURL,
        api,
        slug,
        email,
        t
    ]);
    (0, _react.useEffect)(()=>{
        if (!modified) {
            setChangingPassword(false);
        }
    }, [
        modified
    ]);
    if (collection.auth.disableLocalStrategy && !collection.auth.useAPIKey) {
        return null;
    }
    return /*#__PURE__*/ _react.default.createElement("div", {
        className: [
            baseClass,
            className
        ].filter(Boolean).join(' ')
    }, !collection.auth.disableLocalStrategy && /*#__PURE__*/ _react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/ _react.default.createElement(_Email.default, {
        admin: {
            autoComplete: 'email',
            readOnly
        },
        label: t('general:email'),
        name: "email",
        required: true
    }), (changingPassword || requirePassword) && /*#__PURE__*/ _react.default.createElement("div", {
        className: `${baseClass}__changing-password`
    }, /*#__PURE__*/ _react.default.createElement(_Password.default, {
        autoComplete: "off",
        disabled: readOnly,
        label: t('newPassword'),
        name: "password",
        required: true
    }), /*#__PURE__*/ _react.default.createElement(_ConfirmPassword.default, {
        disabled: readOnly
    }), !requirePassword && /*#__PURE__*/ _react.default.createElement(_Button.default, {
        buttonStyle: "secondary",
        disabled: readOnly,
        onClick: ()=>handleChangePassword(false),
        size: "small"
    }, t('general:cancel'))), (!changingPassword && !requirePassword || operation === 'update') && /*#__PURE__*/ _react.default.createElement("div", {
        className: `${baseClass}__controls`
    }, !changingPassword && !requirePassword && /*#__PURE__*/ _react.default.createElement(_Button.default, {
        buttonStyle: "secondary",
        disabled: readOnly,
        id: "change-password",
        onClick: ()=>handleChangePassword(true),
        size: "small"
    }, t('changePassword')), operation === 'update' && /*#__PURE__*/ _react.default.createElement(_Button.default, {
        buttonStyle: "secondary",
        disabled: readOnly,
        onClick: ()=>unlock(),
        size: "small"
    }, t('forceUnlock')))), useAPIKey && /*#__PURE__*/ _react.default.createElement("div", {
        className: `${baseClass}__api-key`
    }, /*#__PURE__*/ _react.default.createElement(_Checkbox.default, {
        admin: {
            readOnly
        },
        label: t('enableAPIKey'),
        name: "enableAPIKey"
    }), /*#__PURE__*/ _react.default.createElement(_APIKey.default, {
        enabled: !!enableAPIKey?.value,
        readOnly: readOnly
    })), verify && /*#__PURE__*/ _react.default.createElement(_Checkbox.default, {
        admin: {
            readOnly
        },
        label: t('verified'),
        name: "_verified"
    }));
};
const _default = Auth;

//# sourceMappingURL=data:application/json;base64,