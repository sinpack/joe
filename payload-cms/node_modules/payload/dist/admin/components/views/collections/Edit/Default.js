"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
const _react = /*#__PURE__*/ _interop_require_wildcard(require("react"));
const _reacti18next = require("react-i18next");
const _reactrouterdom = require("react-router-dom");
const _getTranslation = require("../../../../../utilities/getTranslation");
const _DocumentHeader = require("../../../elements/DocumentHeader");
const _Loading = require("../../../elements/Loading");
const _Form = /*#__PURE__*/ _interop_require_default(require("../../../forms/Form"));
const _ActionsProvider = require("../../../utilities/ActionsProvider");
const _Auth = require("../../../utilities/Auth");
const _DocumentEvents = require("../../../utilities/DocumentEvents");
const _OperationProvider = require("../../../utilities/OperationProvider");
const _Routes = require("./Routes");
const _CustomComponent = require("./Routes/CustomComponent");
require("./index.scss");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
const baseClass = 'collection-edit';
const DefaultEditView = (props)=>{
    const { i18n, t } = (0, _reacti18next.useTranslation)('general');
    const { refreshCookieAsync, user } = (0, _Auth.useAuth)();
    const { id, action, apiURL, collection, customHeader, data, disableRoutes, fieldTypes, hasSavePermission, internalState, isEditing, isLoading, onSave: onSaveFromProps } = props;
    const { setViewActions } = (0, _ActionsProvider.useActions)();
    const { reportUpdate } = (0, _DocumentEvents.useDocumentEvents)();
    const { auth } = collection;
    const classes = [
        baseClass,
        isEditing && `${baseClass}--is-editing`
    ].filter(Boolean).join(' ');
    const location = (0, _reactrouterdom.useLocation)();
    const onSave = (0, _react.useCallback)(async (json)=>{
        reportUpdate({
            id,
            entitySlug: collection.slug,
            updatedAt: json?.result?.updatedAt || new Date().toISOString()
        });
        if (auth && id === user.id) {
            await refreshCookieAsync();
        }
        if (typeof onSaveFromProps === 'function') {
            onSaveFromProps({
                ...json,
                operation: id ? 'update' : 'create'
            });
        }
    }, [
        id,
        onSaveFromProps,
        auth,
        user,
        refreshCookieAsync,
        collection,
        reportUpdate
    ]);
    const operation = isEditing ? 'update' : 'create';
    (0, _react.useEffect)(()=>{
        const path = location.pathname;
        if (!(path.endsWith(id) || path.endsWith('/create'))) {
            return;
        }
        const editConfig = collection?.admin?.components?.views?.Edit;
        const defaultActions = editConfig && 'Default' in editConfig && 'actions' in editConfig.Default ? editConfig.Default.actions : [];
        setViewActions(defaultActions);
        return ()=>{
            setViewActions([]);
        };
    }, [
        id,
        location.pathname,
        collection?.admin?.components?.views?.Edit,
        setViewActions
    ]);
    return /*#__PURE__*/ _react.default.createElement("main", {
        className: classes
    }, /*#__PURE__*/ _react.default.createElement(_OperationProvider.OperationContext.Provider, {
        value: operation
    }, /*#__PURE__*/ _react.default.createElement(_Form.default, {
        action: action,
        className: `${baseClass}__form`,
        disabled: !hasSavePermission,
        initialState: internalState,
        method: id ? 'patch' : 'post',
        onSuccess: onSave
    }, /*#__PURE__*/ _react.default.createElement(_Loading.FormLoadingOverlayToggle, {
        action: isLoading ? 'loading' : operation,
        formIsLoading: isLoading,
        loadingSuffix: (0, _getTranslation.getTranslation)(collection.labels.singular, i18n),
        name: `collection-edit--${typeof collection?.labels?.singular === 'string' ? collection.labels.singular : t('document')}`,
        type: "withoutNav"
    }), !isLoading && /*#__PURE__*/ _react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/ _react.default.createElement(_DocumentHeader.DocumentHeader, {
        apiURL: apiURL,
        collection: collection,
        customHeader: customHeader,
        data: data,
        id: id,
        isEditing: isEditing
    }), disableRoutes ? /*#__PURE__*/ _react.default.createElement(_CustomComponent.CustomCollectionComponent, {
        view: "Default",
        ...props
    }) : /*#__PURE__*/ _react.default.createElement(_Routes.CollectionRoutes, {
        ...props,
        fieldTypes: fieldTypes
    })))));
};
const _default = DefaultEditView;

//# sourceMappingURL=data:application/json;base64,