"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
const _react = /*#__PURE__*/ _interop_require_wildcard(require("react"));
const _reacti18next = require("react-i18next");
const _getTranslation = require("../../../../../../../../utilities/getTranslation");
const _useIntersect = /*#__PURE__*/ _interop_require_default(require("../../../../../../../hooks/useIntersect"));
const _useTitle = require("../../../../../../../hooks/useTitle");
const _Config = require("../../../../../../utilities/Config");
const _RelationshipProvider = require("../../../RelationshipProvider");
require("./index.scss");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
const baseClass = 'relationship-cell';
const totalToShow = 3;
const RelationshipCell = (props)=>{
    const { data: cellData, field } = props;
    const config = (0, _Config.useConfig)();
    const { collections, routes } = config;
    const [intersectionRef, entry] = (0, _useIntersect.default)();
    const [values, setValues] = (0, _react.useState)([]);
    const { documents, getRelationships } = (0, _RelationshipProvider.useListRelationships)();
    const [hasRequested, setHasRequested] = (0, _react.useState)(false);
    const { i18n, t } = (0, _reacti18next.useTranslation)('general');
    const isAboveViewport = entry?.boundingClientRect?.top < window.innerHeight;
    (0, _react.useEffect)(()=>{
        if (cellData && isAboveViewport && !hasRequested) {
            const formattedValues = [];
            const arrayCellData = Array.isArray(cellData) ? cellData : [
                cellData
            ];
            arrayCellData.slice(0, arrayCellData.length < totalToShow ? arrayCellData.length : totalToShow).forEach((cell)=>{
                if (typeof cell === 'object' && 'relationTo' in cell && 'value' in cell) {
                    formattedValues.push(cell);
                }
                if ((typeof cell === 'number' || typeof cell === 'string') && 'relationTo' in field && typeof field.relationTo === 'string') {
                    formattedValues.push({
                        relationTo: field.relationTo,
                        value: cell
                    });
                }
            });
            getRelationships(formattedValues);
            setHasRequested(true);
            setValues(formattedValues);
        }
    }, [
        cellData,
        field,
        collections,
        isAboveViewport,
        routes.api,
        hasRequested,
        getRelationships
    ]);
    return /*#__PURE__*/ _react.default.createElement("div", {
        className: baseClass,
        ref: intersectionRef
    }, values.map(({ relationTo, value }, i)=>{
        const document = documents[relationTo][value];
        const relatedCollection = collections.find(({ slug })=>slug === relationTo);
        const label = (0, _useTitle.formatUseAsTitle)({
            collection: relatedCollection,
            config,
            doc: document === false ? null : document,
            i18n
        });
        return /*#__PURE__*/ _react.default.createElement(_react.default.Fragment, {
            key: i
        }, document === false && `${t('untitled')} - ID: ${value}`, document === null && `${t('loading')}...`, document && (label || `${t('untitled')} - ID: ${value}`), values.length > i + 1 && ', ');
    }), Array.isArray(cellData) && cellData.length > totalToShow && t('fields:itemsAndMore', {
        count: cellData.length - totalToShow,
        items: ''
    }), values.length === 0 && t('noLabel', {
        label: (0, _getTranslation.getTranslation)(field?.label || '', i18n)
    }));
};
const _default = RelationshipCell;

//# sourceMappingURL=data:application/json;base64,