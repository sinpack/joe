"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
const _windowinfo = require("@faceless-ui/window-info");
const _react = /*#__PURE__*/ _interop_require_wildcard(require("react"));
const _reacti18next = require("react-i18next");
const _formatFilesize = /*#__PURE__*/ _interop_require_default(require("../../../../../uploads/formatFilesize"));
const _getTranslation = require("../../../../../utilities/getTranslation");
const _Button = /*#__PURE__*/ _interop_require_default(require("../../../elements/Button"));
const _DeleteMany = /*#__PURE__*/ _interop_require_default(require("../../../elements/DeleteMany"));
const _EditMany = /*#__PURE__*/ _interop_require_default(require("../../../elements/EditMany"));
const _Gutter = require("../../../elements/Gutter");
const _ListControls = require("../../../elements/ListControls");
const _ListSelection = /*#__PURE__*/ _interop_require_default(require("../../../elements/ListSelection"));
const _Paginator = /*#__PURE__*/ _interop_require_default(require("../../../elements/Paginator"));
const _PerPage = /*#__PURE__*/ _interop_require_default(require("../../../elements/PerPage"));
const _Pill = /*#__PURE__*/ _interop_require_default(require("../../../elements/Pill"));
const _PublishMany = /*#__PURE__*/ _interop_require_default(require("../../../elements/PublishMany"));
const _ShimmerEffect = require("../../../elements/ShimmerEffect");
const _Table = require("../../../elements/Table");
const _UnpublishMany = /*#__PURE__*/ _interop_require_default(require("../../../elements/UnpublishMany"));
const _ViewDescription = /*#__PURE__*/ _interop_require_default(require("../../../elements/ViewDescription"));
const _Meta = /*#__PURE__*/ _interop_require_default(require("../../../utilities/Meta"));
const _RelationshipProvider = require("./RelationshipProvider");
const _SelectionProvider = require("./SelectionProvider");
require("./index.scss");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
const baseClass = 'collection-list';
const DefaultList = (props)=>{
    const { collection: { admin: { components: { AfterList, AfterListTable, BeforeList, BeforeListTable } = {}, description } = {}, labels: { plural: pluralLabel, singular: singularLabel } }, collection, customHeader, data, handlePageChange, handlePerPageChange, handleSearchChange, handleSortChange, handleWhereChange, hasCreatePermission, limit, modifySearchParams, newDocumentURL, resetParams, titleField } = props;
    const { breakpoints: { s: smallBreak } } = (0, _windowinfo.useWindowInfo)();
    const { i18n, t } = (0, _reacti18next.useTranslation)('general');
    let formattedDocs = data.docs || [];
    if (collection.upload) {
        formattedDocs = formattedDocs?.map((doc)=>{
            return {
                ...doc,
                filesize: (0, _formatFilesize.default)(doc.filesize)
            };
        });
    }
    return /*#__PURE__*/ _react.default.createElement("div", {
        className: baseClass
    }, Array.isArray(BeforeList) && BeforeList.map((Component, i)=>/*#__PURE__*/ _react.default.createElement(Component, {
            key: i,
            ...props
        })), /*#__PURE__*/ _react.default.createElement(_Meta.default, {
        title: (0, _getTranslation.getTranslation)(collection.labels.plural, i18n)
    }), /*#__PURE__*/ _react.default.createElement(_SelectionProvider.SelectionProvider, {
        docs: data.docs,
        totalDocs: data.totalDocs
    }, /*#__PURE__*/ _react.default.createElement(_Gutter.Gutter, {
        className: `${baseClass}__wrap`
    }, /*#__PURE__*/ _react.default.createElement("header", {
        className: `${baseClass}__header`
    }, customHeader && customHeader, !customHeader && /*#__PURE__*/ _react.default.createElement(_react.Fragment, null, /*#__PURE__*/ _react.default.createElement("h1", null, (0, _getTranslation.getTranslation)(pluralLabel, i18n)), hasCreatePermission && /*#__PURE__*/ _react.default.createElement(_Pill.default, {
        "aria-label": t('createNewLabel', {
            label: (0, _getTranslation.getTranslation)(singularLabel, i18n)
        }),
        to: newDocumentURL
    }, t('createNew')), !smallBreak && /*#__PURE__*/ _react.default.createElement(_ListSelection.default, {
        label: (0, _getTranslation.getTranslation)(collection.labels.plural, i18n)
    }), description && /*#__PURE__*/ _react.default.createElement("div", {
        className: `${baseClass}__sub-header`
    }, /*#__PURE__*/ _react.default.createElement(_ViewDescription.default, {
        description: description
    })))), /*#__PURE__*/ _react.default.createElement(_ListControls.ListControls, {
        collection: collection,
        handleSearchChange: handleSearchChange,
        handleSortChange: handleSortChange,
        handleWhereChange: handleWhereChange,
        modifySearchQuery: modifySearchParams,
        resetParams: resetParams,
        titleField: titleField
    }), Array.isArray(BeforeListTable) && BeforeListTable.map((Component, i)=>/*#__PURE__*/ _react.default.createElement(Component, {
            key: i,
            ...props
        })), !data.docs && /*#__PURE__*/ _react.default.createElement(_ShimmerEffect.StaggeredShimmers, {
        className: [
            `${baseClass}__shimmer`,
            `${baseClass}__shimmer--rows`
        ].join(' '),
        count: 6
    }), data.docs && data.docs.length > 0 && /*#__PURE__*/ _react.default.createElement(_RelationshipProvider.RelationshipProvider, null, /*#__PURE__*/ _react.default.createElement(_Table.Table, {
        data: formattedDocs
    })), data.docs && data.docs.length === 0 && /*#__PURE__*/ _react.default.createElement("div", {
        className: `${baseClass}__no-results`
    }, /*#__PURE__*/ _react.default.createElement("p", null, t('noResults', {
        label: (0, _getTranslation.getTranslation)(pluralLabel, i18n)
    })), hasCreatePermission && newDocumentURL && /*#__PURE__*/ _react.default.createElement(_Button.default, {
        el: "link",
        to: newDocumentURL
    }, t('createNewLabel', {
        label: (0, _getTranslation.getTranslation)(singularLabel, i18n)
    }))), Array.isArray(AfterListTable) && AfterListTable.map((Component, i)=>/*#__PURE__*/ _react.default.createElement(Component, {
            key: i,
            ...props
        })), data.docs && data.docs.length > 0 && /*#__PURE__*/ _react.default.createElement("div", {
        className: `${baseClass}__page-controls`
    }, /*#__PURE__*/ _react.default.createElement(_Paginator.default, {
        disableHistoryChange: modifySearchParams === false,
        hasNextPage: data.hasNextPage,
        hasPrevPage: data.hasPrevPage,
        limit: data.limit,
        nextPage: data.nextPage,
        numberOfNeighbors: 1,
        onChange: handlePageChange,
        page: data.page,
        prevPage: data.prevPage,
        totalPages: data.totalPages
    }), data?.totalDocs > 0 && /*#__PURE__*/ _react.default.createElement(_react.Fragment, null, /*#__PURE__*/ _react.default.createElement("div", {
        className: `${baseClass}__page-info`
    }, data.page * data.limit - (data.limit - 1), "-", data.totalPages > 1 && data.totalPages !== data.page ? data.limit * data.page : data.totalDocs, ' ', t('of'), " ", data.totalDocs), /*#__PURE__*/ _react.default.createElement(_PerPage.default, {
        handleChange: handlePerPageChange,
        limit: limit,
        limits: collection?.admin?.pagination?.limits,
        modifySearchParams: modifySearchParams,
        resetPage: data.totalDocs <= data.pagingCounter
    }), smallBreak && /*#__PURE__*/ _react.default.createElement("div", {
        className: `${baseClass}__list-selection`
    }, /*#__PURE__*/ _react.default.createElement(_react.Fragment, null, /*#__PURE__*/ _react.default.createElement(_ListSelection.default, {
        label: (0, _getTranslation.getTranslation)(collection.labels.plural, i18n)
    }), /*#__PURE__*/ _react.default.createElement("div", {
        className: `${baseClass}__list-selection-actions`
    }, /*#__PURE__*/ _react.default.createElement(_EditMany.default, {
        collection: collection,
        resetParams: resetParams
    }), /*#__PURE__*/ _react.default.createElement(_PublishMany.default, {
        collection: collection,
        resetParams: resetParams
    }), /*#__PURE__*/ _react.default.createElement(_UnpublishMany.default, {
        collection: collection,
        resetParams: resetParams
    }), /*#__PURE__*/ _react.default.createElement(_DeleteMany.default, {
        collection: collection,
        resetParams: resetParams
    })))))))), Array.isArray(AfterList) && AfterList.map((Component, i)=>/*#__PURE__*/ _react.default.createElement(Component, {
            key: i,
            ...props
        })));
};
const _default = DefaultList;

//# sourceMappingURL=data:application/json;base64,