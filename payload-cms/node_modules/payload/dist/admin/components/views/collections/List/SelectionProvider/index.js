"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    SelectAllStatus: function() {
        return SelectAllStatus;
    },
    SelectionProvider: function() {
        return SelectionProvider;
    },
    useSelection: function() {
        return useSelection;
    }
});
const _qs = /*#__PURE__*/ _interop_require_default(require("qs"));
const _react = /*#__PURE__*/ _interop_require_wildcard(require("react"));
const _reactrouterdom = require("react-router-dom");
const _Locale = require("../../../../utilities/Locale");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
var SelectAllStatus;
(function(SelectAllStatus) {
    SelectAllStatus["AllAvailable"] = "allAvailable";
    SelectAllStatus["AllInPage"] = "allInPage";
    SelectAllStatus["None"] = "none";
    SelectAllStatus["Some"] = "some";
})(SelectAllStatus || (SelectAllStatus = {}));
const Context = /*#__PURE__*/ (0, _react.createContext)({});
const SelectionProvider = ({ children, docs = [], totalDocs })=>{
    const contextRef = (0, _react.useRef)({});
    const history = (0, _reactrouterdom.useHistory)();
    const { code: locale } = (0, _Locale.useLocale)();
    const [selected, setSelected] = (0, _react.useState)({});
    const [selectAll, setSelectAll] = (0, _react.useState)("none");
    const [count, setCount] = (0, _react.useState)(0);
    const toggleAll = (0, _react.useCallback)((allAvailable = false)=>{
        const rows = {};
        if (allAvailable) {
            setSelectAll("allAvailable");
            docs.forEach(({ id })=>{
                rows[id] = true;
            });
        } else if (selectAll === "allAvailable" || selectAll === "allInPage") {
            setSelectAll("none");
            docs.forEach(({ id })=>{
                rows[id] = false;
            });
        } else {
            docs.forEach(({ id })=>{
                rows[id] = selectAll !== "some";
            });
        }
        setSelected(rows);
    }, [
        docs,
        selectAll
    ]);
    const setSelection = (0, _react.useCallback)((id)=>{
        const isSelected = !selected[id];
        const newSelected = {
            ...selected,
            [id]: isSelected
        };
        if (!isSelected) {
            setSelectAll("some");
        }
        setSelected(newSelected);
    }, [
        selected
    ]);
    const getQueryParams = (0, _react.useCallback)((additionalParams)=>{
        let where;
        if (selectAll === "allAvailable") {
            const params = _qs.default.parse(history.location.search, {
                ignoreQueryPrefix: true
            }).where;
            where = params || {
                id: {
                    not_equals: ''
                }
            };
        } else {
            where = {
                id: {
                    in: Object.keys(selected).filter((id)=>selected[id]).map((id)=>id)
                }
            };
        }
        if (additionalParams) {
            where = {
                and: [
                    {
                        ...additionalParams
                    },
                    where
                ]
            };
        }
        return _qs.default.stringify({
            locale,
            where
        }, {
            addQueryPrefix: true
        });
    }, [
        history.location.search,
        selectAll,
        selected,
        locale
    ]);
    (0, _react.useEffect)(()=>{
        if (selectAll === "allAvailable") {
            return;
        }
        let some = false;
        let all = true;
        Object.values(selected).forEach((val)=>{
            all = all && val;
            some = some || val;
        });
        if (all) {
            setSelectAll("allInPage");
        } else if (some) {
            setSelectAll("some");
        } else {
            setSelectAll("none");
        }
    }, [
        docs,
        selectAll,
        selected
    ]);
    (0, _react.useEffect)(()=>{
        const rows = {};
        if (docs.length) {
            docs.forEach(({ id })=>{
                rows[id] = false;
            });
            setSelected(rows);
        }
        setSelectAll("none");
    }, [
        docs,
        history
    ]);
    (0, _react.useEffect)(()=>{
        const newCount = selectAll === "allAvailable" ? totalDocs : Object.keys(selected).filter((id)=>selected[id]).length;
        setCount(newCount);
    }, [
        selectAll,
        selected,
        totalDocs
    ]);
    contextRef.current = {
        count,
        getQueryParams,
        selectAll,
        selected,
        setSelection,
        toggleAll,
        totalDocs
    };
    return /*#__PURE__*/ _react.default.createElement(Context.Provider, {
        value: contextRef.current
    }, children);
};
const useSelection = ()=>(0, _react.useContext)(Context);

//# sourceMappingURL=data:application/json;base64,