"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
const _qs = /*#__PURE__*/ _interop_require_default(require("qs"));
const _react = /*#__PURE__*/ _interop_require_wildcard(require("react"));
const _reacti18next = require("react-i18next");
const _formatDate = require("../../../../utilities/formatDate");
const _ReactSelect = /*#__PURE__*/ _interop_require_default(require("../../../elements/ReactSelect"));
const _shared = require("../../../forms/field-types/shared");
const _Config = require("../../../utilities/Config");
const _AutosaveCell = require("../../Versions/cells/AutosaveCell");
require("./index.scss");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
const baseClass = 'compare-version';
const maxResultsPerRequest = 100;
const baseOptions = [];
const CompareVersion = (props)=>{
    const { baseURL, latestDraftVersion, latestPublishedVersion, onChange, parentID, value, versionID } = props;
    const { admin: { dateFormat } } = (0, _Config.useConfig)();
    const [options, setOptions] = (0, _react.useState)(baseOptions);
    const [lastLoadedPage, setLastLoadedPage] = (0, _react.useState)(1);
    const [errorLoading, setErrorLoading] = (0, _react.useState)('');
    const { i18n, t } = (0, _reacti18next.useTranslation)('version');
    const getResults = (0, _react.useCallback)(async ({ lastLoadedPage: lastLoadedPageArg })=>{
        const query = {
            depth: 0,
            limit: maxResultsPerRequest,
            page: lastLoadedPageArg,
            where: {
                and: [
                    {
                        id: {
                            not_equals: versionID
                        }
                    }
                ]
            }
        };
        if (parentID) {
            query.where.and.push({
                parent: {
                    equals: parentID
                }
            });
        }
        const search = _qs.default.stringify(query);
        const response = await fetch(`${baseURL}?${search}`, {
            credentials: 'include',
            headers: {
                'Accept-Language': i18n.language
            }
        });
        if (response.ok) {
            const data = await response.json();
            if (data.docs.length > 0) {
                const versionInfo = {
                    draft: {
                        currentLabel: t('version:currentDraft'),
                        latestVersion: latestDraftVersion,
                        pillStyle: undefined,
                        previousLabel: t('version:draft')
                    },
                    published: {
                        currentLabel: t('version:currentPublishedVersion'),
                        latestVersion: latestPublishedVersion,
                        pillStyle: 'success',
                        previousLabel: t('version:previouslyPublished')
                    }
                };
                const additionalOptions = data.docs.map((doc)=>{
                    const status = doc.version._status;
                    const { currentLabel, latestVersion, pillStyle, previousLabel } = versionInfo[status] || {};
                    return {
                        label: /*#__PURE__*/ _react.default.createElement("div", null, (0, _formatDate.formatDate)(doc.updatedAt, dateFormat, i18n?.language), "  ", (0, _AutosaveCell.renderPill)(doc, latestVersion, currentLabel, previousLabel, pillStyle)),
                        value: doc.id
                    };
                });
                setOptions(additionalOptions);
                setLastLoadedPage(data.page);
            }
        } else {
            setErrorLoading(t('error:unspecific'));
        }
    }, [
        dateFormat,
        baseURL,
        parentID,
        versionID,
        t,
        i18n,
        latestDraftVersion,
        latestPublishedVersion
    ]);
    (0, _react.useEffect)(()=>{
        void getResults({
            lastLoadedPage: 1
        });
    }, [
        getResults
    ]);
    const filteredOptions = options.filter((option, index, self)=>self.findIndex((t)=>t.value === option.value) === index);
    (0, _react.useEffect)(()=>{
        if (filteredOptions.length > 0 && !value) {
            onChange(filteredOptions[0]);
        }
    }, [
        filteredOptions,
        value,
        onChange
    ]);
    return /*#__PURE__*/ _react.default.createElement("div", {
        className: [
            _shared.fieldBaseClass,
            baseClass,
            errorLoading && 'error-loading'
        ].filter(Boolean).join(' ')
    }, /*#__PURE__*/ _react.default.createElement("div", {
        className: `${baseClass}__label`
    }, t('compareVersion')), !errorLoading && /*#__PURE__*/ _react.default.createElement(_ReactSelect.default, {
        isClearable: false,
        isSearchable: false,
        onChange: onChange,
        onMenuScrollToBottom: ()=>{
            void getResults({
                lastLoadedPage: lastLoadedPage + 1
            });
        },
        options: filteredOptions,
        placeholder: t('selectVersionToCompare'),
        value: value
    }), errorLoading && /*#__PURE__*/ _react.default.createElement("div", {
        className: `${baseClass}__error-loading`
    }, errorLoading));
};
const _default = CompareVersion;

//# sourceMappingURL=data:application/json;base64,