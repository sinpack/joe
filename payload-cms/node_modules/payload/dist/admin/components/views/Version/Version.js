"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
const _react = /*#__PURE__*/ _interop_require_wildcard(require("react"));
const _reacti18next = require("react-i18next");
const _reactrouterdom = require("react-router-dom");
const _types = require("../../../../fields/config/types");
const _getTranslation = require("../../../../utilities/getTranslation");
const _usePayloadAPI = /*#__PURE__*/ _interop_require_default(require("../../../hooks/usePayloadAPI"));
const _formatDate = require("../../../utilities/formatDate");
const _Gutter = require("../../elements/Gutter");
const _StepNav = require("../../elements/StepNav");
const _ActionsProvider = require("../../utilities/ActionsProvider");
const _Auth = require("../../utilities/Auth");
const _Config = require("../../utilities/Config");
const _DocumentInfo = require("../../utilities/DocumentInfo");
const _Locale = require("../../utilities/Locale");
const _Meta = /*#__PURE__*/ _interop_require_default(require("../../utilities/Meta"));
const _NotFound = /*#__PURE__*/ _interop_require_default(require("../NotFound"));
const _Compare = /*#__PURE__*/ _interop_require_default(require("./Compare"));
const _RenderFieldsToDiff = /*#__PURE__*/ _interop_require_default(require("./RenderFieldsToDiff"));
const _fields = /*#__PURE__*/ _interop_require_default(require("./RenderFieldsToDiff/fields"));
const _Restore = /*#__PURE__*/ _interop_require_default(require("./Restore"));
const _SelectLocales = /*#__PURE__*/ _interop_require_default(require("./SelectLocales"));
require("./index.scss");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
const baseClass = 'view-version';
const VersionView = ({ collection, global })=>{
    const { admin: { dateFormat }, localization, routes: { admin, api }, serverURL } = (0, _Config.useConfig)();
    const { setStepNav } = (0, _StepNav.useStepNav)();
    const { setViewActions } = (0, _ActionsProvider.useActions)();
    const { params: { id, versionID } } = (0, _reactrouterdom.useRouteMatch)();
    const [compareValue, setCompareValue] = (0, _react.useState)();
    const [localeOptions] = (0, _react.useState)(()=>{
        if (localization && localization?.locales) {
            return localization.locales.map(({ code, label })=>({
                    label,
                    value: code
                }));
        }
        return [];
    });
    const [locales, setLocales] = (0, _react.useState)(localeOptions);
    const { permissions } = (0, _Auth.useAuth)();
    const { code: locale } = (0, _Locale.useLocale)();
    const { i18n, t } = (0, _reacti18next.useTranslation)('version');
    const { docPermissions } = (0, _DocumentInfo.useDocumentInfo)();
    let originalDocFetchURL;
    let versionFetchURL;
    let entityLabel;
    let fields;
    let fieldPermissions;
    let compareBaseURL;
    let slug;
    let parentID;
    const [latestDraftVersion, setLatestDraftVersion] = (0, _react.useState)(undefined);
    const [latestPublishedVersion, setLatestPublishedVersion] = (0, _react.useState)(undefined);
    if (collection) {
        ({ slug } = collection);
        originalDocFetchURL = `${serverURL}${api}/${slug}/${id}`;
        versionFetchURL = `${serverURL}${api}/${slug}/versions/${versionID}`;
        compareBaseURL = `${serverURL}${api}/${slug}/versions`;
        entityLabel = (0, _getTranslation.getTranslation)(collection.labels.singular, i18n);
        parentID = id;
        fields = collection.fields;
        fieldPermissions = permissions.collections[collection.slug].fields;
    }
    if (global) {
        ({ slug } = global);
        originalDocFetchURL = `${serverURL}${api}/globals/${slug}`;
        versionFetchURL = `${serverURL}${api}/globals/${slug}/versions/${versionID}`;
        compareBaseURL = `${serverURL}${api}/globals/${slug}/versions`;
        entityLabel = (0, _getTranslation.getTranslation)(global.label, i18n);
        fields = global.fields;
        fieldPermissions = permissions.globals[global.slug].fields;
    }
    const compareFetchURL = compareValue?.value && `${compareBaseURL}/${compareValue.value}`;
    const [{ data: doc, isError }] = (0, _usePayloadAPI.default)(versionFetchURL, {
        initialParams: {
            depth: 1,
            locale: '*'
        }
    });
    const [{ data: publishedDoc }] = (0, _usePayloadAPI.default)(originalDocFetchURL, {
        initialParams: {
            depth: 1,
            locale: '*'
        }
    });
    const [{ data: mostRecentDoc }] = (0, _usePayloadAPI.default)(originalDocFetchURL, {
        initialParams: {
            depth: 1,
            draft: true,
            locale: '*'
        }
    });
    const [{ data: compareDoc }] = (0, _usePayloadAPI.default)(compareFetchURL, {
        initialParams: {
            depth: 1,
            draft: 'true',
            locale: '*'
        }
    });
    const sharedParams = (status)=>{
        return {
            depth: 0,
            limit: 1,
            sort: '-updatedAt',
            where: {
                'version._status': {
                    equals: status
                }
            }
        };
    };
    const [{ data: draft }] = (0, _usePayloadAPI.default)(compareBaseURL, {
        initialParams: {
            ...sharedParams('draft')
        }
    });
    const [{ data: published }] = (0, _usePayloadAPI.default)(compareBaseURL, {
        initialParams: {
            ...sharedParams('published')
        }
    });
    (0, _react.useEffect)(()=>{
        const formattedPublished = published?.docs?.length > 0 && published?.docs[0];
        const formattedDraft = draft?.docs?.length > 0 && draft?.docs[0];
        if (!formattedPublished || !formattedDraft) return;
        const publishedNewerThanDraft = formattedPublished?.updatedAt > formattedDraft?.updatedAt;
        setLatestDraftVersion(publishedNewerThanDraft ? undefined : formattedDraft?.id);
        setLatestPublishedVersion(formattedPublished.latest ? formattedPublished?.id : undefined);
    }, [
        draft,
        published
    ]);
    (0, _react.useEffect)(()=>{
        let nav = [];
        if (collection) {
            let docLabel = '';
            if (mostRecentDoc) {
                const { useAsTitle } = collection.admin;
                if (useAsTitle !== 'id') {
                    const titleField = collection.fields.find((field)=>(0, _types.fieldAffectsData)(field) && field.name === useAsTitle);
                    if (titleField && mostRecentDoc[useAsTitle]) {
                        if (titleField.localized) {
                            docLabel = mostRecentDoc[useAsTitle]?.[locale];
                        } else {
                            docLabel = mostRecentDoc[useAsTitle];
                        }
                    } else {
                        docLabel = `[${t('general:untitled')}]`;
                    }
                } else {
                    docLabel = mostRecentDoc.id;
                }
            }
            nav = [
                {
                    label: (0, _getTranslation.getTranslation)(collection.labels.plural, i18n),
                    url: `${admin}/collections/${collection.slug}`
                },
                {
                    label: docLabel,
                    url: `${admin}/collections/${collection.slug}/${id}`
                },
                {
                    label: 'Versions',
                    url: `${admin}/collections/${collection.slug}/${id}/versions`
                },
                {
                    label: doc?.createdAt ? (0, _formatDate.formatDate)(doc.createdAt, dateFormat, i18n?.language) : ''
                }
            ];
        }
        if (global) {
            nav = [
                {
                    label: global.label,
                    url: `${admin}/globals/${global.slug}`
                },
                {
                    label: 'Versions',
                    url: `${admin}/globals/${global.slug}/versions`
                },
                {
                    label: doc?.createdAt ? (0, _formatDate.formatDate)(doc.createdAt, dateFormat, i18n?.language) : ''
                }
            ];
        }
        setStepNav(nav);
    }, [
        setStepNav,
        collection,
        global,
        dateFormat,
        doc,
        mostRecentDoc,
        admin,
        id,
        locale,
        t,
        i18n
    ]);
    (0, _react.useEffect)(()=>{
        const editConfig = (collection || global)?.admin?.components?.views?.Edit;
        const versionActions = editConfig && 'Version' in editConfig && 'actions' in editConfig.Version ? editConfig.Version.actions : [];
        setViewActions(versionActions);
        return ()=>{
            setViewActions([]);
        };
    }, [
        collection,
        global,
        setViewActions
    ]);
    let metaTitle;
    let metaDesc;
    const versionCreatedAt = doc?.updatedAt ? (0, _formatDate.formatDate)(doc.updatedAt, dateFormat, i18n?.language) : '';
    if (collection) {
        const useAsTitle = collection?.admin?.useAsTitle || 'id';
        metaTitle = `${t('version')} - ${versionCreatedAt} - ${doc[useAsTitle]} - ${entityLabel}`;
        metaDesc = t('viewingVersion', {
            documentTitle: doc[useAsTitle],
            entityLabel
        });
    }
    if (global) {
        metaTitle = `${t('version')} - ${versionCreatedAt} - ${entityLabel}`;
        metaDesc = t('viewingVersionGlobal', {
            entityLabel
        });
    }
    let comparison = compareDoc?.version;
    if (compareValue?.value === 'mostRecent') {
        comparison = mostRecentDoc;
    }
    if (compareValue?.value === 'published') {
        comparison = publishedDoc;
    }
    const canUpdate = docPermissions?.update?.permission;
    if (isError) {
        return /*#__PURE__*/ _react.default.createElement(_NotFound.default, {
            marginTop: "large"
        });
    }
    return /*#__PURE__*/ _react.default.createElement("main", {
        className: baseClass
    }, /*#__PURE__*/ _react.default.createElement(_Meta.default, {
        description: metaDesc,
        title: metaTitle
    }), /*#__PURE__*/ _react.default.createElement(_Gutter.Gutter, {
        className: `${baseClass}__wrap`
    }, /*#__PURE__*/ _react.default.createElement("div", {
        className: `${baseClass}__header-wrap`
    }, /*#__PURE__*/ _react.default.createElement("p", {
        className: `${baseClass}__created-at`
    }, t('versionCreatedOn', {
        version: t(doc?.autosave ? 'autosavedVersion' : 'version')
    })), /*#__PURE__*/ _react.default.createElement("header", {
        className: `${baseClass}__header`
    }, /*#__PURE__*/ _react.default.createElement("h2", null, versionCreatedAt), canUpdate && /*#__PURE__*/ _react.default.createElement(_Restore.default, {
        className: `${baseClass}__restore`,
        collection: collection,
        global: global,
        originalDocID: id,
        versionDate: versionCreatedAt,
        versionID: versionID
    }))), /*#__PURE__*/ _react.default.createElement("div", {
        className: `${baseClass}__controls`
    }, /*#__PURE__*/ _react.default.createElement(_Compare.default, {
        baseURL: compareBaseURL,
        latestDraftVersion: latestDraftVersion,
        latestPublishedVersion: latestPublishedVersion,
        onChange: setCompareValue,
        parentID: parentID,
        value: compareValue,
        versionID: versionID
    }), localization && /*#__PURE__*/ _react.default.createElement(_SelectLocales.default, {
        onChange: setLocales,
        options: localeOptions,
        value: locales
    })), doc?.version && /*#__PURE__*/ _react.default.createElement(_RenderFieldsToDiff.default, {
        comparison: comparison,
        fieldComponents: _fields.default,
        fieldPermissions: fieldPermissions,
        fields: fields,
        locales: locales ? locales.map(({ label })=>typeof label === 'string' ? label : undefined) : [],
        version: doc?.version
    })));
};
const _default = VersionView;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9hZG1pbi9jb21wb25lbnRzL3ZpZXdzL1ZlcnNpb24vVmVyc2lvbi50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IHVzZUVmZmVjdCwgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCdcbmltcG9ydCB7IHVzZVRyYW5zbGF0aW9uIH0gZnJvbSAncmVhY3QtaTE4bmV4dCdcbmltcG9ydCB7IHVzZVJvdXRlTWF0Y2ggfSBmcm9tICdyZWFjdC1yb3V0ZXItZG9tJ1xuXG5pbXBvcnQgdHlwZSB7IEZpZWxkUGVybWlzc2lvbnMgfSBmcm9tICcuLi8uLi8uLi8uLi9hdXRoJ1xuaW1wb3J0IHR5cGUgeyBGaWVsZCwgRmllbGRBZmZlY3RpbmdEYXRhIH0gZnJvbSAnLi4vLi4vLi4vLi4vZmllbGRzL2NvbmZpZy90eXBlcydcbmltcG9ydCB0eXBlIHsgT3B0aW9uIH0gZnJvbSAnLi4vLi4vZWxlbWVudHMvUmVhY3RTZWxlY3QvdHlwZXMnXG5pbXBvcnQgdHlwZSB7IFN0ZXBOYXZJdGVtIH0gZnJvbSAnLi4vLi4vZWxlbWVudHMvU3RlcE5hdi90eXBlcydcbmltcG9ydCB0eXBlIHsgQ29tcGFyZU9wdGlvbiwgUHJvcHMgfSBmcm9tICcuL3R5cGVzJ1xuXG5pbXBvcnQgeyBmaWVsZEFmZmVjdHNEYXRhIH0gZnJvbSAnLi4vLi4vLi4vLi4vZmllbGRzL2NvbmZpZy90eXBlcydcbmltcG9ydCB7IGdldFRyYW5zbGF0aW9uIH0gZnJvbSAnLi4vLi4vLi4vLi4vdXRpbGl0aWVzL2dldFRyYW5zbGF0aW9uJ1xuaW1wb3J0IHVzZVBheWxvYWRBUEkgZnJvbSAnLi4vLi4vLi4vaG9va3MvdXNlUGF5bG9hZEFQSSdcbmltcG9ydCB7IGZvcm1hdERhdGUgfSBmcm9tICcuLi8uLi8uLi91dGlsaXRpZXMvZm9ybWF0RGF0ZSdcbmltcG9ydCB7IEd1dHRlciB9IGZyb20gJy4uLy4uL2VsZW1lbnRzL0d1dHRlcidcbmltcG9ydCB7IHVzZVN0ZXBOYXYgfSBmcm9tICcuLi8uLi9lbGVtZW50cy9TdGVwTmF2J1xuaW1wb3J0IHsgdXNlQWN0aW9ucyB9IGZyb20gJy4uLy4uL3V0aWxpdGllcy9BY3Rpb25zUHJvdmlkZXInXG5pbXBvcnQgeyB1c2VBdXRoIH0gZnJvbSAnLi4vLi4vdXRpbGl0aWVzL0F1dGgnXG5pbXBvcnQgeyB1c2VDb25maWcgfSBmcm9tICcuLi8uLi91dGlsaXRpZXMvQ29uZmlnJ1xuaW1wb3J0IHsgdXNlRG9jdW1lbnRJbmZvIH0gZnJvbSAnLi4vLi4vdXRpbGl0aWVzL0RvY3VtZW50SW5mbydcbmltcG9ydCB7IHVzZUxvY2FsZSB9IGZyb20gJy4uLy4uL3V0aWxpdGllcy9Mb2NhbGUnXG5pbXBvcnQgTWV0YSBmcm9tICcuLi8uLi91dGlsaXRpZXMvTWV0YSdcbmltcG9ydCBOb3RGb3VuZCBmcm9tICcuLi9Ob3RGb3VuZCdcbmltcG9ydCBDb21wYXJlVmVyc2lvbiBmcm9tICcuL0NvbXBhcmUnXG5pbXBvcnQgUmVuZGVyRmllbGRzVG9EaWZmIGZyb20gJy4vUmVuZGVyRmllbGRzVG9EaWZmJ1xuaW1wb3J0IGZpZWxkQ29tcG9uZW50cyBmcm9tICcuL1JlbmRlckZpZWxkc1RvRGlmZi9maWVsZHMnXG5pbXBvcnQgUmVzdG9yZSBmcm9tICcuL1Jlc3RvcmUnXG5pbXBvcnQgU2VsZWN0TG9jYWxlcyBmcm9tICcuL1NlbGVjdExvY2FsZXMnXG5pbXBvcnQgJy4vaW5kZXguc2NzcydcblxuY29uc3QgYmFzZUNsYXNzID0gJ3ZpZXctdmVyc2lvbidcblxuY29uc3QgVmVyc2lvblZpZXc6IFJlYWN0LkZDPFByb3BzPiA9ICh7IGNvbGxlY3Rpb24sIGdsb2JhbCB9KSA9PiB7XG4gIGNvbnN0IHtcbiAgICBhZG1pbjogeyBkYXRlRm9ybWF0IH0sXG4gICAgbG9jYWxpemF0aW9uLFxuICAgIHJvdXRlczogeyBhZG1pbiwgYXBpIH0sXG4gICAgc2VydmVyVVJMLFxuICB9ID0gdXNlQ29uZmlnKClcbiAgY29uc3QgeyBzZXRTdGVwTmF2IH0gPSB1c2VTdGVwTmF2KClcblxuICBjb25zdCB7IHNldFZpZXdBY3Rpb25zIH0gPSB1c2VBY3Rpb25zKClcblxuICBjb25zdCB7XG4gICAgcGFyYW1zOiB7IGlkLCB2ZXJzaW9uSUQgfSxcbiAgfSA9IHVzZVJvdXRlTWF0Y2g8eyBpZD86IHN0cmluZzsgdmVyc2lvbklEOiBzdHJpbmcgfT4oKVxuXG4gIGNvbnN0IFtjb21wYXJlVmFsdWUsIHNldENvbXBhcmVWYWx1ZV0gPSB1c2VTdGF0ZTxDb21wYXJlT3B0aW9uPigpXG4gIGNvbnN0IFtsb2NhbGVPcHRpb25zXSA9IHVzZVN0YXRlPE9wdGlvbltdPigoKSA9PiB7XG4gICAgaWYgKGxvY2FsaXphdGlvbiAmJiBsb2NhbGl6YXRpb24/LmxvY2FsZXMpIHtcbiAgICAgIHJldHVybiBsb2NhbGl6YXRpb24ubG9jYWxlcy5tYXAoKHsgY29kZSwgbGFiZWwgfSkgPT4gKHtcbiAgICAgICAgbGFiZWwsXG4gICAgICAgIHZhbHVlOiBjb2RlLFxuICAgICAgfSkpXG4gICAgfVxuICAgIHJldHVybiBbXVxuICB9KVxuICBjb25zdCBbbG9jYWxlcywgc2V0TG9jYWxlc10gPSB1c2VTdGF0ZTxPcHRpb25bXT4obG9jYWxlT3B0aW9ucylcbiAgY29uc3QgeyBwZXJtaXNzaW9ucyB9ID0gdXNlQXV0aCgpXG4gIGNvbnN0IHsgY29kZTogbG9jYWxlIH0gPSB1c2VMb2NhbGUoKVxuICBjb25zdCB7IGkxOG4sIHQgfSA9IHVzZVRyYW5zbGF0aW9uKCd2ZXJzaW9uJylcbiAgY29uc3QgeyBkb2NQZXJtaXNzaW9ucyB9ID0gdXNlRG9jdW1lbnRJbmZvKClcblxuICBsZXQgb3JpZ2luYWxEb2NGZXRjaFVSTDogc3RyaW5nXG4gIGxldCB2ZXJzaW9uRmV0Y2hVUkw6IHN0cmluZ1xuICBsZXQgZW50aXR5TGFiZWw6IHN0cmluZ1xuICBsZXQgZmllbGRzOiBGaWVsZFtdXG4gIGxldCBmaWVsZFBlcm1pc3Npb25zOiBSZWNvcmQ8c3RyaW5nLCBGaWVsZFBlcm1pc3Npb25zPlxuICBsZXQgY29tcGFyZUJhc2VVUkw6IHN0cmluZ1xuICBsZXQgc2x1Zzogc3RyaW5nXG4gIGxldCBwYXJlbnRJRDogc3RyaW5nXG4gIGNvbnN0IFtsYXRlc3REcmFmdFZlcnNpb24sIHNldExhdGVzdERyYWZ0VmVyc2lvbl0gPSB1c2VTdGF0ZSh1bmRlZmluZWQpXG4gIGNvbnN0IFtsYXRlc3RQdWJsaXNoZWRWZXJzaW9uLCBzZXRMYXRlc3RQdWJsaXNoZWRWZXJzaW9uXSA9IHVzZVN0YXRlKHVuZGVmaW5lZClcblxuICBpZiAoY29sbGVjdGlvbikge1xuICAgIDsoeyBzbHVnIH0gPSBjb2xsZWN0aW9uKVxuICAgIG9yaWdpbmFsRG9jRmV0Y2hVUkwgPSBgJHtzZXJ2ZXJVUkx9JHthcGl9LyR7c2x1Z30vJHtpZH1gXG4gICAgdmVyc2lvbkZldGNoVVJMID0gYCR7c2VydmVyVVJMfSR7YXBpfS8ke3NsdWd9L3ZlcnNpb25zLyR7dmVyc2lvbklEfWBcbiAgICBjb21wYXJlQmFzZVVSTCA9IGAke3NlcnZlclVSTH0ke2FwaX0vJHtzbHVnfS92ZXJzaW9uc2BcbiAgICBlbnRpdHlMYWJlbCA9IGdldFRyYW5zbGF0aW9uKGNvbGxlY3Rpb24ubGFiZWxzLnNpbmd1bGFyLCBpMThuKVxuICAgIHBhcmVudElEID0gaWRcbiAgICBmaWVsZHMgPSBjb2xsZWN0aW9uLmZpZWxkc1xuICAgIGZpZWxkUGVybWlzc2lvbnMgPSBwZXJtaXNzaW9ucy5jb2xsZWN0aW9uc1tjb2xsZWN0aW9uLnNsdWddLmZpZWxkc1xuICB9XG5cbiAgaWYgKGdsb2JhbCkge1xuICAgIDsoeyBzbHVnIH0gPSBnbG9iYWwpXG4gICAgb3JpZ2luYWxEb2NGZXRjaFVSTCA9IGAke3NlcnZlclVSTH0ke2FwaX0vZ2xvYmFscy8ke3NsdWd9YFxuICAgIHZlcnNpb25GZXRjaFVSTCA9IGAke3NlcnZlclVSTH0ke2FwaX0vZ2xvYmFscy8ke3NsdWd9L3ZlcnNpb25zLyR7dmVyc2lvbklEfWBcbiAgICBjb21wYXJlQmFzZVVSTCA9IGAke3NlcnZlclVSTH0ke2FwaX0vZ2xvYmFscy8ke3NsdWd9L3ZlcnNpb25zYFxuICAgIGVudGl0eUxhYmVsID0gZ2V0VHJhbnNsYXRpb24oZ2xvYmFsLmxhYmVsLCBpMThuKVxuICAgIGZpZWxkcyA9IGdsb2JhbC5maWVsZHNcbiAgICBmaWVsZFBlcm1pc3Npb25zID0gcGVybWlzc2lvbnMuZ2xvYmFsc1tnbG9iYWwuc2x1Z10uZmllbGRzXG4gIH1cblxuICBjb25zdCBjb21wYXJlRmV0Y2hVUkwgPSBjb21wYXJlVmFsdWU/LnZhbHVlICYmIGAke2NvbXBhcmVCYXNlVVJMfS8ke2NvbXBhcmVWYWx1ZS52YWx1ZX1gXG5cbiAgY29uc3QgW3sgZGF0YTogZG9jLCBpc0Vycm9yIH1dID0gdXNlUGF5bG9hZEFQSSh2ZXJzaW9uRmV0Y2hVUkwsIHtcbiAgICBpbml0aWFsUGFyYW1zOiB7IGRlcHRoOiAxLCBsb2NhbGU6ICcqJyB9LFxuICB9KVxuICBjb25zdCBbeyBkYXRhOiBwdWJsaXNoZWREb2MgfV0gPSB1c2VQYXlsb2FkQVBJKG9yaWdpbmFsRG9jRmV0Y2hVUkwsIHtcbiAgICBpbml0aWFsUGFyYW1zOiB7IGRlcHRoOiAxLCBsb2NhbGU6ICcqJyB9LFxuICB9KVxuICBjb25zdCBbeyBkYXRhOiBtb3N0UmVjZW50RG9jIH1dID0gdXNlUGF5bG9hZEFQSShvcmlnaW5hbERvY0ZldGNoVVJMLCB7XG4gICAgaW5pdGlhbFBhcmFtczogeyBkZXB0aDogMSwgZHJhZnQ6IHRydWUsIGxvY2FsZTogJyonIH0sXG4gIH0pXG4gIGNvbnN0IFt7IGRhdGE6IGNvbXBhcmVEb2MgfV0gPSB1c2VQYXlsb2FkQVBJKGNvbXBhcmVGZXRjaFVSTCwge1xuICAgIGluaXRpYWxQYXJhbXM6IHsgZGVwdGg6IDEsIGRyYWZ0OiAndHJ1ZScsIGxvY2FsZTogJyonIH0sXG4gIH0pXG5cbiAgY29uc3Qgc2hhcmVkUGFyYW1zID0gKHN0YXR1cykgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICBkZXB0aDogMCxcbiAgICAgIGxpbWl0OiAxLFxuICAgICAgc29ydDogJy11cGRhdGVkQXQnLFxuICAgICAgd2hlcmU6IHtcbiAgICAgICAgJ3ZlcnNpb24uX3N0YXR1cyc6IHtcbiAgICAgICAgICBlcXVhbHM6IHN0YXR1cyxcbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgfVxuICB9XG5cbiAgY29uc3QgW3sgZGF0YTogZHJhZnQgfV0gPSB1c2VQYXlsb2FkQVBJKGNvbXBhcmVCYXNlVVJMLCB7XG4gICAgaW5pdGlhbFBhcmFtczogeyAuLi5zaGFyZWRQYXJhbXMoJ2RyYWZ0JykgfSxcbiAgfSlcblxuICBjb25zdCBbeyBkYXRhOiBwdWJsaXNoZWQgfV0gPSB1c2VQYXlsb2FkQVBJKGNvbXBhcmVCYXNlVVJMLCB7XG4gICAgaW5pdGlhbFBhcmFtczogeyAuLi5zaGFyZWRQYXJhbXMoJ3B1Ymxpc2hlZCcpIH0sXG4gIH0pXG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBjb25zdCBmb3JtYXR0ZWRQdWJsaXNoZWQgPSBwdWJsaXNoZWQ/LmRvY3M/Lmxlbmd0aCA+IDAgJiYgcHVibGlzaGVkPy5kb2NzWzBdXG4gICAgY29uc3QgZm9ybWF0dGVkRHJhZnQgPSBkcmFmdD8uZG9jcz8ubGVuZ3RoID4gMCAmJiBkcmFmdD8uZG9jc1swXVxuXG4gICAgaWYgKCFmb3JtYXR0ZWRQdWJsaXNoZWQgfHwgIWZvcm1hdHRlZERyYWZ0KSByZXR1cm5cblxuICAgIGNvbnN0IHB1Ymxpc2hlZE5ld2VyVGhhbkRyYWZ0ID0gZm9ybWF0dGVkUHVibGlzaGVkPy51cGRhdGVkQXQgPiBmb3JtYXR0ZWREcmFmdD8udXBkYXRlZEF0XG5cbiAgICBzZXRMYXRlc3REcmFmdFZlcnNpb24ocHVibGlzaGVkTmV3ZXJUaGFuRHJhZnQgPyB1bmRlZmluZWQgOiBmb3JtYXR0ZWREcmFmdD8uaWQpXG4gICAgc2V0TGF0ZXN0UHVibGlzaGVkVmVyc2lvbihmb3JtYXR0ZWRQdWJsaXNoZWQubGF0ZXN0ID8gZm9ybWF0dGVkUHVibGlzaGVkPy5pZCA6IHVuZGVmaW5lZClcbiAgfSwgW2RyYWZ0LCBwdWJsaXNoZWRdKVxuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgbGV0IG5hdjogU3RlcE5hdkl0ZW1bXSA9IFtdXG5cbiAgICBpZiAoY29sbGVjdGlvbikge1xuICAgICAgbGV0IGRvY0xhYmVsID0gJydcblxuICAgICAgaWYgKG1vc3RSZWNlbnREb2MpIHtcbiAgICAgICAgY29uc3QgeyB1c2VBc1RpdGxlIH0gPSBjb2xsZWN0aW9uLmFkbWluXG5cbiAgICAgICAgaWYgKHVzZUFzVGl0bGUgIT09ICdpZCcpIHtcbiAgICAgICAgICBjb25zdCB0aXRsZUZpZWxkID0gY29sbGVjdGlvbi5maWVsZHMuZmluZChcbiAgICAgICAgICAgIChmaWVsZCkgPT4gZmllbGRBZmZlY3RzRGF0YShmaWVsZCkgJiYgZmllbGQubmFtZSA9PT0gdXNlQXNUaXRsZSxcbiAgICAgICAgICApIGFzIEZpZWxkQWZmZWN0aW5nRGF0YVxuXG4gICAgICAgICAgaWYgKHRpdGxlRmllbGQgJiYgbW9zdFJlY2VudERvY1t1c2VBc1RpdGxlXSkge1xuICAgICAgICAgICAgaWYgKHRpdGxlRmllbGQubG9jYWxpemVkKSB7XG4gICAgICAgICAgICAgIGRvY0xhYmVsID0gbW9zdFJlY2VudERvY1t1c2VBc1RpdGxlXT8uW2xvY2FsZV1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGRvY0xhYmVsID0gbW9zdFJlY2VudERvY1t1c2VBc1RpdGxlXVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBkb2NMYWJlbCA9IGBbJHt0KCdnZW5lcmFsOnVudGl0bGVkJyl9XWBcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZG9jTGFiZWwgPSBtb3N0UmVjZW50RG9jLmlkXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgbmF2ID0gW1xuICAgICAgICB7XG4gICAgICAgICAgbGFiZWw6IGdldFRyYW5zbGF0aW9uKGNvbGxlY3Rpb24ubGFiZWxzLnBsdXJhbCwgaTE4biksXG4gICAgICAgICAgdXJsOiBgJHthZG1pbn0vY29sbGVjdGlvbnMvJHtjb2xsZWN0aW9uLnNsdWd9YCxcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIGxhYmVsOiBkb2NMYWJlbCxcbiAgICAgICAgICB1cmw6IGAke2FkbWlufS9jb2xsZWN0aW9ucy8ke2NvbGxlY3Rpb24uc2x1Z30vJHtpZH1gLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgbGFiZWw6ICdWZXJzaW9ucycsXG4gICAgICAgICAgdXJsOiBgJHthZG1pbn0vY29sbGVjdGlvbnMvJHtjb2xsZWN0aW9uLnNsdWd9LyR7aWR9L3ZlcnNpb25zYCxcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIGxhYmVsOiBkb2M/LmNyZWF0ZWRBdCA/IGZvcm1hdERhdGUoZG9jLmNyZWF0ZWRBdCwgZGF0ZUZvcm1hdCwgaTE4bj8ubGFuZ3VhZ2UpIDogJycsXG4gICAgICAgIH0sXG4gICAgICBdXG4gICAgfVxuXG4gICAgaWYgKGdsb2JhbCkge1xuICAgICAgbmF2ID0gW1xuICAgICAgICB7XG4gICAgICAgICAgbGFiZWw6IGdsb2JhbC5sYWJlbCxcbiAgICAgICAgICB1cmw6IGAke2FkbWlufS9nbG9iYWxzLyR7Z2xvYmFsLnNsdWd9YCxcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIGxhYmVsOiAnVmVyc2lvbnMnLFxuICAgICAgICAgIHVybDogYCR7YWRtaW59L2dsb2JhbHMvJHtnbG9iYWwuc2x1Z30vdmVyc2lvbnNgLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgbGFiZWw6IGRvYz8uY3JlYXRlZEF0ID8gZm9ybWF0RGF0ZShkb2MuY3JlYXRlZEF0LCBkYXRlRm9ybWF0LCBpMThuPy5sYW5ndWFnZSkgOiAnJyxcbiAgICAgICAgfSxcbiAgICAgIF1cbiAgICB9XG5cbiAgICBzZXRTdGVwTmF2KG5hdilcbiAgfSwgW3NldFN0ZXBOYXYsIGNvbGxlY3Rpb24sIGdsb2JhbCwgZGF0ZUZvcm1hdCwgZG9jLCBtb3N0UmVjZW50RG9jLCBhZG1pbiwgaWQsIGxvY2FsZSwgdCwgaTE4bl0pXG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBjb25zdCBlZGl0Q29uZmlnID0gKGNvbGxlY3Rpb24gfHwgZ2xvYmFsKT8uYWRtaW4/LmNvbXBvbmVudHM/LnZpZXdzPy5FZGl0XG4gICAgY29uc3QgdmVyc2lvbkFjdGlvbnMgPVxuICAgICAgZWRpdENvbmZpZyAmJiAnVmVyc2lvbicgaW4gZWRpdENvbmZpZyAmJiAnYWN0aW9ucycgaW4gZWRpdENvbmZpZy5WZXJzaW9uXG4gICAgICAgID8gZWRpdENvbmZpZy5WZXJzaW9uLmFjdGlvbnNcbiAgICAgICAgOiBbXVxuXG4gICAgc2V0Vmlld0FjdGlvbnModmVyc2lvbkFjdGlvbnMpXG5cbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgc2V0Vmlld0FjdGlvbnMoW10pXG4gICAgfVxuICB9LCBbY29sbGVjdGlvbiwgZ2xvYmFsLCBzZXRWaWV3QWN0aW9uc10pXG5cbiAgbGV0IG1ldGFUaXRsZTogc3RyaW5nXG4gIGxldCBtZXRhRGVzYzogc3RyaW5nXG4gIGNvbnN0IHZlcnNpb25DcmVhdGVkQXQgPSBkb2M/LnVwZGF0ZWRBdFxuICAgID8gZm9ybWF0RGF0ZShkb2MudXBkYXRlZEF0LCBkYXRlRm9ybWF0LCBpMThuPy5sYW5ndWFnZSlcbiAgICA6ICcnXG5cbiAgaWYgKGNvbGxlY3Rpb24pIHtcbiAgICBjb25zdCB1c2VBc1RpdGxlID0gY29sbGVjdGlvbj8uYWRtaW4/LnVzZUFzVGl0bGUgfHwgJ2lkJ1xuICAgIG1ldGFUaXRsZSA9IGAke3QoJ3ZlcnNpb24nKX0gLSAke3ZlcnNpb25DcmVhdGVkQXR9IC0gJHtkb2NbdXNlQXNUaXRsZV19IC0gJHtlbnRpdHlMYWJlbH1gXG4gICAgbWV0YURlc2MgPSB0KCd2aWV3aW5nVmVyc2lvbicsIHsgZG9jdW1lbnRUaXRsZTogZG9jW3VzZUFzVGl0bGVdLCBlbnRpdHlMYWJlbCB9KVxuICB9XG5cbiAgaWYgKGdsb2JhbCkge1xuICAgIG1ldGFUaXRsZSA9IGAke3QoJ3ZlcnNpb24nKX0gLSAke3ZlcnNpb25DcmVhdGVkQXR9IC0gJHtlbnRpdHlMYWJlbH1gXG4gICAgbWV0YURlc2MgPSB0KCd2aWV3aW5nVmVyc2lvbkdsb2JhbCcsIHsgZW50aXR5TGFiZWwgfSlcbiAgfVxuXG4gIGxldCBjb21wYXJpc29uID0gY29tcGFyZURvYz8udmVyc2lvblxuXG4gIGlmIChjb21wYXJlVmFsdWU/LnZhbHVlID09PSAnbW9zdFJlY2VudCcpIHtcbiAgICBjb21wYXJpc29uID0gbW9zdFJlY2VudERvY1xuICB9XG5cbiAgaWYgKGNvbXBhcmVWYWx1ZT8udmFsdWUgPT09ICdwdWJsaXNoZWQnKSB7XG4gICAgY29tcGFyaXNvbiA9IHB1Ymxpc2hlZERvY1xuICB9XG5cbiAgY29uc3QgY2FuVXBkYXRlID0gZG9jUGVybWlzc2lvbnM/LnVwZGF0ZT8ucGVybWlzc2lvblxuXG4gIGlmIChpc0Vycm9yKSB7XG4gICAgcmV0dXJuIDxOb3RGb3VuZCBtYXJnaW5Ub3A9XCJsYXJnZVwiIC8+XG4gIH1cblxuICByZXR1cm4gKFxuICAgIDxtYWluIGNsYXNzTmFtZT17YmFzZUNsYXNzfT5cbiAgICAgIDxNZXRhIGRlc2NyaXB0aW9uPXttZXRhRGVzY30gdGl0bGU9e21ldGFUaXRsZX0gLz5cbiAgICAgIDxHdXR0ZXIgY2xhc3NOYW1lPXtgJHtiYXNlQ2xhc3N9X193cmFwYH0+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPXtgJHtiYXNlQ2xhc3N9X19oZWFkZXItd3JhcGB9PlxuICAgICAgICAgIDxwIGNsYXNzTmFtZT17YCR7YmFzZUNsYXNzfV9fY3JlYXRlZC1hdGB9PlxuICAgICAgICAgICAge3QoJ3ZlcnNpb25DcmVhdGVkT24nLCB7XG4gICAgICAgICAgICAgIHZlcnNpb246IHQoZG9jPy5hdXRvc2F2ZSA/ICdhdXRvc2F2ZWRWZXJzaW9uJyA6ICd2ZXJzaW9uJyksXG4gICAgICAgICAgICB9KX1cbiAgICAgICAgICA8L3A+XG4gICAgICAgICAgPGhlYWRlciBjbGFzc05hbWU9e2Ake2Jhc2VDbGFzc31fX2hlYWRlcmB9PlxuICAgICAgICAgICAgPGgyPnt2ZXJzaW9uQ3JlYXRlZEF0fTwvaDI+XG4gICAgICAgICAgICB7Y2FuVXBkYXRlICYmIChcbiAgICAgICAgICAgICAgPFJlc3RvcmVcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9e2Ake2Jhc2VDbGFzc31fX3Jlc3RvcmVgfVxuICAgICAgICAgICAgICAgIGNvbGxlY3Rpb249e2NvbGxlY3Rpb259XG4gICAgICAgICAgICAgICAgZ2xvYmFsPXtnbG9iYWx9XG4gICAgICAgICAgICAgICAgb3JpZ2luYWxEb2NJRD17aWR9XG4gICAgICAgICAgICAgICAgdmVyc2lvbkRhdGU9e3ZlcnNpb25DcmVhdGVkQXR9XG4gICAgICAgICAgICAgICAgdmVyc2lvbklEPXt2ZXJzaW9uSUR9XG4gICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICApfVxuICAgICAgICAgIDwvaGVhZGVyPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9e2Ake2Jhc2VDbGFzc31fX2NvbnRyb2xzYH0+XG4gICAgICAgICAgPENvbXBhcmVWZXJzaW9uXG4gICAgICAgICAgICBiYXNlVVJMPXtjb21wYXJlQmFzZVVSTH1cbiAgICAgICAgICAgIGxhdGVzdERyYWZ0VmVyc2lvbj17bGF0ZXN0RHJhZnRWZXJzaW9ufVxuICAgICAgICAgICAgbGF0ZXN0UHVibGlzaGVkVmVyc2lvbj17bGF0ZXN0UHVibGlzaGVkVmVyc2lvbn1cbiAgICAgICAgICAgIG9uQ2hhbmdlPXtzZXRDb21wYXJlVmFsdWV9XG4gICAgICAgICAgICBwYXJlbnRJRD17cGFyZW50SUR9XG4gICAgICAgICAgICB2YWx1ZT17Y29tcGFyZVZhbHVlfVxuICAgICAgICAgICAgdmVyc2lvbklEPXt2ZXJzaW9uSUR9XG4gICAgICAgICAgLz5cbiAgICAgICAgICB7bG9jYWxpemF0aW9uICYmIChcbiAgICAgICAgICAgIDxTZWxlY3RMb2NhbGVzIG9uQ2hhbmdlPXtzZXRMb2NhbGVzfSBvcHRpb25zPXtsb2NhbGVPcHRpb25zfSB2YWx1ZT17bG9jYWxlc30gLz5cbiAgICAgICAgICApfVxuICAgICAgICA8L2Rpdj5cblxuICAgICAgICB7ZG9jPy52ZXJzaW9uICYmIChcbiAgICAgICAgICA8UmVuZGVyRmllbGRzVG9EaWZmXG4gICAgICAgICAgICBjb21wYXJpc29uPXtjb21wYXJpc29ufVxuICAgICAgICAgICAgZmllbGRDb21wb25lbnRzPXtmaWVsZENvbXBvbmVudHN9XG4gICAgICAgICAgICBmaWVsZFBlcm1pc3Npb25zPXtmaWVsZFBlcm1pc3Npb25zfVxuICAgICAgICAgICAgZmllbGRzPXtmaWVsZHN9XG4gICAgICAgICAgICBsb2NhbGVzPXtcbiAgICAgICAgICAgICAgbG9jYWxlc1xuICAgICAgICAgICAgICAgID8gbG9jYWxlcy5tYXAoKHsgbGFiZWwgfSkgPT4gKHR5cGVvZiBsYWJlbCA9PT0gJ3N0cmluZycgPyBsYWJlbCA6IHVuZGVmaW5lZCkpXG4gICAgICAgICAgICAgICAgOiBbXVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmVyc2lvbj17ZG9jPy52ZXJzaW9ufVxuICAgICAgICAgIC8+XG4gICAgICAgICl9XG4gICAgICA8L0d1dHRlcj5cbiAgICA8L21haW4+XG4gIClcbn1cblxuZXhwb3J0IGRlZmF1bHQgVmVyc2lvblZpZXdcbiJdLCJuYW1lcyI6WyJiYXNlQ2xhc3MiLCJWZXJzaW9uVmlldyIsImNvbGxlY3Rpb24iLCJnbG9iYWwiLCJhZG1pbiIsImRhdGVGb3JtYXQiLCJsb2NhbGl6YXRpb24iLCJyb3V0ZXMiLCJhcGkiLCJzZXJ2ZXJVUkwiLCJ1c2VDb25maWciLCJzZXRTdGVwTmF2IiwidXNlU3RlcE5hdiIsInNldFZpZXdBY3Rpb25zIiwidXNlQWN0aW9ucyIsInBhcmFtcyIsImlkIiwidmVyc2lvbklEIiwidXNlUm91dGVNYXRjaCIsImNvbXBhcmVWYWx1ZSIsInNldENvbXBhcmVWYWx1ZSIsInVzZVN0YXRlIiwibG9jYWxlT3B0aW9ucyIsImxvY2FsZXMiLCJtYXAiLCJjb2RlIiwibGFiZWwiLCJ2YWx1ZSIsInNldExvY2FsZXMiLCJwZXJtaXNzaW9ucyIsInVzZUF1dGgiLCJsb2NhbGUiLCJ1c2VMb2NhbGUiLCJpMThuIiwidCIsInVzZVRyYW5zbGF0aW9uIiwiZG9jUGVybWlzc2lvbnMiLCJ1c2VEb2N1bWVudEluZm8iLCJvcmlnaW5hbERvY0ZldGNoVVJMIiwidmVyc2lvbkZldGNoVVJMIiwiZW50aXR5TGFiZWwiLCJmaWVsZHMiLCJmaWVsZFBlcm1pc3Npb25zIiwiY29tcGFyZUJhc2VVUkwiLCJzbHVnIiwicGFyZW50SUQiLCJsYXRlc3REcmFmdFZlcnNpb24iLCJzZXRMYXRlc3REcmFmdFZlcnNpb24iLCJ1bmRlZmluZWQiLCJsYXRlc3RQdWJsaXNoZWRWZXJzaW9uIiwic2V0TGF0ZXN0UHVibGlzaGVkVmVyc2lvbiIsImdldFRyYW5zbGF0aW9uIiwibGFiZWxzIiwic2luZ3VsYXIiLCJjb2xsZWN0aW9ucyIsImdsb2JhbHMiLCJjb21wYXJlRmV0Y2hVUkwiLCJkYXRhIiwiZG9jIiwiaXNFcnJvciIsInVzZVBheWxvYWRBUEkiLCJpbml0aWFsUGFyYW1zIiwiZGVwdGgiLCJwdWJsaXNoZWREb2MiLCJtb3N0UmVjZW50RG9jIiwiZHJhZnQiLCJjb21wYXJlRG9jIiwic2hhcmVkUGFyYW1zIiwic3RhdHVzIiwibGltaXQiLCJzb3J0Iiwid2hlcmUiLCJlcXVhbHMiLCJwdWJsaXNoZWQiLCJ1c2VFZmZlY3QiLCJmb3JtYXR0ZWRQdWJsaXNoZWQiLCJkb2NzIiwibGVuZ3RoIiwiZm9ybWF0dGVkRHJhZnQiLCJwdWJsaXNoZWROZXdlclRoYW5EcmFmdCIsInVwZGF0ZWRBdCIsImxhdGVzdCIsIm5hdiIsImRvY0xhYmVsIiwidXNlQXNUaXRsZSIsInRpdGxlRmllbGQiLCJmaW5kIiwiZmllbGQiLCJmaWVsZEFmZmVjdHNEYXRhIiwibmFtZSIsImxvY2FsaXplZCIsInBsdXJhbCIsInVybCIsImNyZWF0ZWRBdCIsImZvcm1hdERhdGUiLCJsYW5ndWFnZSIsImVkaXRDb25maWciLCJjb21wb25lbnRzIiwidmlld3MiLCJFZGl0IiwidmVyc2lvbkFjdGlvbnMiLCJWZXJzaW9uIiwiYWN0aW9ucyIsIm1ldGFUaXRsZSIsIm1ldGFEZXNjIiwidmVyc2lvbkNyZWF0ZWRBdCIsImRvY3VtZW50VGl0bGUiLCJjb21wYXJpc29uIiwidmVyc2lvbiIsImNhblVwZGF0ZSIsInVwZGF0ZSIsInBlcm1pc3Npb24iLCJOb3RGb3VuZCIsIm1hcmdpblRvcCIsIm1haW4iLCJjbGFzc05hbWUiLCJNZXRhIiwiZGVzY3JpcHRpb24iLCJ0aXRsZSIsIkd1dHRlciIsImRpdiIsInAiLCJhdXRvc2F2ZSIsImhlYWRlciIsImgyIiwiUmVzdG9yZSIsIm9yaWdpbmFsRG9jSUQiLCJ2ZXJzaW9uRGF0ZSIsIkNvbXBhcmVWZXJzaW9uIiwiYmFzZVVSTCIsIm9uQ2hhbmdlIiwiU2VsZWN0TG9jYWxlcyIsIm9wdGlvbnMiLCJSZW5kZXJGaWVsZHNUb0RpZmYiLCJmaWVsZENvbXBvbmVudHMiXSwicmFuZ2VNYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsiLCJtYXBwaW5ncyI6Ijs7OzsrQkEwVEE7OztlQUFBOzs7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