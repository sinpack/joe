"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _types = require("../../../../../fields/config/types");
const _Nested = /*#__PURE__*/ _interop_require_default(require("./fields/Nested"));
const _diffMethods = require("./fields/diffMethods");
require("./index.scss");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const baseClass = 'render-field-diffs';
const RenderFieldsToDiff = ({ comparison, fieldComponents, fieldPermissions, fields, locales, version })=>/*#__PURE__*/ _react.default.createElement("div", {
        className: baseClass
    }, fields.map((field, i)=>{
        const Component = fieldComponents[field.type];
        const isRichText = field.type === 'richText';
        const diffMethod = _diffMethods.diffMethods[field.type] || 'CHARS';
        if (Component) {
            if ((0, _types.fieldAffectsData)(field)) {
                const valueIsObject = field.type === 'code' || field.type === 'json';
                const versionValue = valueIsObject ? JSON.stringify(version?.[field.name]) : version?.[field.name];
                const comparisonValue = valueIsObject ? JSON.stringify(comparison?.[field.name]) : comparison?.[field.name];
                const hasPermission = fieldPermissions?.[field.name]?.read?.permission;
                const subFieldPermissions = fieldPermissions?.[field.name]?.fields;
                if (hasPermission === false) return null;
                if (field.localized) {
                    return /*#__PURE__*/ _react.default.createElement("div", {
                        className: `${baseClass}__field`,
                        key: i
                    }, locales.map((locale, index)=>{
                        const versionLocaleValue = versionValue?.[locale];
                        const comparisonLocaleValue = comparisonValue?.[locale];
                        return /*#__PURE__*/ _react.default.createElement("div", {
                            className: `${baseClass}__locale`,
                            key: [
                                locale,
                                index
                            ].join('-')
                        }, /*#__PURE__*/ _react.default.createElement("div", {
                            className: `${baseClass}__locale-value`
                        }, /*#__PURE__*/ _react.default.createElement(Component, {
                            comparison: comparisonLocaleValue,
                            diffMethod: diffMethod,
                            field: field,
                            fieldComponents: fieldComponents,
                            isRichText: isRichText,
                            locale: locale,
                            locales: locales,
                            permissions: subFieldPermissions,
                            version: versionLocaleValue
                        })));
                    }));
                }
                return /*#__PURE__*/ _react.default.createElement("div", {
                    className: `${baseClass}__field`,
                    key: i
                }, /*#__PURE__*/ _react.default.createElement(Component, {
                    comparison: comparisonValue,
                    diffMethod: diffMethod,
                    field: field,
                    fieldComponents: fieldComponents,
                    isRichText: isRichText,
                    locales: locales,
                    permissions: subFieldPermissions,
                    version: versionValue
                }));
            }
            if (field.type === 'tabs') {
                const Tabs = fieldComponents.tabs;
                return /*#__PURE__*/ _react.default.createElement(Tabs, {
                    comparison: comparison,
                    field: field,
                    fieldComponents: fieldComponents,
                    key: i,
                    locales: locales,
                    version: version
                });
            }
            // At this point, we are dealing with a `row` or similar
            if ((0, _types.fieldHasSubFields)(field)) {
                return /*#__PURE__*/ _react.default.createElement(_Nested.default, {
                    comparison: comparison,
                    disableGutter: true,
                    field: field,
                    fieldComponents: fieldComponents,
                    key: i,
                    locales: locales,
                    permissions: fieldPermissions,
                    version: version
                });
            }
        }
        return null;
    }));
const _default = RenderFieldsToDiff;

//# sourceMappingURL=data:application/json;base64,