"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
const _react = /*#__PURE__*/ _interop_require_wildcard(require("react"));
const _reacti18next = require("react-i18next");
const _reactrouterdom = require("react-router-dom");
const _usePayloadAPI = /*#__PURE__*/ _interop_require_default(require("../../../hooks/usePayloadAPI"));
const _buildStateFromSchema = /*#__PURE__*/ _interop_require_default(require("../../forms/Form/buildStateFromSchema"));
const _fieldtypes = require("../../forms/field-types");
const _Auth = require("../../utilities/Auth");
const _Config = require("../../utilities/Config");
const _DocumentEvents = require("../../utilities/DocumentEvents");
const _DocumentInfo = require("../../utilities/DocumentInfo");
const _EditDepth = require("../../utilities/EditDepth");
const _Locale = require("../../utilities/Locale");
const _Preferences = require("../../utilities/Preferences");
const _RenderCustomComponent = /*#__PURE__*/ _interop_require_default(require("../../utilities/RenderCustomComponent"));
const _Default = /*#__PURE__*/ _interop_require_default(require("./Default"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
const GlobalView = (props)=>{
    const { global } = props;
    const { state: locationState } = (0, _reactrouterdom.useLocation)();
    const { code: locale } = (0, _Locale.useLocale)();
    const { permissions, user } = (0, _Auth.useAuth)();
    const [initialState, setInitialState] = (0, _react.useState)();
    const [updatedAt, setUpdatedAt] = (0, _react.useState)();
    const { action, docPermissions, getDocPermissions, getDocPreferences, getVersions, preferencesKey } = (0, _DocumentInfo.useDocumentInfo)();
    const { getPreference } = (0, _Preferences.usePreferences)();
    const { t } = (0, _reacti18next.useTranslation)();
    const config = (0, _Config.useConfig)();
    const { routes: { api }, serverURL } = (0, _Config.useConfig)();
    const { reportUpdate } = (0, _DocumentEvents.useDocumentEvents)();
    const { slug, admin: { components: { views: { Edit: Edit } = {} } = {} } = {}, fields } = global;
    const onSave = (0, _react.useCallback)(async (json)=>{
        reportUpdate({
            entitySlug: global.slug,
            updatedAt: json?.result?.updatedAt || new Date().toISOString()
        });
        void getVersions();
        void getDocPermissions();
        setUpdatedAt(json?.result?.updatedAt);
        const preferences = await getDocPreferences();
        const state = await (0, _buildStateFromSchema.default)({
            config,
            data: json.result,
            fieldSchema: fields,
            locale,
            operation: 'update',
            preferences,
            t,
            user
        });
        setInitialState(state);
    }, [
        getVersions,
        fields,
        user,
        locale,
        t,
        getDocPermissions,
        getDocPreferences,
        config,
        global,
        reportUpdate
    ]);
    const [{ data, isLoading: isLoadingData }] = (0, _usePayloadAPI.default)(`${serverURL}${api}/globals/${slug}`, {
        initialData: null,
        initialParams: {
            depth: 0,
            draft: 'true',
            'fallback-locale': 'null'
        }
    });
    const dataToRender = locationState?.data || data;
    (0, _react.useEffect)(()=>{
        const awaitInitialState = async ()=>{
            const preferences = await getDocPreferences();
            const state = await (0, _buildStateFromSchema.default)({
                config,
                data: dataToRender,
                fieldSchema: fields,
                locale,
                operation: 'update',
                preferences,
                t,
                user
            });
            if (preferencesKey) {
                await getPreference(preferencesKey);
            }
            setInitialState(state);
        };
        if (dataToRender) void awaitInitialState();
    }, [
        dataToRender,
        fields,
        user,
        locale,
        getPreference,
        preferencesKey,
        t,
        getDocPreferences,
        config
    ]);
    const isLoading = !initialState || !docPermissions || isLoadingData;
    const componentProps = {
        action,
        apiURL: `${serverURL}${api}/globals/${slug}?locale=${locale}${global.versions?.drafts ? '&draft=true' : ''}`,
        canAccessAdmin: permissions?.canAccessAdmin,
        data: dataToRender,
        fieldTypes: _fieldtypes.fieldTypes,
        global,
        initialState,
        isLoading,
        onSave,
        permissions: docPermissions,
        updatedAt: updatedAt || dataToRender?.updatedAt,
        user
    };
    return /*#__PURE__*/ _react.default.createElement(_EditDepth.EditDepthContext.Provider, {
        value: 1
    }, /*#__PURE__*/ _react.default.createElement(_RenderCustomComponent.default, {
        CustomComponent: typeof Edit === 'function' ? Edit : undefined,
        DefaultComponent: _Default.default,
        componentProps: componentProps
    }));
};
const _default = GlobalView;

//# sourceMappingURL=data:application/json;base64,