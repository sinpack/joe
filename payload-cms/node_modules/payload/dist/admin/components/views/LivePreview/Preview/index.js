"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "LivePreview", {
    enumerable: true,
    get: function() {
        return LivePreview;
    }
});
const _react = /*#__PURE__*/ _interop_require_wildcard(require("react"));
const _ShimmerEffect = require("../../../elements/ShimmerEffect");
const _context = require("../../../forms/Form/context");
const _reduceFieldsToValues = /*#__PURE__*/ _interop_require_default(require("../../../forms/Form/reduceFieldsToValues"));
const _DocumentEvents = require("../../../utilities/DocumentEvents");
const _context1 = require("../Context/context");
const _Device = require("../Device");
const _IFrame = require("../IFrame");
const _Toolbar = require("../Toolbar");
require("./index.scss");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
const baseClass = 'live-preview-window';
const LivePreview = (props)=>{
    const { appIsReady, iframeHasLoaded, iframeRef, popupRef, previewWindowType, setIframeHasLoaded, url } = (0, _context1.useLivePreviewContext)();
    const { mostRecentUpdate } = (0, _DocumentEvents.useDocumentEvents)();
    const { breakpoint, fieldSchemaJSON } = (0, _context1.useLivePreviewContext)();
    const prevWindowType = _react.default.useRef();
    const [fields] = (0, _context.useAllFormFields)();
    // The preview could either be an iframe embedded on the page
    // Or it could be a separate popup window
    // We need to transmit data to both accordingly
    (0, _react.useEffect)(()=>{
        // For performance, do no reduce fields to values until after the iframe or popup has loaded
        if (fields && window && 'postMessage' in window && appIsReady) {
            const values = (0, _reduceFieldsToValues.default)(fields, true);
            // To reduce on large `postMessage` payloads, only send `fieldSchemaToJSON` one time
            // To do this, the underlying JS function maintains a cache of this value
            // So we need to send it through each time the window type changes
            // But only once per window type change, not on every render, because this is a potentially large obj
            const shouldSendSchema = !prevWindowType.current || prevWindowType.current !== previewWindowType;
            prevWindowType.current = previewWindowType;
            const message = {
                data: values,
                externallyUpdatedRelationship: mostRecentUpdate,
                fieldSchemaJSON: shouldSendSchema ? fieldSchemaJSON : undefined,
                type: 'payload-live-preview'
            };
            // Post message to external popup window
            if (previewWindowType === 'popup' && popupRef.current) {
                popupRef.current.postMessage(message, url);
            }
            // Post message to embedded iframe
            if (previewWindowType === 'iframe' && iframeRef.current) {
                iframeRef.current.contentWindow?.postMessage(message, url);
            }
        }
    }, [
        fields,
        url,
        iframeHasLoaded,
        previewWindowType,
        popupRef,
        appIsReady,
        iframeRef,
        setIframeHasLoaded,
        fieldSchemaJSON,
        mostRecentUpdate
    ]);
    if (previewWindowType === 'iframe') {
        return /*#__PURE__*/ _react.default.createElement("div", {
            className: [
                baseClass,
                breakpoint && breakpoint !== 'responsive' && `${baseClass}--has-breakpoint`
            ].filter(Boolean).join(' ')
        }, /*#__PURE__*/ _react.default.createElement("div", {
            className: `${baseClass}__wrapper`
        }, /*#__PURE__*/ _react.default.createElement(_Toolbar.LivePreviewToolbar, props), /*#__PURE__*/ _react.default.createElement("div", {
            className: `${baseClass}__main`
        }, /*#__PURE__*/ _react.default.createElement(_Device.DeviceContainer, null, url ? /*#__PURE__*/ _react.default.createElement(_IFrame.IFrame, {
            ref: iframeRef,
            setIframeHasLoaded: setIframeHasLoaded,
            url: url
        }) : /*#__PURE__*/ _react.default.createElement(_ShimmerEffect.ShimmerEffect, {
            height: "100%"
        })))));
    }
};

//# sourceMappingURL=data:application/json;base64,