"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "ToolbarControls", {
    enumerable: true,
    get: function() {
        return ToolbarControls;
    }
});
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _ = require("../../../..");
const _PopupButtonList = /*#__PURE__*/ _interop_require_wildcard(require("../../../../elements/Popup/PopupButtonList"));
const _ExternalLink = require("../../../../graphics/ExternalLink");
const _context = require("../../Context/context");
const _SizeInput = require("../SizeInput");
require("./index.scss");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
const baseClass = 'live-preview-toolbar-controls';
const zoomOptions = [
    50,
    75,
    100,
    125,
    150,
    200
];
const customOption = {
    label: 'Custom',
    value: 'custom'
};
const ToolbarControls = ()=>{
    const { breakpoint, breakpoints, setBreakpoint, setPreviewWindowType, setZoom, url, zoom } = (0, _context.useLivePreviewContext)();
    return /*#__PURE__*/ _react.default.createElement("div", {
        className: baseClass
    }, breakpoints?.length > 0 && /*#__PURE__*/ _react.default.createElement(_.Popup, {
        className: `${baseClass}__breakpoint`,
        button: /*#__PURE__*/ _react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/ _react.default.createElement("span", null, breakpoints.find((bp)=>bp.name == breakpoint)?.label ?? customOption.label), " ", /*#__PURE__*/ _react.default.createElement(_.Chevron, {
            className: `${baseClass}__chevron`
        })),
        render: ({ close })=>/*#__PURE__*/ _react.default.createElement(_PopupButtonList.ButtonGroup, null, /*#__PURE__*/ _react.default.createElement(_react.default.Fragment, null, breakpoints.map((bp)=>/*#__PURE__*/ _react.default.createElement(_PopupButtonList.Button, {
                    key: bp.name,
                    active: bp.name == breakpoint,
                    onClick: ()=>{
                        setBreakpoint(bp.name);
                        close();
                    }
                }, bp.label)), breakpoint === 'custom' && /*#__PURE__*/ _react.default.createElement(_PopupButtonList.Button, {
                active: breakpoint == customOption.value,
                onClick: ()=>{
                    setBreakpoint(customOption.value);
                    close();
                }
            }, customOption.label))),
        showScrollbar: true,
        verticalAlign: "bottom",
        horizontalAlign: "right"
    }), /*#__PURE__*/ _react.default.createElement("div", {
        className: `${baseClass}__device-size`
    }, /*#__PURE__*/ _react.default.createElement(_SizeInput.PreviewFrameSizeInput, {
        axis: "x"
    }), /*#__PURE__*/ _react.default.createElement("span", {
        className: `${baseClass}__size-divider`
    }, /*#__PURE__*/ _react.default.createElement(_.X, null)), /*#__PURE__*/ _react.default.createElement(_SizeInput.PreviewFrameSizeInput, {
        axis: "y"
    })), /*#__PURE__*/ _react.default.createElement(_.Popup, {
        className: `${baseClass}__zoom`,
        button: /*#__PURE__*/ _react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/ _react.default.createElement("span", null, zoom * 100, "%"), " ", /*#__PURE__*/ _react.default.createElement(_.Chevron, {
            className: `${baseClass}__chevron`
        })),
        render: ({ close })=>/*#__PURE__*/ _react.default.createElement(_PopupButtonList.ButtonGroup, null, /*#__PURE__*/ _react.default.createElement(_react.default.Fragment, null, zoomOptions.map((zoomValue)=>/*#__PURE__*/ _react.default.createElement(_PopupButtonList.Button, {
                    key: zoomValue,
                    active: zoom * 100 == zoomValue,
                    onClick: ()=>{
                        setZoom(zoomValue / 100);
                        close();
                    }
                }, zoomValue, "%")))),
        showScrollbar: true,
        verticalAlign: "bottom",
        horizontalAlign: "right"
    }), /*#__PURE__*/ _react.default.createElement("a", {
        className: `${baseClass}__external`,
        href: url,
        onClick: (e)=>{
            e.preventDefault();
            setPreviewWindowType('popup');
        },
        type: "button"
    }, /*#__PURE__*/ _react.default.createElement(_ExternalLink.ExternalLinkIcon, null)));
};

//# sourceMappingURL=data:application/json;base64,