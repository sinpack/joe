"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "buildVersionColumns", {
    enumerable: true,
    get: function() {
        return buildVersionColumns;
    }
});
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _reacti18next = require("react-i18next");
const _reactrouterdom = require("react-router-dom");
const _formatDate = require("../../../utilities/formatDate");
const _SortColumn = /*#__PURE__*/ _interop_require_default(require("../../elements/SortColumn"));
const _Config = require("../../utilities/Config");
const _AutosaveCell = require("./cells/AutosaveCell");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const CreatedAtCell = ({ id, collection, date, global })=>{
    const { admin: { dateFormat }, routes: { admin } } = (0, _Config.useConfig)();
    const { params: { id: docID } } = (0, _reactrouterdom.useRouteMatch)();
    const { i18n } = (0, _reacti18next.useTranslation)();
    let to;
    if (collection) to = `${admin}/collections/${collection.slug}/${docID}/versions/${id}`;
    if (global) to = `${admin}/globals/${global.slug}/versions/${id}`;
    return /*#__PURE__*/ _react.default.createElement(_reactrouterdom.Link, {
        to: to
    }, date && (0, _formatDate.formatDate)(date, dateFormat, i18n?.language));
};
const TextCell = ({ children })=>/*#__PURE__*/ _react.default.createElement("span", null, children);
const buildVersionColumns = (collection, global, t, latestDraftVersion, latestPublishedVersion)=>[
        {
            name: '',
            accessor: 'updatedAt',
            active: true,
            components: {
                Heading: /*#__PURE__*/ _react.default.createElement(_SortColumn.default, {
                    label: t('general:updatedAt'),
                    name: "updatedAt"
                }),
                renderCell: (row, data)=>/*#__PURE__*/ _react.default.createElement(CreatedAtCell, {
                        collection: collection,
                        date: data,
                        global: global,
                        id: row?.id
                    })
            },
            label: ''
        },
        {
            name: '',
            accessor: 'id',
            active: true,
            components: {
                Heading: /*#__PURE__*/ _react.default.createElement(_SortColumn.default, {
                    disable: true,
                    label: t('versionID'),
                    name: "id"
                }),
                renderCell: (row, data)=>/*#__PURE__*/ _react.default.createElement(TextCell, null, data)
            },
            label: ''
        },
        {
            name: '',
            accessor: 'autosave',
            active: true,
            components: {
                Heading: /*#__PURE__*/ _react.default.createElement(_SortColumn.default, {
                    disable: true,
                    label: t('status'),
                    name: "autosave"
                }),
                renderCell: (row)=>{
                    return /*#__PURE__*/ _react.default.createElement(_AutosaveCell.AutosaveCell, {
                        latestDraftVersion: latestDraftVersion,
                        latestPublishedVersion: latestPublishedVersion,
                        rowData: row
                    });
                }
            },
            label: ''
        }
    ];

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9hZG1pbi9jb21wb25lbnRzL3ZpZXdzL1ZlcnNpb25zL2NvbHVtbnMudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHsgVEZ1bmN0aW9uIH0gZnJvbSAncmVhY3QtaTE4bmV4dCdcblxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHsgdXNlVHJhbnNsYXRpb24gfSBmcm9tICdyZWFjdC1pMThuZXh0J1xuaW1wb3J0IHsgTGluaywgdXNlUm91dGVNYXRjaCB9IGZyb20gJ3JlYWN0LXJvdXRlci1kb20nXG5cbmltcG9ydCB0eXBlIHsgU2FuaXRpemVkQ29sbGVjdGlvbkNvbmZpZyB9IGZyb20gJy4uLy4uLy4uLy4uL2NvbGxlY3Rpb25zL2NvbmZpZy90eXBlcydcbmltcG9ydCB0eXBlIHsgU2FuaXRpemVkR2xvYmFsQ29uZmlnIH0gZnJvbSAnLi4vLi4vLi4vLi4vZ2xvYmFscy9jb25maWcvdHlwZXMnXG5pbXBvcnQgdHlwZSB7IENvbHVtbiB9IGZyb20gJy4uLy4uL2VsZW1lbnRzL1RhYmxlL3R5cGVzJ1xuXG5pbXBvcnQgeyBmb3JtYXREYXRlIH0gZnJvbSAnLi4vLi4vLi4vdXRpbGl0aWVzL2Zvcm1hdERhdGUnXG5pbXBvcnQgU29ydENvbHVtbiBmcm9tICcuLi8uLi9lbGVtZW50cy9Tb3J0Q29sdW1uJ1xuaW1wb3J0IHsgdXNlQ29uZmlnIH0gZnJvbSAnLi4vLi4vdXRpbGl0aWVzL0NvbmZpZydcbmltcG9ydCB7IEF1dG9zYXZlQ2VsbCB9IGZyb20gJy4vY2VsbHMvQXV0b3NhdmVDZWxsJ1xuXG50eXBlIENyZWF0ZWRBdENlbGxQcm9wcyA9IHtcbiAgY29sbGVjdGlvbj86IFNhbml0aXplZENvbGxlY3Rpb25Db25maWdcbiAgZGF0ZTogc3RyaW5nXG4gIGdsb2JhbD86IFNhbml0aXplZEdsb2JhbENvbmZpZ1xuICBpZDogc3RyaW5nXG59XG5cbmNvbnN0IENyZWF0ZWRBdENlbGw6IFJlYWN0LkZDPENyZWF0ZWRBdENlbGxQcm9wcz4gPSAoeyBpZCwgY29sbGVjdGlvbiwgZGF0ZSwgZ2xvYmFsIH0pID0+IHtcbiAgY29uc3Qge1xuICAgIGFkbWluOiB7IGRhdGVGb3JtYXQgfSxcbiAgICByb3V0ZXM6IHsgYWRtaW4gfSxcbiAgfSA9IHVzZUNvbmZpZygpXG4gIGNvbnN0IHtcbiAgICBwYXJhbXM6IHsgaWQ6IGRvY0lEIH0sXG4gIH0gPSB1c2VSb3V0ZU1hdGNoPHsgaWQ6IHN0cmluZyB9PigpXG5cbiAgY29uc3QgeyBpMThuIH0gPSB1c2VUcmFuc2xhdGlvbigpXG5cbiAgbGV0IHRvOiBzdHJpbmdcblxuICBpZiAoY29sbGVjdGlvbikgdG8gPSBgJHthZG1pbn0vY29sbGVjdGlvbnMvJHtjb2xsZWN0aW9uLnNsdWd9LyR7ZG9jSUR9L3ZlcnNpb25zLyR7aWR9YFxuICBpZiAoZ2xvYmFsKSB0byA9IGAke2FkbWlufS9nbG9iYWxzLyR7Z2xvYmFsLnNsdWd9L3ZlcnNpb25zLyR7aWR9YFxuXG4gIHJldHVybiA8TGluayB0bz17dG99PntkYXRlICYmIGZvcm1hdERhdGUoZGF0ZSwgZGF0ZUZvcm1hdCwgaTE4bj8ubGFuZ3VhZ2UpfTwvTGluaz5cbn1cblxuY29uc3QgVGV4dENlbGw6IFJlYWN0LkZDPHsgY2hpbGRyZW4/OiBSZWFjdC5SZWFjdE5vZGUgfT4gPSAoeyBjaGlsZHJlbiB9KSA9PiA8c3Bhbj57Y2hpbGRyZW59PC9zcGFuPlxuXG5leHBvcnQgY29uc3QgYnVpbGRWZXJzaW9uQ29sdW1ucyA9IChcbiAgY29sbGVjdGlvbjogU2FuaXRpemVkQ29sbGVjdGlvbkNvbmZpZyxcbiAgZ2xvYmFsOiBTYW5pdGl6ZWRHbG9iYWxDb25maWcsXG4gIHQ6IFRGdW5jdGlvbixcbiAgbGF0ZXN0RHJhZnRWZXJzaW9uPzogc3RyaW5nLFxuICBsYXRlc3RQdWJsaXNoZWRWZXJzaW9uPzogc3RyaW5nLFxuKTogQ29sdW1uW10gPT4gW1xuICB7XG4gICAgbmFtZTogJycsXG4gICAgYWNjZXNzb3I6ICd1cGRhdGVkQXQnLFxuICAgIGFjdGl2ZTogdHJ1ZSxcbiAgICBjb21wb25lbnRzOiB7XG4gICAgICBIZWFkaW5nOiA8U29ydENvbHVtbiBsYWJlbD17dCgnZ2VuZXJhbDp1cGRhdGVkQXQnKX0gbmFtZT1cInVwZGF0ZWRBdFwiIC8+LFxuICAgICAgcmVuZGVyQ2VsbDogKHJvdywgZGF0YSkgPT4gKFxuICAgICAgICA8Q3JlYXRlZEF0Q2VsbCBjb2xsZWN0aW9uPXtjb2xsZWN0aW9ufSBkYXRlPXtkYXRhfSBnbG9iYWw9e2dsb2JhbH0gaWQ9e3Jvdz8uaWR9IC8+XG4gICAgICApLFxuICAgIH0sXG4gICAgbGFiZWw6ICcnLFxuICB9LFxuICB7XG4gICAgbmFtZTogJycsXG4gICAgYWNjZXNzb3I6ICdpZCcsXG4gICAgYWN0aXZlOiB0cnVlLFxuICAgIGNvbXBvbmVudHM6IHtcbiAgICAgIEhlYWRpbmc6IDxTb3J0Q29sdW1uIGRpc2FibGUgbGFiZWw9e3QoJ3ZlcnNpb25JRCcpfSBuYW1lPVwiaWRcIiAvPixcbiAgICAgIHJlbmRlckNlbGw6IChyb3csIGRhdGEpID0+IDxUZXh0Q2VsbD57ZGF0YX08L1RleHRDZWxsPixcbiAgICB9LFxuICAgIGxhYmVsOiAnJyxcbiAgfSxcbiAge1xuICAgIG5hbWU6ICcnLFxuICAgIGFjY2Vzc29yOiAnYXV0b3NhdmUnLFxuICAgIGFjdGl2ZTogdHJ1ZSxcbiAgICBjb21wb25lbnRzOiB7XG4gICAgICBIZWFkaW5nOiA8U29ydENvbHVtbiBkaXNhYmxlIGxhYmVsPXt0KCdzdGF0dXMnKX0gbmFtZT1cImF1dG9zYXZlXCIgLz4sXG4gICAgICByZW5kZXJDZWxsOiAocm93KSA9PiB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgPEF1dG9zYXZlQ2VsbFxuICAgICAgICAgICAgbGF0ZXN0RHJhZnRWZXJzaW9uPXtsYXRlc3REcmFmdFZlcnNpb259XG4gICAgICAgICAgICBsYXRlc3RQdWJsaXNoZWRWZXJzaW9uPXtsYXRlc3RQdWJsaXNoZWRWZXJzaW9ufVxuICAgICAgICAgICAgcm93RGF0YT17cm93fVxuICAgICAgICAgIC8+XG4gICAgICAgIClcbiAgICAgIH0sXG4gICAgfSxcbiAgICBsYWJlbDogJycsXG4gIH0sXG5dXG4iXSwibmFtZXMiOlsiYnVpbGRWZXJzaW9uQ29sdW1ucyIsIkNyZWF0ZWRBdENlbGwiLCJpZCIsImNvbGxlY3Rpb24iLCJkYXRlIiwiZ2xvYmFsIiwiYWRtaW4iLCJkYXRlRm9ybWF0Iiwicm91dGVzIiwidXNlQ29uZmlnIiwicGFyYW1zIiwiZG9jSUQiLCJ1c2VSb3V0ZU1hdGNoIiwiaTE4biIsInVzZVRyYW5zbGF0aW9uIiwidG8iLCJzbHVnIiwiTGluayIsImZvcm1hdERhdGUiLCJsYW5ndWFnZSIsIlRleHRDZWxsIiwiY2hpbGRyZW4iLCJzcGFuIiwidCIsImxhdGVzdERyYWZ0VmVyc2lvbiIsImxhdGVzdFB1Ymxpc2hlZFZlcnNpb24iLCJuYW1lIiwiYWNjZXNzb3IiLCJhY3RpdmUiLCJjb21wb25lbnRzIiwiSGVhZGluZyIsIlNvcnRDb2x1bW4iLCJsYWJlbCIsInJlbmRlckNlbGwiLCJyb3ciLCJkYXRhIiwiZGlzYWJsZSIsIkF1dG9zYXZlQ2VsbCIsInJvd0RhdGEiXSwicmFuZ2VNYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OyIsIm1hcHBpbmdzIjoiOzs7OytCQTJDYUE7OztlQUFBQTs7OzhEQXpDSzs4QkFDYTtnQ0FDSzs0QkFNVDttRUFDSjt3QkFDRzs4QkFDRzs7Ozs7O0FBUzdCLE1BQU1DLGdCQUE4QyxDQUFDLEVBQUVDLEVBQUUsRUFBRUMsVUFBVSxFQUFFQyxJQUFJLEVBQUVDLE1BQU0sRUFBRTtJQUNuRixNQUFNLEVBQ0pDLE9BQU8sRUFBRUMsVUFBVSxFQUFFLEVBQ3JCQyxRQUFRLEVBQUVGLEtBQUssRUFBRSxFQUNsQixHQUFHRyxJQUFBQSxpQkFBUztJQUNiLE1BQU0sRUFDSkMsUUFBUSxFQUFFUixJQUFJUyxLQUFLLEVBQUUsRUFDdEIsR0FBR0MsSUFBQUEsNkJBQWE7SUFFakIsTUFBTSxFQUFFQyxJQUFJLEVBQUUsR0FBR0MsSUFBQUEsNEJBQWM7SUFFL0IsSUFBSUM7SUFFSixJQUFJWixZQUFZWSxLQUFLLENBQUMsRUFBRVQsTUFBTSxhQUFhLEVBQUVILFdBQVdhLElBQUksQ0FBQyxDQUFDLEVBQUVMLE1BQU0sVUFBVSxFQUFFVCxHQUFHLENBQUM7SUFDdEYsSUFBSUcsUUFBUVUsS0FBSyxDQUFDLEVBQUVULE1BQU0sU0FBUyxFQUFFRCxPQUFPVyxJQUFJLENBQUMsVUFBVSxFQUFFZCxHQUFHLENBQUM7SUFFakUscUJBQU8sNkJBQUNlLG9CQUFJO1FBQUNGLElBQUlBO09BQUtYLFFBQVFjLElBQUFBLHNCQUFVLEVBQUNkLE1BQU1HLFlBQVlNLE1BQU1NO0FBQ25FO0FBRUEsTUFBTUMsV0FBcUQsQ0FBQyxFQUFFQyxRQUFRLEVBQUUsaUJBQUssNkJBQUNDLGNBQU1EO0FBRTdFLE1BQU1yQixzQkFBc0IsQ0FDakNHLFlBQ0FFLFFBQ0FrQixHQUNBQyxvQkFDQUMseUJBQ2E7UUFDYjtZQUNFQyxNQUFNO1lBQ05DLFVBQVU7WUFDVkMsUUFBUTtZQUNSQyxZQUFZO2dCQUNWQyx1QkFBUyw2QkFBQ0MsbUJBQVU7b0JBQUNDLE9BQU9ULEVBQUU7b0JBQXNCRyxNQUFLOztnQkFDekRPLFlBQVksQ0FBQ0MsS0FBS0MscUJBQ2hCLDZCQUFDbEM7d0JBQWNFLFlBQVlBO3dCQUFZQyxNQUFNK0I7d0JBQU05QixRQUFRQTt3QkFBUUgsSUFBSWdDLEtBQUtoQzs7WUFFaEY7WUFDQThCLE9BQU87UUFDVDtRQUNBO1lBQ0VOLE1BQU07WUFDTkMsVUFBVTtZQUNWQyxRQUFRO1lBQ1JDLFlBQVk7Z0JBQ1ZDLHVCQUFTLDZCQUFDQyxtQkFBVTtvQkFBQ0ssU0FBQUE7b0JBQVFKLE9BQU9ULEVBQUU7b0JBQWNHLE1BQUs7O2dCQUN6RE8sWUFBWSxDQUFDQyxLQUFLQyxxQkFBUyw2QkFBQ2YsZ0JBQVVlO1lBQ3hDO1lBQ0FILE9BQU87UUFDVDtRQUNBO1lBQ0VOLE1BQU07WUFDTkMsVUFBVTtZQUNWQyxRQUFRO1lBQ1JDLFlBQVk7Z0JBQ1ZDLHVCQUFTLDZCQUFDQyxtQkFBVTtvQkFBQ0ssU0FBQUE7b0JBQVFKLE9BQU9ULEVBQUU7b0JBQVdHLE1BQUs7O2dCQUN0RE8sWUFBWSxDQUFDQztvQkFDWCxxQkFDRSw2QkFBQ0csMEJBQVk7d0JBQ1hiLG9CQUFvQkE7d0JBQ3BCQyx3QkFBd0JBO3dCQUN4QmEsU0FBU0o7O2dCQUdmO1lBQ0Y7WUFDQUYsT0FBTztRQUNUO0tBQ0QifQ==