import { GraphQLInputObjectType } from 'graphql';
import type { FieldAffectingData } from '../../fields/config/types';
/**
 * In GraphQL, you can use "where" as an argument to filter a collection. Example:
 * { Posts(where: { title: { equals: "Hello" } }) { text } }
 * This function defines the operators for a field's condition in the "where" argument of the collection (it thus gets called for every field).
 * For example, in the example above, it would control that
 * - "equals" is a valid operator for the "title" field
 * - the accepted type of the "equals" argument has to be a string.
 *
 * @param field the field for which their valid operators inside a "where" argument is being defined
 * @param parentName the name of the parent field (if any)
 * @returns all the operators (including their types) which can be used as a condition for a given field inside a where
 */
export declare const withOperators: (field: FieldAffectingData, parentName: string) => GraphQLInputObjectType;
//# sourceMappingURL=withOperators.d.ts.map