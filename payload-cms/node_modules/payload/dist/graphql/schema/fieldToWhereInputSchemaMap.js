"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
const _graphql = require("graphql");
const _graphqltypejson = /*#__PURE__*/ _interop_require_default(require("graphql-type-json"));
const _combineParentName = /*#__PURE__*/ _interop_require_default(require("../utilities/combineParentName"));
const _formatName = /*#__PURE__*/ _interop_require_default(require("../utilities/formatName"));
const _recursivelyBuildNestedPaths = /*#__PURE__*/ _interop_require_default(require("./recursivelyBuildNestedPaths"));
const _withOperators = require("./withOperators");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const fieldToSchemaMap = ({ nestedFieldName, parentName, payload })=>({
        array: (field)=>(0, _recursivelyBuildNestedPaths.default)({
                field,
                nestedFieldName2: nestedFieldName,
                parentName,
                payload
            }),
        checkbox: (field)=>({
                type: (0, _withOperators.withOperators)(field, parentName)
            }),
        code: (field)=>({
                type: (0, _withOperators.withOperators)(field, parentName)
            }),
        collapsible: (field)=>(0, _recursivelyBuildNestedPaths.default)({
                field,
                nestedFieldName2: nestedFieldName,
                parentName,
                payload
            }),
        date: (field)=>({
                type: (0, _withOperators.withOperators)(field, parentName)
            }),
        email: (field)=>({
                type: (0, _withOperators.withOperators)(field, parentName)
            }),
        group: (field)=>(0, _recursivelyBuildNestedPaths.default)({
                field,
                nestedFieldName2: nestedFieldName,
                parentName,
                payload
            }),
        json: (field)=>({
                type: (0, _withOperators.withOperators)(field, parentName)
            }),
        number: (field)=>({
                type: (0, _withOperators.withOperators)(field, parentName)
            }),
        point: (field)=>({
                type: (0, _withOperators.withOperators)(field, parentName)
            }),
        radio: (field)=>({
                type: (0, _withOperators.withOperators)(field, parentName)
            }),
        relationship: (field)=>{
            if (Array.isArray(field.relationTo)) {
                return {
                    type: new _graphql.GraphQLInputObjectType({
                        name: `${(0, _combineParentName.default)(parentName, field.name)}_Relation`,
                        fields: {
                            relationTo: {
                                type: new _graphql.GraphQLEnumType({
                                    name: `${(0, _combineParentName.default)(parentName, field.name)}_Relation_RelationTo`,
                                    values: field.relationTo.reduce((values, relation)=>({
                                            ...values,
                                            [(0, _formatName.default)(relation)]: {
                                                value: relation
                                            }
                                        }), {})
                                })
                            },
                            value: {
                                type: _graphqltypejson.default
                            }
                        }
                    })
                };
            }
            return {
                type: (0, _withOperators.withOperators)(field, parentName)
            };
        },
        richText: (field)=>({
                type: (0, _withOperators.withOperators)(field, parentName)
            }),
        row: (field)=>(0, _recursivelyBuildNestedPaths.default)({
                field,
                nestedFieldName2: nestedFieldName,
                parentName,
                payload
            }),
        select: (field)=>({
                type: (0, _withOperators.withOperators)(field, parentName)
            }),
        tabs: (field)=>(0, _recursivelyBuildNestedPaths.default)({
                field,
                nestedFieldName2: nestedFieldName,
                parentName,
                payload
            }),
        text: (field)=>({
                type: (0, _withOperators.withOperators)(field, parentName)
            }),
        textarea: (field)=>({
                type: (0, _withOperators.withOperators)(field, parentName)
            }),
        upload: (field)=>({
                type: (0, _withOperators.withOperators)(field, parentName)
            })
    });
const _default = fieldToSchemaMap;

//# sourceMappingURL=data:application/json;base64,