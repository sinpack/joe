"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "withOperators", {
    enumerable: true,
    get: function() {
        return withOperators;
    }
});
const _graphql = require("graphql");
const _graphqlscalars = require("graphql-scalars");
const _graphqltypejson = require("graphql-type-json");
const _types = require("../../fields/config/types");
const _combineParentName = /*#__PURE__*/ _interop_require_default(require("../utilities/combineParentName"));
const _formatName = /*#__PURE__*/ _interop_require_default(require("../utilities/formatName"));
const _operators = /*#__PURE__*/ _interop_require_default(require("./operators"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const GeoJSONObject = new _graphql.GraphQLInputObjectType({
    name: 'GeoJSONObject',
    fields: {
        coordinates: {
            type: _graphqltypejson.GraphQLJSON
        },
        type: {
            type: _graphql.GraphQLString
        }
    }
});
const defaults = {
    checkbox: {
        operators: [
            ..._operators.default.equality.map((operator)=>({
                    name: operator,
                    type: _graphql.GraphQLBoolean
                }))
        ]
    },
    code: {
        operators: [
            ...[
                ..._operators.default.equality,
                ..._operators.default.partial
            ].map((operator)=>({
                    name: operator,
                    type: _graphql.GraphQLString
                }))
        ]
    },
    date: {
        operators: [
            ...[
                ..._operators.default.equality,
                ..._operators.default.comparison,
                'like'
            ].map((operator)=>({
                    name: operator,
                    type: _graphqlscalars.DateTimeResolver
                }))
        ]
    },
    email: {
        operators: [
            ...[
                ..._operators.default.equality,
                ..._operators.default.partial,
                ..._operators.default.contains
            ].map((operator)=>({
                    name: operator,
                    type: _graphqlscalars.EmailAddressResolver
                }))
        ]
    },
    json: {
        operators: [
            ...[
                ..._operators.default.equality,
                ..._operators.default.partial,
                ..._operators.default.geojson
            ].map((operator)=>({
                    name: operator,
                    type: _graphqltypejson.GraphQLJSON
                }))
        ]
    },
    number: {
        operators: [
            ...[
                ..._operators.default.equality,
                ..._operators.default.comparison
            ].map((operator)=>({
                    name: operator,
                    type: (field)=>{
                        return field?.name === 'id' ? _graphql.GraphQLInt : _graphql.GraphQLFloat;
                    }
                }))
        ]
    },
    point: {
        operators: [
            ...[
                ..._operators.default.equality,
                ..._operators.default.comparison,
                ..._operators.default.geo
            ].map((operator)=>({
                    name: operator,
                    type: new _graphql.GraphQLList(_graphql.GraphQLFloat)
                })),
            ..._operators.default.geojson.map((operator)=>({
                    name: operator,
                    /**
         * @example:
         * within: {
         *  type: "Polygon",
         *  coordinates: [[
         *   [0.0, 0.0],
         *   [1.0, 1.0],
         *   [1.0, 0.0],
         *   [0.0, 0.0],
         *  ]],
         * }
         * @example
         * intersects: {
         *  type: "Point",
         *  coordinates: [ 0.5, 0.5 ]
         * }
         */ type: GeoJSONObject
                }))
        ]
    },
    radio: {
        operators: [
            ...[
                ..._operators.default.equality,
                ..._operators.default.partial
            ].map((operator)=>({
                    name: operator,
                    type: (field, parentName)=>new _graphql.GraphQLEnumType({
                            name: `${(0, _combineParentName.default)(parentName, field.name)}_Input`,
                            values: field.options.reduce((values, option)=>{
                                if ((0, _types.optionIsObject)(option)) {
                                    return {
                                        ...values,
                                        [(0, _formatName.default)(option.value)]: {
                                            value: option.value
                                        }
                                    };
                                }
                                return {
                                    ...values,
                                    [(0, _formatName.default)(option)]: {
                                        value: option
                                    }
                                };
                            }, {})
                        })
                }))
        ]
    },
    relationship: {
        operators: [
            ...[
                ..._operators.default.equality,
                ..._operators.default.contains
            ].map((operator)=>({
                    name: operator,
                    type: _graphqltypejson.GraphQLJSON
                }))
        ]
    },
    richText: {
        operators: [
            ...[
                ..._operators.default.equality,
                ..._operators.default.partial
            ].map((operator)=>({
                    name: operator,
                    type: _graphqltypejson.GraphQLJSON
                }))
        ]
    },
    select: {
        operators: [
            ...[
                ..._operators.default.equality,
                ..._operators.default.contains
            ].map((operator)=>({
                    name: operator,
                    type: (field, parentName)=>new _graphql.GraphQLEnumType({
                            name: `${(0, _combineParentName.default)(parentName, field.name)}_Input`,
                            values: field.options.reduce((values, option)=>{
                                if ((0, _types.optionIsObject)(option)) {
                                    return {
                                        ...values,
                                        [(0, _formatName.default)(option.value)]: {
                                            value: option.value
                                        }
                                    };
                                }
                                return {
                                    ...values,
                                    [(0, _formatName.default)(option)]: {
                                        value: option
                                    }
                                };
                            }, {})
                        })
                }))
        ]
    },
    text: {
        operators: [
            ...[
                ..._operators.default.equality,
                ..._operators.default.partial,
                ..._operators.default.contains
            ].map((operator)=>({
                    name: operator,
                    type: _graphql.GraphQLString
                }))
        ]
    },
    textarea: {
        operators: [
            ...[
                ..._operators.default.equality,
                ..._operators.default.partial
            ].map((operator)=>({
                    name: operator,
                    type: _graphql.GraphQLString
                }))
        ]
    },
    upload: {
        operators: [
            ..._operators.default.equality.map((operator)=>({
                    name: operator,
                    type: _graphql.GraphQLString
                }))
        ]
    }
};
const listOperators = [
    'in',
    'not_in',
    'all'
];
const gqlTypeCache = {};
const withOperators = (field, parentName)=>{
    if (!defaults?.[field.type]) throw new Error(`Error: ${field.type} has no defaults configured.`);
    const name = `${(0, _combineParentName.default)(parentName, field.name)}_operator`;
    // Get the default operators for the field type which are hard-coded above
    const fieldOperators = [
        ...defaults[field.type].operators
    ];
    if (!('required' in field) || !field.required) {
        fieldOperators.push({
            name: 'exists',
            type: fieldOperators[0].type
        });
    }
    return new _graphql.GraphQLInputObjectType({
        name,
        fields: fieldOperators.reduce((objectTypeFields, operator)=>{
            // Get the type of the operator. It can be either static, or dynamic (=> a function)
            let gqlType = typeof operator.type === 'function' ? operator.type(field, parentName) : operator.type;
            // GraphQL does not allow types with duplicate names, so we use this cache to avoid that.
            // Without this, select and radio fields would have the same name, and GraphQL would throw an error
            // This usually only happens if a custom type is returned from the operator.type function
            if (typeof operator.type === 'function' && 'name' in gqlType) {
                if (gqlTypeCache[gqlType.name]) {
                    gqlType = gqlTypeCache[gqlType.name];
                } else {
                    gqlTypeCache[gqlType.name] = gqlType;
                }
            }
            if (listOperators.includes(operator.name)) {
                gqlType = new _graphql.GraphQLList(gqlType);
            } else if (operator.name === 'exists') {
                gqlType = _graphql.GraphQLBoolean;
            }
            return {
                ...objectTypeFields,
                [operator.name]: {
                    type: gqlType
                }
            };
        }, {})
    });
};

//# sourceMappingURL=data:application/json;base64,