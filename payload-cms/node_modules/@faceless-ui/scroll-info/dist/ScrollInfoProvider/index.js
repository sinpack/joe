"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var react_1 = __importStar(require("react"));
var context_1 = __importDefault(require("../ScrollInfoProvider/context"));
var reducer = function (state, payload) {
    var timestamp = payload.timestamp, animationRef = payload.animationRef;
    animationRef.current = null;
    var prevScrollX = state.x, prevScrollY = state.y, prevXDirection = state.xDirection, prevYDirection = state.yDirection, prevEventsFired = state.eventsFired, prevHasScrolled = state.hasScrolled;
    // Set currentScroll to zero on mount for cross-browser compatibility --
    // Some browsers populate the cached window.pageOffset at different points of the component lifecycle.
    // Chrome mounts with cached window.pageOffset coordinates even before firing the respective cached scroll event.
    // Neither Safari and FireFox populate these coordinates until this cached scroll (natively triggered by the browser).
    // The presence of a timestamp indicates that the caller of this method was not componentDidMount,
    // but rather a true scroll event via requestAnimationFrame. Keep at zero otherwise.
    var hasScrolled = prevHasScrolled || Boolean(timestamp);
    var currentScrollX = hasScrolled ? window.pageXOffset : 0;
    var currentScrollY = hasScrolled ? window.pageYOffset : 0;
    // Only increment the eventsFired state after the first true scroll event.
    var eventsFired = hasScrolled ? prevEventsFired + 1 : prevEventsFired;
    var xDifference = currentScrollX - prevScrollX;
    var yDifference = currentScrollY - prevScrollY;
    var xPercentage = (currentScrollX / (document.body.scrollWidth - window.innerWidth)) * 100;
    var yPercentage = (currentScrollY / (document.body.scrollHeight - window.innerHeight)) * 100;
    var totalPercentage = (xPercentage + yPercentage) / 2;
    var xDirection = xDifference > 0 ? 'right' : xDifference < 0 ? 'left' : prevXDirection; // eslint-disable-line no-nested-ternary
    var yDirection = yDifference > 0 ? 'down' : yDifference < 0 ? 'up' : prevYDirection; // eslint-disable-line no-nested-ternary
    return {
        x: currentScrollX,
        y: currentScrollY,
        xDifference: xDifference,
        yDifference: yDifference,
        xDirection: xDirection,
        yDirection: yDirection,
        xPercentage: xPercentage,
        yPercentage: yPercentage,
        totalPercentage: totalPercentage,
        eventsFired: eventsFired,
        hasScrolled: hasScrolled,
    };
};
var ScrollInfoProvider = function (props) {
    var children = props.children;
    var animationRef = (0, react_1.useRef)(null);
    var _a = (0, react_1.useReducer)(reducer, {
        x: 0,
        y: 0,
        xDifference: 0,
        yDifference: 0,
        xDirection: undefined,
        yDirection: undefined,
        xPercentage: 0,
        yPercentage: 0,
        totalPercentage: 0,
        eventsFired: 0,
        hasScrolled: false,
    }), state = _a[0], dispatch = _a[1];
    var requestAnimation = (0, react_1.useCallback)(function (e) {
        if (animationRef.current) {
            cancelAnimationFrame(animationRef.current);
        }
        animationRef.current = requestAnimationFrame(function (timestamp) {
            dispatch({
                e: e,
                timestamp: timestamp,
                animationRef: animationRef,
            });
        });
    }, []);
    (0, react_1.useEffect)(function () {
        window.addEventListener('scroll', requestAnimation);
        return function () {
            window.removeEventListener('scroll', requestAnimation);
        };
    }, [requestAnimation]);
    // use this effect to test rAF debounce by requesting animation every 1ms, for a total 120ms
    // count the number of times 'requestAnimation' callback is fired compared to the reducer
    // results: ~23 requests will be made, ~17 requests will be canceled, so only ~8 will truly dispatch
    // useEffect(() => {
    //   const firstID = setInterval(requestAnimation, 1);
    //   setInterval(() => clearInterval(firstID), 120);
    // }, [requestAnimation]);
    return (react_1.default.createElement(context_1.default.Provider, { value: __assign({}, state) }, children && children));
};
exports.default = ScrollInfoProvider;
//# sourceMappingURL=index.js.map