"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var react_1 = __importStar(require("react"));
var context_1 = __importDefault(require("../WindowInfoProvider/context"));
var reducer = function (state, action) {
    var _a = action.payload, breakpoints = _a.breakpoints, animationRef = _a.animationRef;
    animationRef.current = null;
    var prevEventsFired = state.eventsFired;
    var _b = document.documentElement, style = _b.style, clientWidth = _b.clientWidth, clientHeight = _b.clientHeight;
    var windowWidth = window.innerWidth, windowHeight = window.innerHeight;
    var viewportWidth = "".concat(clientWidth / 100, "px");
    var viewportHeight = "".concat(clientHeight / 100, "px");
    var watchedBreakpoints = breakpoints ? Object.keys(breakpoints).reduce(function (matchMediaBreakpoints, key) {
        var _a;
        return (__assign(__assign({}, matchMediaBreakpoints), (_a = {}, _a[key] = window.matchMedia(breakpoints[key]).matches, _a)));
    }, {}) : {};
    var newState = {
        width: windowWidth,
        height: windowHeight,
        '--vw': viewportWidth,
        '--vh': viewportHeight,
        breakpoints: watchedBreakpoints,
        eventsFired: prevEventsFired + 1,
    };
    // This method is a cross-browser patch to achieve above-the-fold, fullscreen mobile experiences.
    // The technique accounts for the collapsing bottom toolbar of some mobile browsers which are out of normal flow.
    // It provides an alternate to the "vw" and "vh" CSS units by generating respective CSS variables.
    // It specifically reads the size of documentElement since its height does not include the toolbar.
    style.setProperty('--vw', viewportWidth);
    style.setProperty('--vh', viewportHeight);
    return newState;
};
var WindowInfoProvider = function (props) {
    var breakpoints = props.breakpoints, children = props.children;
    var animationRef = (0, react_1.useRef)(null);
    var _a = (0, react_1.useReducer)(reducer, {
        width: undefined,
        height: undefined,
        '--vw': '',
        '--vh': '',
        breakpoints: {},
        eventsFired: 0,
    }), state = _a[0], dispatch = _a[1];
    var requestAnimation = (0, react_1.useCallback)(function () {
        if (animationRef.current)
            cancelAnimationFrame(animationRef.current);
        animationRef.current = requestAnimationFrame(function () { return dispatch({
            type: 'UPDATE',
            payload: {
                breakpoints: breakpoints,
                animationRef: animationRef,
            }
        }); });
    }, [breakpoints]);
    var requestThrottledAnimation = (0, react_1.useCallback)(function () {
        setTimeout(function () {
            requestAnimation();
        }, 500);
    }, [requestAnimation]);
    (0, react_1.useEffect)(function () {
        window.addEventListener('resize', requestAnimation);
        window.addEventListener('orientationchange', requestThrottledAnimation);
        return function () {
            window.removeEventListener('resize', requestAnimation);
            window.removeEventListener('orientationchange', requestThrottledAnimation);
        };
    }, [
        requestAnimation,
        requestThrottledAnimation,
    ]);
    // use this effect to test rAF debounce by requesting animation every 1ms, for a total 120ms
    // results: ~23 requests will be cancelled, ~17 requests will be cancelled, and only ~8 will truly dispatch
    // useEffect(() => {
    //   const firstID = setInterval(requestAnimation, 1);
    //   setInterval(() => clearInterval(firstID), 120);
    // }, [requestAnimation]);
    (0, react_1.useEffect)(function () {
        if (state.eventsFired === 0) {
            dispatch({
                type: 'UPDATE',
                payload: {
                    breakpoints: breakpoints,
                    animationRef: animationRef,
                }
            });
        }
    }, [
        breakpoints,
        state,
    ]);
    return (react_1.default.createElement(context_1.default.Provider, { value: __assign({}, state) }, children && children));
};
exports.default = WindowInfoProvider;
//# sourceMappingURL=index.js.map